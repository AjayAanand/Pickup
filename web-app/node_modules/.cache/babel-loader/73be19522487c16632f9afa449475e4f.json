{"ast":null,"code":"'use strict';\n\nvar tslib = require('tslib');\nvar util = require('@firebase/util');\nvar app = require('@firebase/app');\nvar component = require('@firebase/component');\nvar logger = require('@firebase/logger');\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _debugErrorMap() {\n  var _a;\n  return _a = {}, _a[\"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */] = 'This operation is restricted to administrators only.', _a[\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */] = '', _a[\"app-not-authorized\" /* AuthErrorCode.APP_NOT_AUTHORIZED */] = \"This app, identified by the domain where it's hosted, is not \" + 'authorized to use Firebase Authentication with the provided API key. ' + 'Review your key configuration in the Google API console.', _a[\"app-not-installed\" /* AuthErrorCode.APP_NOT_INSTALLED */] = 'The requested mobile application corresponding to the identifier (' + 'Android package name or iOS bundle ID) provided is not installed on ' + 'this device.', _a[\"captcha-check-failed\" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */] = 'The reCAPTCHA response token provided is either invalid, expired, ' + 'already used or the domain associated with it does not match the list ' + 'of whitelisted domains.', _a[\"code-expired\" /* AuthErrorCode.CODE_EXPIRED */] = 'The SMS code has expired. Please re-send the verification code to try ' + 'again.', _a[\"cordova-not-ready\" /* AuthErrorCode.CORDOVA_NOT_READY */] = 'Cordova framework is not ready.', _a[\"cors-unsupported\" /* AuthErrorCode.CORS_UNSUPPORTED */] = 'This browser is not supported.', _a[\"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */] = 'This credential is already associated with a different user account.', _a[\"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */] = 'The custom token corresponds to a different audience.', _a[\"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */] = 'This operation is sensitive and requires recent authentication. Log in ' + 'again before retrying this request.', _a[\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */] = 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.', _a[\"dynamic-link-not-activated\" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */] = 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' + 'conditions.', _a[\"email-change-needs-verification\" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */] = 'Multi-factor users must always have a verified email.', _a[\"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */] = 'The email address is already in use by another account.', _a[\"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */] = 'Auth instance has already been used to make a network call. Auth can ' + 'no longer be configured to use the emulator. Try calling ' + '\"connectAuthEmulator()\" sooner.', _a[\"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */] = 'The action code has expired.', _a[\"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */] = 'This operation has been cancelled due to another conflicting popup being opened.', _a[\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */] = 'An internal AuthError has occurred.', _a[\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */] = 'The phone verification request contains an invalid application verifier.' + ' The reCAPTCHA token response is either invalid or expired.', _a[\"invalid-app-id\" /* AuthErrorCode.INVALID_APP_ID */] = 'The mobile app identifier is not registed for the current project.', _a[\"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */] = \"This user's credential isn't valid for this project. This can happen \" + \"if the user's token has been tampered with, or if the user isn't for \" + 'the project associated with this API key.', _a[\"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */] = 'An internal AuthError has occurred.', _a[\"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */] = 'The SMS verification code used to create the phone auth credential is ' + 'invalid. Please resend the verification code sms and be sure to use the ' + 'verification code provided by the user.', _a[\"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */] = 'The continue URL provided in the request is invalid.', _a[\"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */] = 'The following Cordova plugins must be installed to enable OAuth sign-in: ' + 'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' + 'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' + 'cordova-plugin-customurlscheme.', _a[\"invalid-custom-token\" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */] = 'The custom token format is incorrect. Please check the documentation.', _a[\"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */] = 'The provided dynamic link domain is not configured or authorized for the current project.', _a[\"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */] = 'The email address is badly formatted.', _a[\"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */] = 'Emulator URL must start with a valid scheme (http:// or https://).', _a[\"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */] = 'Your API key is invalid, please check you have copied it correctly.', _a[\"invalid-cert-hash\" /* AuthErrorCode.INVALID_CERT_HASH */] = 'The SHA-1 certificate hash provided is invalid.', _a[\"invalid-credential\" /* AuthErrorCode.INVALID_IDP_RESPONSE */] = 'The supplied auth credential is malformed or has expired.', _a[\"invalid-message-payload\" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */] = 'The email template corresponding to this action contains invalid characters in its message. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.', _a[\"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */] = 'The request does not contain a valid proof of first factor successful sign-in.', _a[\"invalid-oauth-provider\" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */] = 'EmailAuthProvider is not supported for this operation. This operation ' + 'only supports OAuth providers.', _a[\"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */] = 'The OAuth client ID provided is either invalid or does not match the ' + 'specified API key.', _a[\"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */] = 'This domain is not authorized for OAuth operations for your Firebase ' + 'project. Edit the list of authorized domains from the Firebase console.', _a[\"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */] = 'The action code is invalid. This can happen if the code is malformed, ' + 'expired, or has already been used.', _a[\"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */] = 'The password is invalid or the user does not have a password.', _a[\"invalid-persistence-type\" /* AuthErrorCode.INVALID_PERSISTENCE */] = 'The specified persistence type is invalid. It can only be local, session or none.', _a[\"invalid-phone-number\" /* AuthErrorCode.INVALID_PHONE_NUMBER */] = 'The format of the phone number provided is incorrect. Please enter the ' + 'phone number in a format that can be parsed into E.164 format. E.164 ' + 'phone numbers are written in the format [+][country code][subscriber ' + 'number including area code].', _a[\"invalid-provider-id\" /* AuthErrorCode.INVALID_PROVIDER_ID */] = 'The specified provider ID is invalid.', _a[\"invalid-recipient-email\" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */] = 'The email corresponding to this action failed to send as the provided ' + 'recipient email address is invalid.', _a[\"invalid-sender\" /* AuthErrorCode.INVALID_SENDER */] = 'The email template corresponding to this action contains an invalid sender email or name. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.', _a[\"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */] = 'The verification ID used to create the phone auth credential is invalid.', _a[\"invalid-tenant-id\" /* AuthErrorCode.INVALID_TENANT_ID */] = \"The Auth instance's tenant ID is invalid.\", _a[\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */] = 'Login blocked by user-provided method: {$originalMessage}', _a[\"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */] = 'An Android Package Name must be provided if the Android App is required to be installed.', _a[\"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */] = 'Be sure to include authDomain when calling firebase.initializeApp(), ' + 'by following the instructions in the Firebase console.', _a[\"missing-app-credential\" /* AuthErrorCode.MISSING_APP_CREDENTIAL */] = 'The phone verification request is missing an application verifier ' + 'assertion. A reCAPTCHA response token needs to be provided.', _a[\"missing-verification-code\" /* AuthErrorCode.MISSING_CODE */] = 'The phone auth credential was created with an empty SMS verification code.', _a[\"missing-continue-uri\" /* AuthErrorCode.MISSING_CONTINUE_URI */] = 'A continue URL must be provided in the request.', _a[\"missing-iframe-start\" /* AuthErrorCode.MISSING_IFRAME_START */] = 'An internal AuthError has occurred.', _a[\"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */] = 'An iOS Bundle ID must be provided if an App Store ID is provided.', _a[\"missing-or-invalid-nonce\" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */] = 'The request does not contain a valid nonce. This can occur if the ' + 'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' + 'in the ID token payload.', _a[\"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */] = 'No second factor identifier is provided.', _a[\"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */] = 'The request is missing proof of first factor successful sign-in.', _a[\"missing-phone-number\" /* AuthErrorCode.MISSING_PHONE_NUMBER */] = 'To send verification codes, provide a phone number for the recipient.', _a[\"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */] = 'The phone auth credential was created with an empty verification ID.', _a[\"app-deleted\" /* AuthErrorCode.MODULE_DESTROYED */] = 'This instance of FirebaseApp has been deleted.', _a[\"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */] = 'The user does not have a second factor matching the identifier provided.', _a[\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */] = 'Proof of ownership of a second factor is required to complete sign-in.', _a[\"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */] = 'An account already exists with the same email address but different ' + 'sign-in credentials. Sign in using a provider associated with this ' + 'email address.', _a[\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */] = 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.', _a[\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */] = 'An internal AuthError has occurred.', _a[\"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */] = 'User was not linked to an account with the given provider.', _a[\"null-user\" /* AuthErrorCode.NULL_USER */] = 'A null user object was provided as the argument for an operation which ' + 'requires a non-null user object.', _a[\"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */] = 'The given sign-in provider is disabled for this Firebase project. ' + 'Enable it in the Firebase console, under the sign-in method tab of the ' + 'Auth section.', _a[\"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */] = 'This operation is not supported in the environment this application is ' + 'running on. \"location.protocol\" must be http, https or chrome-extension' + ' and web storage must be enabled.', _a[\"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */] = 'Unable to establish a connection with the popup. It may have been blocked by the browser.', _a[\"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */] = 'The popup has been closed by the user before finalizing the operation.', _a[\"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */] = 'User can only be linked to one identity for the given provider.', _a[\"quota-exceeded\" /* AuthErrorCode.QUOTA_EXCEEDED */] = \"The project's quota for this operation has been exceeded.\", _a[\"redirect-cancelled-by-user\" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */] = 'The redirect operation has been cancelled by the user before finalizing.', _a[\"redirect-operation-pending\" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */] = 'A redirect sign-in operation is already pending.', _a[\"rejected-credential\" /* AuthErrorCode.REJECTED_CREDENTIAL */] = 'The request contains malformed or mismatching credentials.', _a[\"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */] = 'The second factor is already enrolled on this account.', _a[\"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */] = 'The maximum allowed number of second factors on a user has been exceeded.', _a[\"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */] = \"The provided tenant ID does not match the Auth instance's tenant ID\", _a[\"timeout\" /* AuthErrorCode.TIMEOUT */] = 'The operation has timed out.', _a[\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */] = \"The user's credential is no longer valid. The user must sign in again.\", _a[\"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */] = 'We have blocked all requests from this device due to unusual activity. ' + 'Try again later.', _a[\"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */] = 'The domain of the continue URL is not whitelisted.  Please whitelist ' + 'the domain in the Firebase console.', _a[\"unsupported-first-factor\" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */] = 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.', _a[\"unsupported-persistence-type\" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */] = 'The current environment does not support the specified persistence type.', _a[\"unsupported-tenant-operation\" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */] = 'This operation is not supported in a multi-tenant context.', _a[\"unverified-email\" /* AuthErrorCode.UNVERIFIED_EMAIL */] = 'The operation requires a verified email.', _a[\"user-cancelled\" /* AuthErrorCode.USER_CANCELLED */] = 'The user did not grant your application the permissions it requested.', _a[\"user-not-found\" /* AuthErrorCode.USER_DELETED */] = 'There is no user record corresponding to this identifier. The user may ' + 'have been deleted.', _a[\"user-disabled\" /* AuthErrorCode.USER_DISABLED */] = 'The user account has been disabled by an administrator.', _a[\"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */] = 'The supplied credentials do not correspond to the previously signed in user.', _a[\"user-signed-out\" /* AuthErrorCode.USER_SIGNED_OUT */] = '', _a[\"weak-password\" /* AuthErrorCode.WEAK_PASSWORD */] = 'The password must be 6 characters long or more.', _a[\"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */] = 'This browser is not supported or 3rd party cookies and data may be disabled.', _a[\"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */] = 'initializeAuth() has already been called with ' + 'different options. To avoid this error, call initializeAuth() with the ' + 'same options as when it was originally called, or call getAuth() to return the' + ' already initialized instance.', _a;\n}\nfunction _prodErrorMap() {\n  var _a;\n  // We will include this one message in the prod error map since by the very\n  // nature of this error, developers will never be able to see the message\n  // using the debugErrorMap (which is installed during auth initialization).\n  return _a = {}, _a[\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */] = 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.', _a;\n}\n/**\r\n * A verbose error map with detailed descriptions for most error codes.\r\n *\r\n * See discussion at {@link AuthErrorMap}\r\n *\r\n * @public\r\n */\nvar debugErrorMap = _debugErrorMap;\n/**\r\n * A minimal error map with all verbose error messages stripped.\r\n *\r\n * See discussion at {@link AuthErrorMap}\r\n *\r\n * @public\r\n */\nvar prodErrorMap = _prodErrorMap;\nvar _DEFAULT_AUTH_ERROR_FACTORY = new util.ErrorFactory('auth', 'Firebase', _prodErrorMap());\n/**\r\n * A map of potential `Auth` error codes, for easier comparison with errors\r\n * thrown by the SDK.\r\n *\r\n * @remarks\r\n * Note that you can't tree-shake individual keys\r\n * in the map, so by using the map you might substantially increase your\r\n * bundle size.\r\n *\r\n * @public\r\n */\nvar AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n  ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n  ARGUMENT_ERROR: 'auth/argument-error',\n  APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n  APP_NOT_INSTALLED: 'auth/app-not-installed',\n  CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n  CODE_EXPIRED: 'auth/code-expired',\n  CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n  CORS_UNSUPPORTED: 'auth/cors-unsupported',\n  CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n  CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n  DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n  DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n  EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n  EMAIL_EXISTS: 'auth/email-already-in-use',\n  EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n  EXPIRED_OOB_CODE: 'auth/expired-action-code',\n  EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n  INTERNAL_ERROR: 'auth/internal-error',\n  INVALID_API_KEY: 'auth/invalid-api-key',\n  INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n  INVALID_APP_ID: 'auth/invalid-app-id',\n  INVALID_AUTH: 'auth/invalid-user-token',\n  INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n  INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n  INVALID_CODE: 'auth/invalid-verification-code',\n  INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n  INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n  INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n  INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n  INVALID_EMAIL: 'auth/invalid-email',\n  INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n  INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n  INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n  INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n  INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n  INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n  INVALID_OOB_CODE: 'auth/invalid-action-code',\n  INVALID_ORIGIN: 'auth/unauthorized-domain',\n  INVALID_PASSWORD: 'auth/wrong-password',\n  INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n  INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n  INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n  INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n  INVALID_SENDER: 'auth/invalid-sender',\n  INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n  INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n  MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n  MFA_REQUIRED: 'auth/multi-factor-auth-required',\n  MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n  MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n  MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n  MISSING_CODE: 'auth/missing-verification-code',\n  MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n  MISSING_IFRAME_START: 'auth/missing-iframe-start',\n  MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n  MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n  MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n  MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n  MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n  MISSING_SESSION_INFO: 'auth/missing-verification-id',\n  MODULE_DESTROYED: 'auth/app-deleted',\n  NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n  NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n  NULL_USER: 'auth/null-user',\n  NO_AUTH_EVENT: 'auth/no-auth-event',\n  NO_SUCH_PROVIDER: 'auth/no-such-provider',\n  OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n  OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n  POPUP_BLOCKED: 'auth/popup-blocked',\n  POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n  PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n  QUOTA_EXCEEDED: 'auth/quota-exceeded',\n  REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n  REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n  REJECTED_CREDENTIAL: 'auth/rejected-credential',\n  SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n  SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n  TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n  TIMEOUT: 'auth/timeout',\n  TOKEN_EXPIRED: 'auth/user-token-expired',\n  TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n  UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n  UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n  UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n  UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n  UNVERIFIED_EMAIL: 'auth/unverified-email',\n  USER_CANCELLED: 'auth/user-cancelled',\n  USER_DELETED: 'auth/user-not-found',\n  USER_DISABLED: 'auth/user-disabled',\n  USER_MISMATCH: 'auth/user-mismatch',\n  USER_SIGNED_OUT: 'auth/user-signed-out',\n  WEAK_PASSWORD: 'auth/weak-password',\n  WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n  ALREADY_INITIALIZED: 'auth/already-initialized'\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar logClient = new logger.Logger('@firebase/auth');\nfunction _logError(msg) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  if (logClient.logLevel <= logger.LogLevel.ERROR) {\n    logClient.error.apply(logClient, tslib.__spreadArray([\"Auth (\".concat(app.SDK_VERSION, \"): \").concat(msg)], args, false));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _fail(authOrCode) {\n  var rest = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    rest[_i - 1] = arguments[_i];\n  }\n  throw createErrorInternal.apply(void 0, tslib.__spreadArray([authOrCode], rest, false));\n}\nfunction _createError(authOrCode) {\n  var rest = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    rest[_i - 1] = arguments[_i];\n  }\n  return createErrorInternal.apply(void 0, tslib.__spreadArray([authOrCode], rest, false));\n}\nfunction _errorWithCustomMessage(auth, code, message) {\n  var _a;\n  var errorMap = tslib.__assign(tslib.__assign({}, prodErrorMap()), (_a = {}, _a[code] = message, _a));\n  var factory = new util.ErrorFactory('auth', 'Firebase', errorMap);\n  return factory.create(code, {\n    appName: auth.name\n  });\n}\nfunction _assertInstanceOf(auth, object, instance) {\n  var constructorInstance = instance;\n  if (!(object instanceof constructorInstance)) {\n    if (constructorInstance.name !== object.constructor.name) {\n      _fail(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    }\n\n    throw _errorWithCustomMessage(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, \"Type of \".concat(object.constructor.name, \" does not match expected instance.\") + \"Did you pass a reference from a different Auth SDK?\");\n  }\n}\nfunction createErrorInternal(authOrCode) {\n  var _a;\n  var rest = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    rest[_i - 1] = arguments[_i];\n  }\n  if (typeof authOrCode !== 'string') {\n    var code = rest[0];\n    var fullParams = tslib.__spreadArray([], rest.slice(1), true);\n    if (fullParams[0]) {\n      fullParams[0].appName = authOrCode.name;\n    }\n    return (_a = authOrCode._errorFactory).create.apply(_a, tslib.__spreadArray([code], fullParams, false));\n  }\n  return _DEFAULT_AUTH_ERROR_FACTORY.create.apply(_DEFAULT_AUTH_ERROR_FACTORY, tslib.__spreadArray([authOrCode], rest, false));\n}\nfunction _assert(assertion, authOrCode) {\n  var rest = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    rest[_i - 2] = arguments[_i];\n  }\n  if (!assertion) {\n    throw createErrorInternal.apply(void 0, tslib.__spreadArray([authOrCode], rest, false));\n  }\n}\n/**\r\n * Unconditionally fails, throwing an internal error with the given message.\r\n *\r\n * @param failure type of failure encountered\r\n * @throws Error\r\n */\nfunction debugFail(failure) {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  var message = \"INTERNAL ASSERTION FAILED: \" + failure;\n  _logError(message);\n  // NOTE: We don't use FirebaseError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n/**\r\n * Fails if the given assertion condition is false, throwing an Error with the\r\n * given message if it did.\r\n *\r\n * @param assertion\r\n * @param message\r\n */\nfunction debugAssert(assertion, message) {\n  if (!assertion) {\n    debugFail(message);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar instanceCache = new Map();\nfunction _getInstance(cls) {\n  debugAssert(cls instanceof Function, 'Expected a class definition');\n  var instance = instanceCache.get(cls);\n  if (instance) {\n    debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');\n    return instance;\n  }\n  instance = new cls();\n  instanceCache.set(cls, instance);\n  return instance;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Initializes an {@link Auth} instance with fine-grained control over\r\n * {@link Dependencies}.\r\n *\r\n * @remarks\r\n *\r\n * This function allows more control over the {@link Auth} instance than\r\n * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\r\n * the {@link Dependencies}. In general, `getAuth` is the easiest way to\r\n * initialize Auth and works for most use cases. Use `initializeAuth` if you\r\n * need control over which persistence layer is used, or to minimize bundle\r\n * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\r\n *\r\n * For example, if your app only uses anonymous accounts and you only want\r\n * accounts saved for the current session, initialize `Auth` with:\r\n *\r\n * ```js\r\n * const auth = initializeAuth(app, {\r\n *   persistence: browserSessionPersistence,\r\n *   popupRedirectResolver: undefined,\r\n * });\r\n * ```\r\n *\r\n * @public\r\n */\nfunction initializeAuth(app$1, deps) {\n  var provider = app._getProvider(app$1, 'auth');\n  if (provider.isInitialized()) {\n    var auth_1 = provider.getImmediate();\n    var initialOptions = provider.getOptions();\n    if (util.deepEqual(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {\n      return auth_1;\n    } else {\n      _fail(auth_1, \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */);\n    }\n  }\n\n  var auth = provider.initialize({\n    options: deps\n  });\n  return auth;\n}\nfunction _initializeAuthInstance(auth, deps) {\n  var persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];\n  var hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\n  if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {\n    auth._updateErrorMap(deps.errorMap);\n  }\n  // This promise is intended to float; auth initialization happens in the\n  // background, meanwhile the auth object may be used by the app.\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _getCurrentUrl() {\n  var _a;\n  return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || '';\n}\nfunction _isHttpOrHttps() {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\nfunction _getCurrentScheme() {\n  var _a;\n  return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Determine whether the browser is working online\r\n */\nfunction _isOnline() {\n  if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && (\n  // Apply only for traditional web apps and Chrome extensions.\n  // This is especially true for Cordova apps which have unreliable\n  // navigator.onLine behavior unless cordova-plugin-network-information is\n  // installed which overwrites the native navigator.onLine value and\n  // defines navigator.connection.\n  _isHttpOrHttps() || util.isBrowserExtension() || 'connection' in navigator)) {\n    return navigator.onLine;\n  }\n  // If we can't determine the state, assume it is online.\n  return true;\n}\nfunction _getUserLanguage() {\n  if (typeof navigator === 'undefined') {\n    return null;\n  }\n  var navigatorLanguage = navigator;\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    navigatorLanguage.languages && navigatorLanguage.languages[0] ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language ||\n    // Couldn't determine language.\n    null\n  );\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A structure to help pick between a range of long and short delay durations\r\n * depending on the current environment. In general, the long delay is used for\r\n * mobile environments whereas short delays are used for desktop environments.\r\n */\nvar Delay = /** @class */function () {\n  function Delay(shortDelay, longDelay) {\n    this.shortDelay = shortDelay;\n    this.longDelay = longDelay;\n    // Internal error when improperly initialized.\n    debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');\n    this.isMobile = util.isMobileCordova() || util.isReactNative();\n  }\n  Delay.prototype.get = function () {\n    if (!_isOnline()) {\n      // Pick the shorter timeout.\n      return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);\n    }\n    // If running in a mobile environment, return the long delay, otherwise\n    // return the short delay.\n    // This could be improved in the future to dynamically change based on other\n    // variables instead of just reading the current environment.\n    return this.isMobile ? this.longDelay : this.shortDelay;\n  };\n  return Delay;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _emulatorUrl(config, path) {\n  debugAssert(config.emulator, 'Emulator should always be set here');\n  var url = config.emulator.url;\n  if (!path) {\n    return url;\n  }\n  return \"\".concat(url).concat(path.startsWith('/') ? path.slice(1) : path);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar FetchProvider = /** @class */function () {\n  function FetchProvider() {}\n  FetchProvider.initialize = function (fetchImpl, headersImpl, responseImpl) {\n    this.fetchImpl = fetchImpl;\n    if (headersImpl) {\n      this.headersImpl = headersImpl;\n    }\n    if (responseImpl) {\n      this.responseImpl = responseImpl;\n    }\n  };\n  FetchProvider.fetch = function () {\n    if (this.fetchImpl) {\n      return this.fetchImpl;\n    }\n    if (typeof self !== 'undefined' && 'fetch' in self) {\n      return self.fetch;\n    }\n    debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n  };\n  FetchProvider.headers = function () {\n    if (this.headersImpl) {\n      return this.headersImpl;\n    }\n    if (typeof self !== 'undefined' && 'Headers' in self) {\n      return self.Headers;\n    }\n    debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n  };\n  FetchProvider.response = function () {\n    if (this.responseImpl) {\n      return this.responseImpl;\n    }\n    if (typeof self !== 'undefined' && 'Response' in self) {\n      return self.Response;\n    }\n    debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n  };\n  return FetchProvider;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a$1;\n/**\r\n * Map from errors returned by the server to errors to developer visible errors\r\n */\nvar SERVER_ERROR_MAP = (_a$1 = {},\n// Custom token errors.\n_a$1[\"CREDENTIAL_MISMATCH\" /* ServerError.CREDENTIAL_MISMATCH */] = \"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */,\n// This can only happen if the SDK sends a bad request.\n_a$1[\"MISSING_CUSTOM_TOKEN\" /* ServerError.MISSING_CUSTOM_TOKEN */] = \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n// Create Auth URI errors.\n_a$1[\"INVALID_IDENTIFIER\" /* ServerError.INVALID_IDENTIFIER */] = \"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */,\n// This can only happen if the SDK sends a bad request.\n_a$1[\"MISSING_CONTINUE_URI\" /* ServerError.MISSING_CONTINUE_URI */] = \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n// Sign in with email and password errors (some apply to sign up too).\n_a$1[\"INVALID_PASSWORD\" /* ServerError.INVALID_PASSWORD */] = \"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */,\n// This can only happen if the SDK sends a bad request.\n_a$1[\"MISSING_PASSWORD\" /* ServerError.MISSING_PASSWORD */] = \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n// Sign up with email and password errors.\n_a$1[\"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */] = \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, _a$1[\"PASSWORD_LOGIN_DISABLED\" /* ServerError.PASSWORD_LOGIN_DISABLED */] = \"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,\n// Verify assertion for sign in with credential errors:\n_a$1[\"INVALID_IDP_RESPONSE\" /* ServerError.INVALID_IDP_RESPONSE */] = \"invalid-credential\" /* AuthErrorCode.INVALID_IDP_RESPONSE */, _a$1[\"INVALID_PENDING_TOKEN\" /* ServerError.INVALID_PENDING_TOKEN */] = \"invalid-credential\" /* AuthErrorCode.INVALID_IDP_RESPONSE */, _a$1[\"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */] = \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,\n// This can only happen if the SDK sends a bad request.\n_a$1[\"MISSING_REQ_TYPE\" /* ServerError.MISSING_REQ_TYPE */] = \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n// Send Password reset email errors:\n_a$1[\"EMAIL_NOT_FOUND\" /* ServerError.EMAIL_NOT_FOUND */] = \"user-not-found\" /* AuthErrorCode.USER_DELETED */, _a$1[\"RESET_PASSWORD_EXCEED_LIMIT\" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */] = \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */, _a$1[\"EXPIRED_OOB_CODE\" /* ServerError.EXPIRED_OOB_CODE */] = \"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */, _a$1[\"INVALID_OOB_CODE\" /* ServerError.INVALID_OOB_CODE */] = \"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */,\n// This can only happen if the SDK sends a bad request.\n_a$1[\"MISSING_OOB_CODE\" /* ServerError.MISSING_OOB_CODE */] = \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n// Operations that require ID token in request:\n_a$1[\"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */] = \"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */, _a$1[\"INVALID_ID_TOKEN\" /* ServerError.INVALID_ID_TOKEN */] = \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */, _a$1[\"TOKEN_EXPIRED\" /* ServerError.TOKEN_EXPIRED */] = \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */, _a$1[\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */] = \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n// Other errors.\n_a$1[\"TOO_MANY_ATTEMPTS_TRY_LATER\" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */] = \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n// Phone Auth related errors.\n_a$1[\"INVALID_CODE\" /* ServerError.INVALID_CODE */] = \"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */, _a$1[\"INVALID_SESSION_INFO\" /* ServerError.INVALID_SESSION_INFO */] = \"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */, _a$1[\"INVALID_TEMPORARY_PROOF\" /* ServerError.INVALID_TEMPORARY_PROOF */] = \"invalid-credential\" /* AuthErrorCode.INVALID_IDP_RESPONSE */, _a$1[\"MISSING_SESSION_INFO\" /* ServerError.MISSING_SESSION_INFO */] = \"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */, _a$1[\"SESSION_EXPIRED\" /* ServerError.SESSION_EXPIRED */] = \"code-expired\" /* AuthErrorCode.CODE_EXPIRED */,\n// Other action code errors when additional settings passed.\n// MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n// This is OK as this error will be caught by client side validation.\n_a$1[\"MISSING_ANDROID_PACKAGE_NAME\" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */] = \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */, _a$1[\"UNAUTHORIZED_DOMAIN\" /* ServerError.UNAUTHORIZED_DOMAIN */] = \"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,\n// getProjectConfig errors when clientId is passed.\n_a$1[\"INVALID_OAUTH_CLIENT_ID\" /* ServerError.INVALID_OAUTH_CLIENT_ID */] = \"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,\n// User actions (sign-up or deletion) disabled errors.\n_a$1[\"ADMIN_ONLY_OPERATION\" /* ServerError.ADMIN_ONLY_OPERATION */] = \"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,\n// Multi factor related errors.\n_a$1[\"INVALID_MFA_PENDING_CREDENTIAL\" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */] = \"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */, _a$1[\"MFA_ENROLLMENT_NOT_FOUND\" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */] = \"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */, _a$1[\"MISSING_MFA_ENROLLMENT_ID\" /* ServerError.MISSING_MFA_ENROLLMENT_ID */] = \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */, _a$1[\"MISSING_MFA_PENDING_CREDENTIAL\" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */] = \"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */, _a$1[\"SECOND_FACTOR_EXISTS\" /* ServerError.SECOND_FACTOR_EXISTS */] = \"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */, _a$1[\"SECOND_FACTOR_LIMIT_EXCEEDED\" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */] = \"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,\n// Blocking functions related errors.\n_a$1[\"BLOCKING_FUNCTION_ERROR_RESPONSE\" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */] = \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, _a$1);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);\nfunction _addTidIfNecessary(auth, request) {\n  if (auth.tenantId && !request.tenantId) {\n    return tslib.__assign(tslib.__assign({}, request), {\n      tenantId: auth.tenantId\n    });\n  }\n  return request;\n}\nfunction _performApiRequest(auth, method, path, request, customErrorMap) {\n  if (customErrorMap === void 0) {\n    customErrorMap = {};\n  }\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var _this = this;\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performFetchWithErrorHandling(auth, customErrorMap, function () {\n        return tslib.__awaiter(_this, void 0, void 0, function () {\n          var body, params, query, headers;\n          return tslib.__generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                body = {};\n                params = {};\n                if (request) {\n                  if (method === \"GET\" /* HttpMethod.GET */) {\n                    params = request;\n                  } else {\n                    body = {\n                      body: JSON.stringify(request)\n                    };\n                  }\n                }\n                query = util.querystring(tslib.__assign({\n                  key: auth.config.apiKey\n                }, params)).slice(1);\n                return [4 /*yield*/, auth._getAdditionalHeaders()];\n              case 1:\n                headers = _a.sent();\n                headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/json';\n                if (auth.languageCode) {\n                  headers[\"X-Firebase-Locale\" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;\n                }\n                return [2 /*return*/, FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), tslib.__assign({\n                  method: method,\n                  headers: headers,\n                  referrerPolicy: 'no-referrer'\n                }, body))];\n            }\n          });\n        });\n      })];\n    });\n  });\n}\nfunction _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var errorMap, networkTimeout, response, json, errorMessage, _a, serverErrorCode, serverErrorMessage, authError, e_1;\n    return tslib.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          auth._canInitEmulator = false;\n          errorMap = tslib.__assign(tslib.__assign({}, SERVER_ERROR_MAP), customErrorMap);\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1, 4,, 5]);\n          networkTimeout = new NetworkTimeout(auth);\n          return [4 /*yield*/, Promise.race([fetchFn(), networkTimeout.promise])];\n        case 2:\n          response = _b.sent();\n          // If we've reached this point, the fetch succeeded and the networkTimeout\n          // didn't throw; clear the network timeout delay so that Node won't hang\n          networkTimeout.clearNetworkTimeout();\n          return [4 /*yield*/, response.json()];\n        case 3:\n          json = _b.sent();\n          if ('needConfirmation' in json) {\n            throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, json);\n          }\n          if (response.ok && !('errorMessage' in json)) {\n            return [2 /*return*/, json];\n          } else {\n            errorMessage = response.ok ? json.errorMessage : json.error.message;\n            _a = errorMessage.split(' : '), serverErrorCode = _a[0], serverErrorMessage = _a[1];\n            if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {\n              throw _makeTaggedError(auth, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);\n            } else if (serverErrorCode === \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */) {\n              throw _makeTaggedError(auth, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, json);\n            } else if (serverErrorCode === \"USER_DISABLED\" /* ServerError.USER_DISABLED */) {\n              throw _makeTaggedError(auth, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */, json);\n            }\n            authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\\s]+/g, '-');\n            if (serverErrorMessage) {\n              throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n            } else {\n              _fail(auth, authError);\n            }\n          }\n          return [3 /*break*/, 5];\n        case 4:\n          e_1 = _b.sent();\n          if (e_1 instanceof util.FirebaseError) {\n            throw e_1;\n          }\n          _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n            'message': String(e_1)\n          });\n          return [3 /*break*/, 5];\n        case 5:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nfunction _performSignInRequest(auth, method, path, request, customErrorMap) {\n  if (customErrorMap === void 0) {\n    customErrorMap = {};\n  }\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var serverResponse;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, _performApiRequest(auth, method, path, request, customErrorMap)];\n        case 1:\n          serverResponse = _a.sent();\n          if ('mfaPendingCredential' in serverResponse) {\n            _fail(auth, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */, {\n              _serverResponse: serverResponse\n            });\n          }\n          return [2 /*return*/, serverResponse];\n      }\n    });\n  });\n}\nfunction _getFinalTarget(auth, host, path, query) {\n  var base = \"\".concat(host).concat(path, \"?\").concat(query);\n  if (!auth.config.emulator) {\n    return \"\".concat(auth.config.apiScheme, \"://\").concat(base);\n  }\n  return _emulatorUrl(auth.config, base);\n}\nvar NetworkTimeout = /** @class */function () {\n  function NetworkTimeout(auth) {\n    var _this = this;\n    this.auth = auth;\n    // Node timers and browser timers are fundamentally incompatible, but we\n    // don't care about the value here\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.timer = null;\n    this.promise = new Promise(function (_, reject) {\n      _this.timer = setTimeout(function () {\n        return reject(_createError(_this.auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n      }, DEFAULT_API_TIMEOUT_MS.get());\n    });\n  }\n  NetworkTimeout.prototype.clearNetworkTimeout = function () {\n    clearTimeout(this.timer);\n  };\n  return NetworkTimeout;\n}();\nfunction _makeTaggedError(auth, code, response) {\n  var errorParams = {\n    appName: auth.name\n  };\n  if (response.email) {\n    errorParams.email = response.email;\n  }\n  if (response.phoneNumber) {\n    errorParams.phoneNumber = response.phoneNumber;\n  }\n  var error = _createError(auth, code, errorParams);\n  // We know customData is defined on error because errorParams is defined\n  error.customData._tokenResponse = response;\n  return error;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction deleteAccount(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:delete\" /* Endpoint.DELETE_ACCOUNT */, request)];\n    });\n  });\n}\nfunction deleteLinkedAccounts(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request)];\n    });\n  });\n}\nfunction getAccountInfo(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:lookup\" /* Endpoint.GET_ACCOUNT_INFO */, request)];\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction utcTimestampToDateString(utcTimestamp) {\n  if (!utcTimestamp) {\n    return undefined;\n  }\n  try {\n    // Convert to date object.\n    var date = new Date(Number(utcTimestamp));\n    // Test date is valid.\n    if (!isNaN(date.getTime())) {\n      // Convert to UTC date string.\n      return date.toUTCString();\n    }\n  } catch (e) {\n    // Do nothing. undefined will be returned.\n  }\n  return undefined;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\r\n *\r\n * @remarks\r\n * Returns the current token if it has not expired or if it will not expire in the next five\r\n * minutes. Otherwise, this will refresh the token and return a new one.\r\n *\r\n * @param user - The user.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\nfunction getIdToken(user, forceRefresh) {\n  if (forceRefresh === void 0) {\n    forceRefresh = false;\n  }\n  return util.getModularInstance(user).getIdToken(forceRefresh);\n}\n/**\r\n * Returns a deserialized JSON Web Token (JWT) used to identitfy the user to a Firebase service.\r\n *\r\n * @remarks\r\n * Returns the current token if it has not expired or if it will not expire in the next five\r\n * minutes. Otherwise, this will refresh the token and return a new one.\r\n *\r\n * @param user - The user.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\nfunction getIdTokenResult(user, forceRefresh) {\n  if (forceRefresh === void 0) {\n    forceRefresh = false;\n  }\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var userInternal, token, claims, firebase, signInProvider;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          userInternal = util.getModularInstance(user);\n          return [4 /*yield*/, userInternal.getIdToken(forceRefresh)];\n        case 1:\n          token = _a.sent();\n          claims = _parseToken(token);\n          _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;\n          signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];\n          return [2 /*return*/, {\n            claims: claims,\n            token: token,\n            authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\n            issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\n            expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\n            signInProvider: signInProvider || null,\n            signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null\n          }];\n      }\n    });\n  });\n}\nfunction secondsStringToMilliseconds(seconds) {\n  return Number(seconds) * 1000;\n}\nfunction _parseToken(token) {\n  var _a = token.split('.'),\n    algorithm = _a[0],\n    payload = _a[1],\n    signature = _a[2];\n  if (algorithm === undefined || payload === undefined || signature === undefined) {\n    _logError('JWT malformed, contained fewer than 3 sections');\n    return null;\n  }\n  try {\n    var decoded = util.base64Decode(payload);\n    if (!decoded) {\n      _logError('Failed to decode base64 JWT payload');\n      return null;\n    }\n    return JSON.parse(decoded);\n  } catch (e) {\n    _logError('Caught error parsing JWT payload as JSON', e === null || e === void 0 ? void 0 : e.toString());\n    return null;\n  }\n}\n/**\r\n * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\r\n */\nfunction _tokenExpiresIn(token) {\n  var parsedToken = _parseToken(token);\n  _assert(parsedToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  _assert(typeof parsedToken.exp !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  _assert(typeof parsedToken.iat !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  return Number(parsedToken.exp) - Number(parsedToken.iat);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _logoutIfInvalidated(user, promise, bypassAuthState) {\n  if (bypassAuthState === void 0) {\n    bypassAuthState = false;\n  }\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var e_1;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (bypassAuthState) {\n            return [2 /*return*/, promise];\n          }\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 3,, 6]);\n          return [4 /*yield*/, promise];\n        case 2:\n          return [2 /*return*/, _a.sent()];\n        case 3:\n          e_1 = _a.sent();\n          if (!(e_1 instanceof util.FirebaseError && isUserInvalidated(e_1))) return [3 /*break*/, 5];\n          if (!(user.auth.currentUser === user)) return [3 /*break*/, 5];\n          return [4 /*yield*/, user.auth.signOut()];\n        case 4:\n          _a.sent();\n          _a.label = 5;\n        case 5:\n          throw e_1;\n        case 6:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nfunction isUserInvalidated(_a) {\n  var code = _a.code;\n  return code === \"auth/\".concat(\"user-disabled\" /* AuthErrorCode.USER_DISABLED */) || code === \"auth/\".concat(\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ProactiveRefresh = /** @class */function () {\n  function ProactiveRefresh(user) {\n    this.user = user;\n    this.isRunning = false;\n    // Node timers and browser timers return fundamentally different types.\n    // We don't actually care what the value is but TS won't accept unknown and\n    // we can't cast properly in both environments.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.timerId = null;\n    this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n  }\n\n  ProactiveRefresh.prototype._start = function () {\n    if (this.isRunning) {\n      return;\n    }\n    this.isRunning = true;\n    this.schedule();\n  };\n  ProactiveRefresh.prototype._stop = function () {\n    if (!this.isRunning) {\n      return;\n    }\n    this.isRunning = false;\n    if (this.timerId !== null) {\n      clearTimeout(this.timerId);\n    }\n  };\n  ProactiveRefresh.prototype.getInterval = function (wasError) {\n    var _a;\n    if (wasError) {\n      var interval = this.errorBackoff;\n      this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);\n      return interval;\n    } else {\n      // Reset the error backoff\n      this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n      var expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;\n      var interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;\n      return Math.max(0, interval);\n    }\n  };\n  ProactiveRefresh.prototype.schedule = function (wasError) {\n    var _this = this;\n    if (wasError === void 0) {\n      wasError = false;\n    }\n    if (!this.isRunning) {\n      // Just in case...\n      return;\n    }\n    var interval = this.getInterval(wasError);\n    this.timerId = setTimeout(function () {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        return tslib.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.iteration()];\n            case 1:\n              _a.sent();\n              return [2 /*return*/];\n          }\n        });\n      });\n    }, interval);\n  };\n  ProactiveRefresh.prototype.iteration = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var e_1;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.user.getIdToken(true)];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            e_1 = _a.sent();\n            // Only retry on network errors\n            if ((e_1 === null || e_1 === void 0 ? void 0 : e_1.code) === \"auth/\".concat(\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */)) {\n              this.schedule( /* wasError */true);\n            }\n            return [2 /*return*/];\n          case 3:\n            this.schedule();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return ProactiveRefresh;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar UserMetadata = /** @class */function () {\n  function UserMetadata(createdAt, lastLoginAt) {\n    this.createdAt = createdAt;\n    this.lastLoginAt = lastLoginAt;\n    this._initializeTime();\n  }\n  UserMetadata.prototype._initializeTime = function () {\n    this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n    this.creationTime = utcTimestampToDateString(this.createdAt);\n  };\n  UserMetadata.prototype._copy = function (metadata) {\n    this.createdAt = metadata.createdAt;\n    this.lastLoginAt = metadata.lastLoginAt;\n    this._initializeTime();\n  };\n  UserMetadata.prototype.toJSON = function () {\n    return {\n      createdAt: this.createdAt,\n      lastLoginAt: this.lastLoginAt\n    };\n  };\n  return UserMetadata;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _reloadWithoutSaving(user) {\n  var _a;\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var auth, idToken, response, coreAccount, newProviderData, providerData, oldIsAnonymous, newIsAnonymous, isAnonymous, updates;\n    return tslib.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          auth = user.auth;\n          return [4 /*yield*/, user.getIdToken()];\n        case 1:\n          idToken = _b.sent();\n          return [4 /*yield*/, _logoutIfInvalidated(user, getAccountInfo(auth, {\n            idToken: idToken\n          }))];\n        case 2:\n          response = _b.sent();\n          _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          coreAccount = response.users[0];\n          user._notifyReloadListener(coreAccount);\n          newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo) : [];\n          providerData = mergeProviderData(user.providerData, newProviderData);\n          oldIsAnonymous = user.isAnonymous;\n          newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);\n          isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n          updates = {\n            uid: coreAccount.localId,\n            displayName: coreAccount.displayName || null,\n            photoURL: coreAccount.photoUrl || null,\n            email: coreAccount.email || null,\n            emailVerified: coreAccount.emailVerified || false,\n            phoneNumber: coreAccount.phoneNumber || null,\n            tenantId: coreAccount.tenantId || null,\n            providerData: providerData,\n            metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n            isAnonymous: isAnonymous\n          };\n          Object.assign(user, updates);\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Reloads user account data, if signed in.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\nfunction reload(user) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var userInternal;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          userInternal = util.getModularInstance(user);\n          return [4 /*yield*/, _reloadWithoutSaving(userInternal)];\n        case 1:\n          _a.sent();\n          // Even though the current user hasn't changed, update\n          // current user will trigger a persistence update w/ the\n          // new info.\n          return [4 /*yield*/, userInternal.auth._persistUserIfCurrent(userInternal)];\n        case 2:\n          // Even though the current user hasn't changed, update\n          // current user will trigger a persistence update w/ the\n          // new info.\n          _a.sent();\n          userInternal.auth._notifyListenersIfCurrent(userInternal);\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nfunction mergeProviderData(original, newData) {\n  var deduped = original.filter(function (o) {\n    return !newData.some(function (n) {\n      return n.providerId === o.providerId;\n    });\n  });\n  return tslib.__spreadArray(tslib.__spreadArray([], deduped, true), newData, true);\n}\nfunction extractProviderData(providers) {\n  return providers.map(function (_a) {\n    var providerId = _a.providerId,\n      provider = tslib.__rest(_a, [\"providerId\"]);\n    return {\n      providerId: providerId,\n      uid: provider.rawId || '',\n      displayName: provider.displayName || null,\n      email: provider.email || null,\n      phoneNumber: provider.phoneNumber || null,\n      photoURL: provider.photoUrl || null\n    };\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction requestStsToken(auth, refreshToken) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var response;\n    var _this = this;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, _performFetchWithErrorHandling(auth, {}, function () {\n            return tslib.__awaiter(_this, void 0, void 0, function () {\n              var body, _a, tokenApiHost, apiKey, url, headers;\n              return tslib.__generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    body = util.querystring({\n                      'grant_type': 'refresh_token',\n                      'refresh_token': refreshToken\n                    }).slice(1);\n                    _a = auth.config, tokenApiHost = _a.tokenApiHost, apiKey = _a.apiKey;\n                    url = _getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* Endpoint.TOKEN */, \"key=\".concat(apiKey));\n                    return [4 /*yield*/, auth._getAdditionalHeaders()];\n                  case 1:\n                    headers = _b.sent();\n                    headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';\n                    return [2 /*return*/, FetchProvider.fetch()(url, {\n                      method: \"POST\" /* HttpMethod.POST */,\n                      headers: headers,\n                      body: body\n                    })];\n                }\n              });\n            });\n          })];\n        case 1:\n          response = _a.sent();\n          // The response comes back in snake_case. Convert to camel:\n          return [2 /*return*/, {\n            accessToken: response.access_token,\n            expiresIn: response.expires_in,\n            refreshToken: response.refresh_token\n          }];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\r\n * it references AuthInternal which has a circular dependency with UserInternal.\r\n *\r\n * @internal\r\n */\nvar StsTokenManager = /** @class */function () {\n  function StsTokenManager() {\n    this.refreshToken = null;\n    this.accessToken = null;\n    this.expirationTime = null;\n  }\n  Object.defineProperty(StsTokenManager.prototype, \"isExpired\", {\n    get: function get() {\n      return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */;\n    },\n\n    enumerable: false,\n    configurable: true\n  });\n  StsTokenManager.prototype.updateFromServerResponse = function (response) {\n    _assert(response.idToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof response.idToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof response.refreshToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    var expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);\n    this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\n  };\n  StsTokenManager.prototype.getToken = function (auth, forceRefresh) {\n    if (forceRefresh === void 0) {\n      forceRefresh = false;\n    }\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _assert(!this.accessToken || this.refreshToken, auth, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\n            if (!forceRefresh && this.accessToken && !this.isExpired) {\n              return [2 /*return*/, this.accessToken];\n            }\n            if (!this.refreshToken) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.refresh(auth, this.refreshToken)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, this.accessToken];\n          case 2:\n            return [2 /*return*/, null];\n        }\n      });\n    });\n  };\n  StsTokenManager.prototype.clearRefreshToken = function () {\n    this.refreshToken = null;\n  };\n  StsTokenManager.prototype.refresh = function (auth, oldToken) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var _a, accessToken, refreshToken, expiresIn;\n      return tslib.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, requestStsToken(auth, oldToken)];\n          case 1:\n            _a = _b.sent(), accessToken = _a.accessToken, refreshToken = _a.refreshToken, expiresIn = _a.expiresIn;\n            this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  StsTokenManager.prototype.updateTokensAndExpiration = function (accessToken, refreshToken, expiresInSec) {\n    this.refreshToken = refreshToken || null;\n    this.accessToken = accessToken || null;\n    this.expirationTime = Date.now() + expiresInSec * 1000;\n  };\n  StsTokenManager.fromJSON = function (appName, object) {\n    var refreshToken = object.refreshToken,\n      accessToken = object.accessToken,\n      expirationTime = object.expirationTime;\n    var manager = new StsTokenManager();\n    if (refreshToken) {\n      _assert(typeof refreshToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n        appName: appName\n      });\n      manager.refreshToken = refreshToken;\n    }\n    if (accessToken) {\n      _assert(typeof accessToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n        appName: appName\n      });\n      manager.accessToken = accessToken;\n    }\n    if (expirationTime) {\n      _assert(typeof expirationTime === 'number', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n        appName: appName\n      });\n      manager.expirationTime = expirationTime;\n    }\n    return manager;\n  };\n  StsTokenManager.prototype.toJSON = function () {\n    return {\n      refreshToken: this.refreshToken,\n      accessToken: this.accessToken,\n      expirationTime: this.expirationTime\n    };\n  };\n  StsTokenManager.prototype._assign = function (stsTokenManager) {\n    this.accessToken = stsTokenManager.accessToken;\n    this.refreshToken = stsTokenManager.refreshToken;\n    this.expirationTime = stsTokenManager.expirationTime;\n  };\n  StsTokenManager.prototype._clone = function () {\n    return Object.assign(new StsTokenManager(), this.toJSON());\n  };\n  StsTokenManager.prototype._performRefresh = function () {\n    return debugFail('not implemented');\n  };\n  return StsTokenManager;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction assertStringOrUndefined(assertion, appName) {\n  _assert(typeof assertion === 'string' || typeof assertion === 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n    appName: appName\n  });\n}\nvar UserImpl = /** @class */function () {\n  function UserImpl(_a) {\n    var uid = _a.uid,\n      auth = _a.auth,\n      stsTokenManager = _a.stsTokenManager,\n      opt = tslib.__rest(_a, [\"uid\", \"auth\", \"stsTokenManager\"]);\n    // For the user object, provider is always Firebase.\n    this.providerId = \"firebase\" /* ProviderId.FIREBASE */;\n    this.proactiveRefresh = new ProactiveRefresh(this);\n    this.reloadUserInfo = null;\n    this.reloadListener = null;\n    this.uid = uid;\n    this.auth = auth;\n    this.stsTokenManager = stsTokenManager;\n    this.accessToken = stsTokenManager.accessToken;\n    this.displayName = opt.displayName || null;\n    this.email = opt.email || null;\n    this.emailVerified = opt.emailVerified || false;\n    this.phoneNumber = opt.phoneNumber || null;\n    this.photoURL = opt.photoURL || null;\n    this.isAnonymous = opt.isAnonymous || false;\n    this.tenantId = opt.tenantId || null;\n    this.providerData = opt.providerData ? tslib.__spreadArray([], opt.providerData, true) : [];\n    this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);\n  }\n  UserImpl.prototype.getIdToken = function (forceRefresh) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var accessToken;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh))];\n          case 1:\n            accessToken = _a.sent();\n            _assert(accessToken, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            if (!(this.accessToken !== accessToken)) return [3 /*break*/, 3];\n            this.accessToken = accessToken;\n            return [4 /*yield*/, this.auth._persistUserIfCurrent(this)];\n          case 2:\n            _a.sent();\n            this.auth._notifyListenersIfCurrent(this);\n            _a.label = 3;\n          case 3:\n            return [2 /*return*/, accessToken];\n        }\n      });\n    });\n  };\n  UserImpl.prototype.getIdTokenResult = function (forceRefresh) {\n    return getIdTokenResult(this, forceRefresh);\n  };\n  UserImpl.prototype.reload = function () {\n    return reload(this);\n  };\n  UserImpl.prototype._assign = function (user) {\n    if (this === user) {\n      return;\n    }\n    _assert(this.uid === user.uid, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    this.displayName = user.displayName;\n    this.photoURL = user.photoURL;\n    this.email = user.email;\n    this.emailVerified = user.emailVerified;\n    this.phoneNumber = user.phoneNumber;\n    this.isAnonymous = user.isAnonymous;\n    this.tenantId = user.tenantId;\n    this.providerData = user.providerData.map(function (userInfo) {\n      return tslib.__assign({}, userInfo);\n    });\n    this.metadata._copy(user.metadata);\n    this.stsTokenManager._assign(user.stsTokenManager);\n  };\n  UserImpl.prototype._clone = function (auth) {\n    var newUser = new UserImpl(tslib.__assign(tslib.__assign({}, this), {\n      auth: auth,\n      stsTokenManager: this.stsTokenManager._clone()\n    }));\n    newUser.metadata._copy(this.metadata);\n    return newUser;\n  };\n  UserImpl.prototype._onReload = function (callback) {\n    // There should only ever be one listener, and that is a single instance of MultiFactorUser\n    _assert(!this.reloadListener, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    this.reloadListener = callback;\n    if (this.reloadUserInfo) {\n      this._notifyReloadListener(this.reloadUserInfo);\n      this.reloadUserInfo = null;\n    }\n  };\n  UserImpl.prototype._notifyReloadListener = function (userInfo) {\n    if (this.reloadListener) {\n      this.reloadListener(userInfo);\n    } else {\n      // If no listener is subscribed yet, save the result so it's available when they do subscribe\n      this.reloadUserInfo = userInfo;\n    }\n  };\n  UserImpl.prototype._startProactiveRefresh = function () {\n    this.proactiveRefresh._start();\n  };\n  UserImpl.prototype._stopProactiveRefresh = function () {\n    this.proactiveRefresh._stop();\n  };\n  UserImpl.prototype._updateTokensIfNecessary = function (response, reload) {\n    if (reload === void 0) {\n      reload = false;\n    }\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var tokensRefreshed;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            tokensRefreshed = false;\n            if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {\n              this.stsTokenManager.updateFromServerResponse(response);\n              tokensRefreshed = true;\n            }\n            if (!reload) return [3 /*break*/, 2];\n            return [4 /*yield*/, _reloadWithoutSaving(this)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            return [4 /*yield*/, this.auth._persistUserIfCurrent(this)];\n          case 3:\n            _a.sent();\n            if (tokensRefreshed) {\n              this.auth._notifyListenersIfCurrent(this);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  UserImpl.prototype.delete = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var idToken;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getIdToken()];\n          case 1:\n            idToken = _a.sent();\n            return [4 /*yield*/, _logoutIfInvalidated(this, deleteAccount(this.auth, {\n              idToken: idToken\n            }))];\n          case 2:\n            _a.sent();\n            this.stsTokenManager.clearRefreshToken();\n            // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n            //       cancels pending actions...\n            return [2 /*return*/, this.auth.signOut()];\n        }\n      });\n    });\n  };\n  UserImpl.prototype.toJSON = function () {\n    return tslib.__assign(tslib.__assign({\n      uid: this.uid,\n      email: this.email || undefined,\n      emailVerified: this.emailVerified,\n      displayName: this.displayName || undefined,\n      isAnonymous: this.isAnonymous,\n      photoURL: this.photoURL || undefined,\n      phoneNumber: this.phoneNumber || undefined,\n      tenantId: this.tenantId || undefined,\n      providerData: this.providerData.map(function (userInfo) {\n        return tslib.__assign({}, userInfo);\n      }),\n      stsTokenManager: this.stsTokenManager.toJSON(),\n      // Redirect event ID must be maintained in case there is a pending\n      // redirect event.\n      _redirectEventId: this._redirectEventId\n    }, this.metadata.toJSON()), {\n      // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n      apiKey: this.auth.config.apiKey,\n      appName: this.auth.name\n    });\n  };\n  Object.defineProperty(UserImpl.prototype, \"refreshToken\", {\n    get: function get() {\n      return this.stsTokenManager.refreshToken || '';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  UserImpl._fromJSON = function (auth, object) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    var displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;\n    var email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;\n    var phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;\n    var photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;\n    var tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;\n    var _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;\n    var createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;\n    var lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;\n    var uid = object.uid,\n      emailVerified = object.emailVerified,\n      isAnonymous = object.isAnonymous,\n      providerData = object.providerData,\n      plainObjectTokenManager = object.stsTokenManager;\n    _assert(uid && plainObjectTokenManager, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    var stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\n    _assert(typeof uid === 'string', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    assertStringOrUndefined(displayName, auth.name);\n    assertStringOrUndefined(email, auth.name);\n    _assert(typeof emailVerified === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof isAnonymous === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    assertStringOrUndefined(phoneNumber, auth.name);\n    assertStringOrUndefined(photoURL, auth.name);\n    assertStringOrUndefined(tenantId, auth.name);\n    assertStringOrUndefined(_redirectEventId, auth.name);\n    assertStringOrUndefined(createdAt, auth.name);\n    assertStringOrUndefined(lastLoginAt, auth.name);\n    var user = new UserImpl({\n      uid: uid,\n      auth: auth,\n      email: email,\n      emailVerified: emailVerified,\n      displayName: displayName,\n      isAnonymous: isAnonymous,\n      photoURL: photoURL,\n      phoneNumber: phoneNumber,\n      tenantId: tenantId,\n      stsTokenManager: stsTokenManager,\n      createdAt: createdAt,\n      lastLoginAt: lastLoginAt\n    });\n    if (providerData && Array.isArray(providerData)) {\n      user.providerData = providerData.map(function (userInfo) {\n        return tslib.__assign({}, userInfo);\n      });\n    }\n    if (_redirectEventId) {\n      user._redirectEventId = _redirectEventId;\n    }\n    return user;\n  };\n  /**\r\n   * Initialize a User from an idToken server response\r\n   * @param auth\r\n   * @param idTokenResponse\r\n   */\n  UserImpl._fromIdTokenResponse = function (auth, idTokenResponse, isAnonymous) {\n    if (isAnonymous === void 0) {\n      isAnonymous = false;\n    }\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var stsTokenManager, user;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            stsTokenManager = new StsTokenManager();\n            stsTokenManager.updateFromServerResponse(idTokenResponse);\n            user = new UserImpl({\n              uid: idTokenResponse.localId,\n              auth: auth,\n              stsTokenManager: stsTokenManager,\n              isAnonymous: isAnonymous\n            });\n            // Updates the user info and data and resolves with a user instance.\n            return [4 /*yield*/, _reloadWithoutSaving(user)];\n          case 1:\n            // Updates the user info and data and resolves with a user instance.\n            _a.sent();\n            return [2 /*return*/, user];\n        }\n      });\n    });\n  };\n  return UserImpl;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar InMemoryPersistence = /** @class */function () {\n  function InMemoryPersistence() {\n    this.type = \"NONE\" /* PersistenceType.NONE */;\n    this.storage = {};\n  }\n  InMemoryPersistence.prototype._isAvailable = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        return [2 /*return*/, true];\n      });\n    });\n  };\n  InMemoryPersistence.prototype._set = function (key, value) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        this.storage[key] = value;\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  InMemoryPersistence.prototype._get = function (key) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var value;\n      return tslib.__generator(this, function (_a) {\n        value = this.storage[key];\n        return [2 /*return*/, value === undefined ? null : value];\n      });\n    });\n  };\n  InMemoryPersistence.prototype._remove = function (key) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        delete this.storage[key];\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  InMemoryPersistence.prototype._addListener = function (_key, _listener) {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  };\n  InMemoryPersistence.prototype._removeListener = function (_key, _listener) {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  };\n  InMemoryPersistence.type = 'NONE';\n  return InMemoryPersistence;\n}();\n/**\r\n * An implementation of {@link Persistence} of type 'NONE'.\r\n *\r\n * @public\r\n */\nvar inMemoryPersistence = InMemoryPersistence;\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _persistenceKeyName(key, apiKey, appName) {\n  return \"\".concat(\"firebase\" /* Namespace.PERSISTENCE */, \":\").concat(key, \":\").concat(apiKey, \":\").concat(appName);\n}\nvar PersistenceUserManager = /** @class */function () {\n  function PersistenceUserManager(persistence, auth, userKey) {\n    this.persistence = persistence;\n    this.auth = auth;\n    this.userKey = userKey;\n    var _a = this.auth,\n      config = _a.config,\n      name = _a.name;\n    this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n    this.fullPersistenceKey = _persistenceKeyName(\"persistence\" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);\n    this.boundEventHandler = auth._onStorageEvent.bind(auth);\n    this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n  }\n  PersistenceUserManager.prototype.setCurrentUser = function (user) {\n    return this.persistence._set(this.fullUserKey, user.toJSON());\n  };\n  PersistenceUserManager.prototype.getCurrentUser = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var blob;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.persistence._get(this.fullUserKey)];\n          case 1:\n            blob = _a.sent();\n            return [2 /*return*/, blob ? UserImpl._fromJSON(this.auth, blob) : null];\n        }\n      });\n    });\n  };\n  PersistenceUserManager.prototype.removeCurrentUser = function () {\n    return this.persistence._remove(this.fullUserKey);\n  };\n  PersistenceUserManager.prototype.savePersistenceForRedirect = function () {\n    return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\n  };\n  PersistenceUserManager.prototype.setPersistence = function (newPersistence) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var currentUser;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.persistence === newPersistence) {\n              return [2 /*return*/];\n            }\n\n            return [4 /*yield*/, this.getCurrentUser()];\n          case 1:\n            currentUser = _a.sent();\n            return [4 /*yield*/, this.removeCurrentUser()];\n          case 2:\n            _a.sent();\n            this.persistence = newPersistence;\n            if (currentUser) {\n              return [2 /*return*/, this.setCurrentUser(currentUser)];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  PersistenceUserManager.prototype.delete = function () {\n    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n  };\n  PersistenceUserManager.create = function (auth, persistenceHierarchy, userKey) {\n    if (userKey === void 0) {\n      userKey = \"authUser\" /* KeyName.AUTH_USER */;\n    }\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var availablePersistences, selectedPersistence, key, userToMigrate, _i, persistenceHierarchy_1, persistence, blob, user, migrationHierarchy;\n      var _this = this;\n      return tslib.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!persistenceHierarchy.length) {\n              return [2 /*return*/, new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey)];\n            }\n            return [4 /*yield*/, Promise.all(persistenceHierarchy.map(function (persistence) {\n              return tslib.__awaiter(_this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4 /*yield*/, persistence._isAvailable()];\n                    case 1:\n                      if (_a.sent()) {\n                        return [2 /*return*/, persistence];\n                      }\n                      return [2 /*return*/, undefined];\n                  }\n                });\n              });\n            }))];\n          case 1:\n            availablePersistences = _b.sent().filter(function (persistence) {\n              return persistence;\n            });\n            selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);\n            key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n            userToMigrate = null;\n            _i = 0, persistenceHierarchy_1 = persistenceHierarchy;\n            _b.label = 2;\n          case 2:\n            if (!(_i < persistenceHierarchy_1.length)) return [3 /*break*/, 7];\n            persistence = persistenceHierarchy_1[_i];\n            _b.label = 3;\n          case 3:\n            _b.trys.push([3, 5,, 6]);\n            return [4 /*yield*/, persistence._get(key)];\n          case 4:\n            blob = _b.sent();\n            if (blob) {\n              user = UserImpl._fromJSON(auth, blob);\n              if (persistence !== selectedPersistence) {\n                userToMigrate = user;\n              }\n              selectedPersistence = persistence;\n              return [3 /*break*/, 7];\n            }\n            return [3 /*break*/, 6];\n          case 5:\n            _b.sent();\n            return [3 /*break*/, 6];\n          case 6:\n            _i++;\n            return [3 /*break*/, 2];\n          case 7:\n            migrationHierarchy = availablePersistences.filter(function (p) {\n              return p._shouldAllowMigration;\n            });\n            // If the persistence does _not_ allow migration, just finish off here\n            if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {\n              return [2 /*return*/, new PersistenceUserManager(selectedPersistence, auth, userKey)];\n            }\n            selectedPersistence = migrationHierarchy[0];\n            if (!userToMigrate) return [3 /*break*/, 9];\n            // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n            // we'll just let it bubble to surface the error.\n            return [4 /*yield*/, selectedPersistence._set(key, userToMigrate.toJSON())];\n          case 8:\n            // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n            // we'll just let it bubble to surface the error.\n            _b.sent();\n            _b.label = 9;\n          case 9:\n            // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n            // such as users getting stuck with a previous account after signing out and refreshing the tab.\n            return [4 /*yield*/, Promise.all(persistenceHierarchy.map(function (persistence) {\n              return tslib.__awaiter(_this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      if (!(persistence !== selectedPersistence)) return [3 /*break*/, 4];\n                      _b.label = 1;\n                    case 1:\n                      _b.trys.push([1, 3,, 4]);\n                      return [4 /*yield*/, persistence._remove(key)];\n                    case 2:\n                      _b.sent();\n                      return [3 /*break*/, 4];\n                    case 3:\n                      _b.sent();\n                      return [3 /*break*/, 4];\n                    case 4:\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }))];\n\n          case 10:\n            // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n            // such as users getting stuck with a previous account after signing out and refreshing the tab.\n            _b.sent();\n            return [2 /*return*/, new PersistenceUserManager(selectedPersistence, auth, userKey)];\n        }\n      });\n    });\n  };\n  return PersistenceUserManager;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Determine the browser for the purposes of reporting usage to the API\r\n */\nfunction _getBrowserName(userAgent) {\n  var ua = userAgent.toLowerCase();\n  if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n    return \"Opera\" /* BrowserName.OPERA */;\n  } else if (_isIEMobile(ua)) {\n    // Windows phone IEMobile browser.\n    return \"IEMobile\" /* BrowserName.IEMOBILE */;\n  } else if (ua.includes('msie') || ua.includes('trident/')) {\n    return \"IE\" /* BrowserName.IE */;\n  } else if (ua.includes('edge/')) {\n    return \"Edge\" /* BrowserName.EDGE */;\n  } else if (_isFirefox(ua)) {\n    return \"Firefox\" /* BrowserName.FIREFOX */;\n  } else if (ua.includes('silk/')) {\n    return \"Silk\" /* BrowserName.SILK */;\n  } else if (_isBlackBerry(ua)) {\n    // Blackberry browser.\n    return \"Blackberry\" /* BrowserName.BLACKBERRY */;\n  } else if (_isWebOS(ua)) {\n    // WebOS default browser.\n    return \"Webos\" /* BrowserName.WEBOS */;\n  } else if (_isSafari(ua)) {\n    return \"Safari\" /* BrowserName.SAFARI */;\n  } else if ((ua.includes('chrome/') || _isChromeIOS(ua)) && !ua.includes('edge/')) {\n    return \"Chrome\" /* BrowserName.CHROME */;\n  } else if (_isAndroid(ua)) {\n    // Android stock browser.\n    return \"Android\" /* BrowserName.ANDROID */;\n  } else {\n    // Most modern browsers have name/version at end of user agent string.\n    var re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n    var matches = userAgent.match(re);\n    if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {\n      return matches[1];\n    }\n  }\n  return \"Other\" /* BrowserName.OTHER */;\n}\n\nfunction _isFirefox(ua) {\n  if (ua === void 0) {\n    ua = util.getUA();\n  }\n  return /firefox\\//i.test(ua);\n}\nfunction _isSafari(userAgent) {\n  if (userAgent === void 0) {\n    userAgent = util.getUA();\n  }\n  var ua = userAgent.toLowerCase();\n  return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');\n}\nfunction _isChromeIOS(ua) {\n  if (ua === void 0) {\n    ua = util.getUA();\n  }\n  return /crios\\//i.test(ua);\n}\nfunction _isIEMobile(ua) {\n  if (ua === void 0) {\n    ua = util.getUA();\n  }\n  return /iemobile/i.test(ua);\n}\nfunction _isAndroid(ua) {\n  if (ua === void 0) {\n    ua = util.getUA();\n  }\n  return /android/i.test(ua);\n}\nfunction _isBlackBerry(ua) {\n  if (ua === void 0) {\n    ua = util.getUA();\n  }\n  return /blackberry/i.test(ua);\n}\nfunction _isWebOS(ua) {\n  if (ua === void 0) {\n    ua = util.getUA();\n  }\n  return /webos/i.test(ua);\n}\nfunction _isIOS(ua) {\n  if (ua === void 0) {\n    ua = util.getUA();\n  }\n  return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);\n}\nfunction _isIOS7Or8(ua) {\n  if (ua === void 0) {\n    ua = util.getUA();\n  }\n  return /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua);\n}\nfunction _isIOSStandalone(ua) {\n  var _a;\n  if (ua === void 0) {\n    ua = util.getUA();\n  }\n  return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);\n}\nfunction _isIE10() {\n  return util.isIE() && document.documentMode === 10;\n}\nfunction _isMobileBrowser(ua) {\n  if (ua === void 0) {\n    ua = util.getUA();\n  }\n  // TODO: implement getBrowserName equivalent for OS.\n  return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);\n}\nfunction _isIframe() {\n  try {\n    // Check that the current window is not the top window.\n    // If so, return true.\n    return !!(window && window !== window.top);\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/*\r\n * Determine the SDK version string\r\n */\nfunction _getClientVersion(clientPlatform, frameworks) {\n  if (frameworks === void 0) {\n    frameworks = [];\n  }\n  var reportedPlatform;\n  switch (clientPlatform) {\n    case \"Browser\" /* ClientPlatform.BROWSER */:\n      // In a browser environment, report the browser name.\n      reportedPlatform = _getBrowserName(util.getUA());\n      break;\n    case \"Worker\" /* ClientPlatform.WORKER */:\n      // Technically a worker runs from a browser but we need to differentiate a\n      // worker from a browser.\n      // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n      reportedPlatform = \"\".concat(_getBrowserName(util.getUA()), \"-\").concat(clientPlatform);\n      break;\n    default:\n      reportedPlatform = clientPlatform;\n  }\n  var reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web'; /* default value if no other framework is used */\n  return \"\".concat(reportedPlatform, \"/\").concat(\"JsCore\" /* ClientImplementation.CORE */, \"/\").concat(app.SDK_VERSION, \"/\").concat(reportedFrameworks);\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar AuthMiddlewareQueue = /** @class */function () {\n  function AuthMiddlewareQueue(auth) {\n    this.auth = auth;\n    this.queue = [];\n  }\n  AuthMiddlewareQueue.prototype.pushCallback = function (callback, onAbort) {\n    var _this = this;\n    // The callback could be sync or async. Wrap it into a\n    // function that is always async.\n    var wrappedCallback = function wrappedCallback(user) {\n      return new Promise(function (resolve, reject) {\n        try {\n          var result = callback(user);\n          // Either resolve with existing promise or wrap a non-promise\n          // return value into a promise.\n          resolve(result);\n        } catch (e) {\n          // Sync callback throws.\n          reject(e);\n        }\n      });\n    };\n    // Attach the onAbort if present\n    wrappedCallback.onAbort = onAbort;\n    this.queue.push(wrappedCallback);\n    var index = this.queue.length - 1;\n    return function () {\n      // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n      // indexing of other elements.\n      _this.queue[index] = function () {\n        return Promise.resolve();\n      };\n    };\n  };\n  AuthMiddlewareQueue.prototype.runMiddleware = function (nextUser) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var onAbortStack, _i, _a, beforeStateCallback, e_1, _b, onAbortStack_1, onAbort;\n      return tslib.__generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (this.auth.currentUser === nextUser) {\n              return [2 /*return*/];\n            }\n\n            onAbortStack = [];\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 6,, 7]);\n            _i = 0, _a = this.queue;\n            _c.label = 2;\n          case 2:\n            if (!(_i < _a.length)) return [3 /*break*/, 5];\n            beforeStateCallback = _a[_i];\n            return [4 /*yield*/, beforeStateCallback(nextUser)];\n          case 3:\n            _c.sent();\n            // Only push the onAbort if the callback succeeds\n            if (beforeStateCallback.onAbort) {\n              onAbortStack.push(beforeStateCallback.onAbort);\n            }\n            _c.label = 4;\n          case 4:\n            _i++;\n            return [3 /*break*/, 2];\n          case 5:\n            return [3 /*break*/, 7];\n          case 6:\n            e_1 = _c.sent();\n            // Run all onAbort, with separate try/catch to ignore any errors and\n            // continue\n            onAbortStack.reverse();\n            for (_b = 0, onAbortStack_1 = onAbortStack; _b < onAbortStack_1.length; _b++) {\n              onAbort = onAbortStack_1[_b];\n              try {\n                onAbort();\n              } catch (_) {\n                /* swallow error */\n              }\n            }\n            throw this.auth._errorFactory.create(\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */, {\n              originalMessage: e_1 === null || e_1 === void 0 ? void 0 : e_1.message\n            });\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return AuthMiddlewareQueue;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar AuthImpl = /** @class */function () {\n  function AuthImpl(app, heartbeatServiceProvider, config) {\n    this.app = app;\n    this.heartbeatServiceProvider = heartbeatServiceProvider;\n    this.config = config;\n    this.currentUser = null;\n    this.emulatorConfig = null;\n    this.operations = Promise.resolve();\n    this.authStateSubscription = new Subscription(this);\n    this.idTokenSubscription = new Subscription(this);\n    this.beforeStateQueue = new AuthMiddlewareQueue(this);\n    this.redirectUser = null;\n    this.isProactiveRefreshEnabled = false;\n    // Any network calls will set this to true and prevent subsequent emulator\n    // initialization\n    this._canInitEmulator = true;\n    this._isInitialized = false;\n    this._deleted = false;\n    this._initializationPromise = null;\n    this._popupRedirectResolver = null;\n    this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\n    // Tracks the last notified UID for state change listeners to prevent\n    // repeated calls to the callbacks. Undefined means it's never been\n    // called, whereas null means it's been called with a signed out user\n    this.lastNotifiedUid = undefined;\n    this.languageCode = null;\n    this.tenantId = null;\n    this.settings = {\n      appVerificationDisabledForTesting: false\n    };\n    this.frameworks = [];\n    this.name = app.name;\n    this.clientVersion = config.sdkClientVersion;\n  }\n  AuthImpl.prototype._initializeWithPersistence = function (persistenceHierarchy, popupRedirectResolver) {\n    var _this = this;\n    if (popupRedirectResolver) {\n      this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n    }\n    // Have to check for app deletion throughout initialization (after each\n    // promise resolution)\n    this._initializationPromise = this.queue(function () {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        var _a;\n        var _b, _c;\n        return tslib.__generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              if (this._deleted) {\n                return [2 /*return*/];\n              }\n\n              _a = this;\n              return [4 /*yield*/, PersistenceUserManager.create(this, persistenceHierarchy)];\n            case 1:\n              _a.persistenceManager = _d.sent();\n              if (this._deleted) {\n                return [2 /*return*/];\n              }\n\n              if (!((_b = this._popupRedirectResolver) === null || _b === void 0 ? void 0 : _b._shouldInitProactively)) return [3 /*break*/, 5];\n              _d.label = 2;\n            case 2:\n              _d.trys.push([2, 4,, 5]);\n              return [4 /*yield*/, this._popupRedirectResolver._initialize(this)];\n            case 3:\n              _d.sent();\n              return [3 /*break*/, 5];\n            case 4:\n              _d.sent();\n              return [3 /*break*/, 5];\n            case 5:\n              return [4 /*yield*/, this.initializeCurrentUser(popupRedirectResolver)];\n            case 6:\n              _d.sent();\n              this.lastNotifiedUid = ((_c = this.currentUser) === null || _c === void 0 ? void 0 : _c.uid) || null;\n              if (this._deleted) {\n                return [2 /*return*/];\n              }\n\n              this._isInitialized = true;\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n\n    return this._initializationPromise;\n  };\n  /**\r\n   * If the persistence is changed in another window, the user manager will let us know\r\n   */\n  AuthImpl.prototype._onStorageEvent = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var user;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._deleted) {\n              return [2 /*return*/];\n            }\n\n            return [4 /*yield*/, this.assertedPersistence.getCurrentUser()];\n          case 1:\n            user = _a.sent();\n            if (!this.currentUser && !user) {\n              // No change, do nothing (was signed out and remained signed out).\n              return [2 /*return*/];\n            }\n\n            if (!(this.currentUser && user && this.currentUser.uid === user.uid)) return [3 /*break*/, 3];\n            // Data update, simply copy data changes.\n            this._currentUser._assign(user);\n            // If tokens changed from previous user tokens, this will trigger\n            // notifyAuthListeners_.\n            return [4 /*yield*/, this.currentUser.getIdToken()];\n          case 2:\n            // If tokens changed from previous user tokens, this will trigger\n            // notifyAuthListeners_.\n            _a.sent();\n            return [2 /*return*/];\n          case 3:\n            // Update current Auth state. Either a new login or logout.\n            // Skip blocking callbacks, they should not apply to a change in another tab.\n            return [4 /*yield*/, this._updateCurrentUser(user, /* skipBeforeStateCallbacks */true)];\n          case 4:\n            // Update current Auth state. Either a new login or logout.\n            // Skip blocking callbacks, they should not apply to a change in another tab.\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AuthImpl.prototype.initializeCurrentUser = function (popupRedirectResolver) {\n    var _a;\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var previouslyStoredUser, futureCurrentUser, needsTocheckMiddleware, redirectUserEventId, storedUserEventId, result, e_2;\n      return tslib.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.assertedPersistence.getCurrentUser()];\n          case 1:\n            previouslyStoredUser = _b.sent();\n            futureCurrentUser = previouslyStoredUser;\n            needsTocheckMiddleware = false;\n            if (!(popupRedirectResolver && this.config.authDomain)) return [3 /*break*/, 4];\n            return [4 /*yield*/, this.getOrInitRedirectPersistenceManager()];\n          case 2:\n            _b.sent();\n            redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;\n            storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;\n            return [4 /*yield*/, this.tryRedirectSignIn(popupRedirectResolver)];\n          case 3:\n            result = _b.sent();\n            // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n            // matches the redirect user, then we want to initially sign in with the\n            // new user object from result.\n            // TODO(samgho): More thoroughly test all of this\n            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {\n              futureCurrentUser = result.user;\n              needsTocheckMiddleware = true;\n            }\n            _b.label = 4;\n          case 4:\n            // If no user in persistence, there is no current user. Set to null.\n            if (!futureCurrentUser) {\n              return [2 /*return*/, this.directlySetCurrentUser(null)];\n            }\n            if (!!futureCurrentUser._redirectEventId) return [3 /*break*/, 9];\n            if (!needsTocheckMiddleware) return [3 /*break*/, 8];\n            _b.label = 5;\n          case 5:\n            _b.trys.push([5, 7,, 8]);\n            return [4 /*yield*/, this.beforeStateQueue.runMiddleware(futureCurrentUser)];\n          case 6:\n            _b.sent();\n            return [3 /*break*/, 8];\n          case 7:\n            e_2 = _b.sent();\n            futureCurrentUser = previouslyStoredUser;\n            // We know this is available since the bit is only set when the\n            // resolver is available\n            this._popupRedirectResolver._overrideRedirectResult(this, function () {\n              return Promise.reject(e_2);\n            });\n            return [3 /*break*/, 8];\n          case 8:\n            if (futureCurrentUser) {\n              return [2 /*return*/, this.reloadAndSetCurrentUserOrClear(futureCurrentUser)];\n            } else {\n              return [2 /*return*/, this.directlySetCurrentUser(null)];\n            }\n          case 9:\n            _assert(this._popupRedirectResolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n            return [4 /*yield*/, this.getOrInitRedirectPersistenceManager()];\n          case 10:\n            _b.sent();\n            // If the redirect user's event ID matches the current user's event ID,\n            // DO NOT reload the current user, otherwise they'll be cleared from storage.\n            // This is important for the reauthenticateWithRedirect() flow.\n            if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {\n              return [2 /*return*/, this.directlySetCurrentUser(futureCurrentUser)];\n            }\n            return [2 /*return*/, this.reloadAndSetCurrentUserOrClear(futureCurrentUser)];\n        }\n      });\n    });\n  };\n  AuthImpl.prototype.tryRedirectSignIn = function (redirectResolver) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            result = null;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 5]);\n            return [4 /*yield*/, this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true)];\n          case 2:\n            // We know this._popupRedirectResolver is set since redirectResolver\n            // is passed in. The _completeRedirectFn expects the unwrapped extern.\n            result = _a.sent();\n            return [3 /*break*/, 5];\n          case 3:\n            _a.sent();\n            // Swallow any errors here; the code can retrieve them in\n            // getRedirectResult().\n            return [4 /*yield*/, this._setRedirectUser(null)];\n          case 4:\n            // Swallow any errors here; the code can retrieve them in\n            // getRedirectResult().\n            _a.sent();\n            return [3 /*break*/, 5];\n          case 5:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AuthImpl.prototype.reloadAndSetCurrentUserOrClear = function (user) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var e_4;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, _reloadWithoutSaving(user)];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            e_4 = _a.sent();\n            if ((e_4 === null || e_4 === void 0 ? void 0 : e_4.code) !== \"auth/\".concat(\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */)) {\n              // Something's wrong with the user's token. Log them out and remove\n              // them from storage\n              return [2 /*return*/, this.directlySetCurrentUser(null)];\n            }\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/, this.directlySetCurrentUser(user)];\n        }\n      });\n    });\n  };\n  AuthImpl.prototype.useDeviceLanguage = function () {\n    this.languageCode = _getUserLanguage();\n  };\n  AuthImpl.prototype._delete = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        this._deleted = true;\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AuthImpl.prototype.updateCurrentUser = function (userExtern) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var user;\n      return tslib.__generator(this, function (_a) {\n        user = userExtern ? util.getModularInstance(userExtern) : null;\n        if (user) {\n          _assert(user.auth.config.apiKey === this.config.apiKey, this, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */);\n        }\n\n        return [2 /*return*/, this._updateCurrentUser(user && user._clone(this))];\n      });\n    });\n  };\n  AuthImpl.prototype._updateCurrentUser = function (user, skipBeforeStateCallbacks) {\n    if (skipBeforeStateCallbacks === void 0) {\n      skipBeforeStateCallbacks = false;\n    }\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._deleted) {\n              return [2 /*return*/];\n            }\n\n            if (user) {\n              _assert(this.tenantId === user.tenantId, this, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n            }\n\n            if (!!skipBeforeStateCallbacks) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.beforeStateQueue.runMiddleware(user)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, this.queue(function () {\n              return tslib.__awaiter(_this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4 /*yield*/, this.directlySetCurrentUser(user)];\n                    case 1:\n                      _a.sent();\n                      this.notifyAuthListeners();\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  AuthImpl.prototype.signOut = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Run first, to block _setRedirectUser() if any callbacks fail.\n            return [4 /*yield*/, this.beforeStateQueue.runMiddleware(null)];\n          case 1:\n            // Run first, to block _setRedirectUser() if any callbacks fail.\n            _a.sent();\n            if (!(this.redirectPersistenceManager || this._popupRedirectResolver)) return [3 /*break*/, 3];\n            return [4 /*yield*/, this._setRedirectUser(null)];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            // Prevent callbacks from being called again in _updateCurrentUser, as\n            // they were already called in the first line.\n            return [2 /*return*/, this._updateCurrentUser(null, /* skipBeforeStateCallbacks */true)];\n        }\n      });\n    });\n  };\n  AuthImpl.prototype.setPersistence = function (persistence) {\n    var _this = this;\n    return this.queue(function () {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        return tslib.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.assertedPersistence.setPersistence(_getInstance(persistence))];\n            case 1:\n              _a.sent();\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  AuthImpl.prototype._getPersistence = function () {\n    return this.assertedPersistence.persistence.type;\n  };\n  AuthImpl.prototype._updateErrorMap = function (errorMap) {\n    this._errorFactory = new util.ErrorFactory('auth', 'Firebase', errorMap());\n  };\n  AuthImpl.prototype.onAuthStateChanged = function (nextOrObserver, error, completed) {\n    return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\n  };\n  AuthImpl.prototype.beforeAuthStateChanged = function (callback, onAbort) {\n    return this.beforeStateQueue.pushCallback(callback, onAbort);\n  };\n  AuthImpl.prototype.onIdTokenChanged = function (nextOrObserver, error, completed) {\n    return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\n  };\n  AuthImpl.prototype.toJSON = function () {\n    var _a;\n    return {\n      apiKey: this.config.apiKey,\n      authDomain: this.config.authDomain,\n      appName: this.name,\n      currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()\n    };\n  };\n  AuthImpl.prototype._setRedirectUser = function (user, popupRedirectResolver) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var redirectManager;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getOrInitRedirectPersistenceManager(popupRedirectResolver)];\n          case 1:\n            redirectManager = _a.sent();\n            return [2 /*return*/, user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user)];\n        }\n      });\n    });\n  };\n  AuthImpl.prototype.getOrInitRedirectPersistenceManager = function (popupRedirectResolver) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var resolver, _a, _b;\n      return tslib.__generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!!this.redirectPersistenceManager) return [3 /*break*/, 3];\n            resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;\n            _assert(resolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n            _a = this;\n            return [4 /*yield*/, PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], \"redirectUser\" /* KeyName.REDIRECT_USER */)];\n          case 1:\n            _a.redirectPersistenceManager = _c.sent();\n            _b = this;\n            return [4 /*yield*/, this.redirectPersistenceManager.getCurrentUser()];\n          case 2:\n            _b.redirectUser = _c.sent();\n            _c.label = 3;\n          case 3:\n            return [2 /*return*/, this.redirectPersistenceManager];\n        }\n      });\n    });\n  };\n  AuthImpl.prototype._redirectUserForId = function (id) {\n    var _a, _b;\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return tslib.__generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!this._isInitialized) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.queue(function () {\n              return tslib.__awaiter(_this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                  return [2 /*return*/];\n                });\n              });\n            })];\n\n          case 1:\n            _c.sent();\n            _c.label = 2;\n          case 2:\n            if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {\n              return [2 /*return*/, this._currentUser];\n            }\n            if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {\n              return [2 /*return*/, this.redirectUser];\n            }\n            return [2 /*return*/, null];\n        }\n      });\n    });\n  };\n  AuthImpl.prototype._persistUserIfCurrent = function (user) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return tslib.__generator(this, function (_a) {\n        if (user === this.currentUser) {\n          return [2 /*return*/, this.queue(function () {\n            return tslib.__awaiter(_this, void 0, void 0, function () {\n              return tslib.__generator(this, function (_a) {\n                return [2 /*return*/, this.directlySetCurrentUser(user)];\n              });\n            });\n          })];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  /** Notifies listeners only if the user is current */\n  AuthImpl.prototype._notifyListenersIfCurrent = function (user) {\n    if (user === this.currentUser) {\n      this.notifyAuthListeners();\n    }\n  };\n  AuthImpl.prototype._key = function () {\n    return \"\".concat(this.config.authDomain, \":\").concat(this.config.apiKey, \":\").concat(this.name);\n  };\n  AuthImpl.prototype._startProactiveRefresh = function () {\n    this.isProactiveRefreshEnabled = true;\n    if (this.currentUser) {\n      this._currentUser._startProactiveRefresh();\n    }\n  };\n  AuthImpl.prototype._stopProactiveRefresh = function () {\n    this.isProactiveRefreshEnabled = false;\n    if (this.currentUser) {\n      this._currentUser._stopProactiveRefresh();\n    }\n  };\n  Object.defineProperty(AuthImpl.prototype, \"_currentUser\", {\n    /** Returns the current user cast as the internal type */\n    get: function get() {\n      return this.currentUser;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  AuthImpl.prototype.notifyAuthListeners = function () {\n    var _a, _b;\n    if (!this._isInitialized) {\n      return;\n    }\n    this.idTokenSubscription.next(this.currentUser);\n    var currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;\n    if (this.lastNotifiedUid !== currentUid) {\n      this.lastNotifiedUid = currentUid;\n      this.authStateSubscription.next(this.currentUser);\n    }\n  };\n  AuthImpl.prototype.registerStateListener = function (subscription, nextOrObserver, error, completed) {\n    var _this = this;\n    if (this._deleted) {\n      return function () {};\n    }\n    var cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);\n    var promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;\n    _assert(promise, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    // The callback needs to be called asynchronously per the spec.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    promise.then(function () {\n      return cb(_this.currentUser);\n    });\n    if (typeof nextOrObserver === 'function') {\n      return subscription.addObserver(nextOrObserver, error, completed);\n    } else {\n      return subscription.addObserver(nextOrObserver);\n    }\n  };\n  /**\r\n   * Unprotected (from race conditions) method to set the current user. This\r\n   * should only be called from within a queued callback. This is necessary\r\n   * because the queue shouldn't rely on another queued callback.\r\n   */\n  AuthImpl.prototype.directlySetCurrentUser = function (user) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.currentUser && this.currentUser !== user) {\n              this._currentUser._stopProactiveRefresh();\n            }\n            if (user && this.isProactiveRefreshEnabled) {\n              user._startProactiveRefresh();\n            }\n            this.currentUser = user;\n            if (!user) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.assertedPersistence.setCurrentUser(user)];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, this.assertedPersistence.removeCurrentUser()];\n          case 3:\n            _a.sent();\n            _a.label = 4;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AuthImpl.prototype.queue = function (action) {\n    // In case something errors, the callback still should be called in order\n    // to keep the promise chain alive\n    this.operations = this.operations.then(action, action);\n    return this.operations;\n  };\n  Object.defineProperty(AuthImpl.prototype, \"assertedPersistence\", {\n    get: function get() {\n      _assert(this.persistenceManager, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.persistenceManager;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  AuthImpl.prototype._logFramework = function (framework) {\n    if (!framework || this.frameworks.includes(framework)) {\n      return;\n    }\n    this.frameworks.push(framework);\n    // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n    // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n    this.frameworks.sort();\n    this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\n  };\n  AuthImpl.prototype._getFrameworks = function () {\n    return this.frameworks;\n  };\n  AuthImpl.prototype._getAdditionalHeaders = function () {\n    var _a;\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var headers, heartbeatsHeader;\n      var _b;\n      return tslib.__generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            headers = (_b = {}, _b[\"X-Client-Version\" /* HttpHeader.X_CLIENT_VERSION */] = this.clientVersion, _b);\n            if (this.app.options.appId) {\n              headers[\"X-Firebase-gmpid\" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;\n            }\n            return [4 /*yield*/, (_a = this.heartbeatServiceProvider.getImmediate({\n              optional: true\n            })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader()];\n          case 1:\n            heartbeatsHeader = _c.sent();\n            if (heartbeatsHeader) {\n              headers[\"X-Firebase-Client\" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;\n            }\n            return [2 /*return*/, headers];\n        }\n      });\n    });\n  };\n  return AuthImpl;\n}();\n/**\r\n * Method to be used to cast down to our private implmentation of Auth.\r\n * It will also handle unwrapping from the compat type if necessary\r\n *\r\n * @param auth Auth object passed in from developer\r\n */\nfunction _castAuth(auth) {\n  return util.getModularInstance(auth);\n}\n/** Helper class to wrap subscriber logic */\nvar Subscription = /** @class */function () {\n  function Subscription(auth) {\n    var _this = this;\n    this.auth = auth;\n    this.observer = null;\n    this.addObserver = util.createSubscribe(function (observer) {\n      return _this.observer = observer;\n    });\n  }\n  Object.defineProperty(Subscription.prototype, \"next\", {\n    get: function get() {\n      _assert(this.observer, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.observer.next.bind(this.observer);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Subscription;\n}();\n\n/**\r\n * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\r\n * Firebase Auth services.\r\n *\r\n * @remarks\r\n * This must be called synchronously immediately following the first call to\r\n * {@link initializeAuth}.  Do not use with production credentials as emulator\r\n * traffic is not encrypted.\r\n *\r\n *\r\n * @example\r\n * ```javascript\r\n * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\r\n * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\r\n * `true` to disable the warning banner attached to the DOM.\r\n *\r\n * @public\r\n */\nfunction connectAuthEmulator(auth, url, options) {\n  var authInternal = _castAuth(auth);\n  _assert(authInternal._canInitEmulator, authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n  _assert(/^https?:\\/\\//.test(url), authInternal, \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);\n  var disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);\n  var protocol = extractProtocol(url);\n  var _a = extractHostAndPort(url),\n    host = _a.host,\n    port = _a.port;\n  var portStr = port === null ? '' : \":\".concat(port);\n  // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n  authInternal.config.emulator = {\n    url: \"\".concat(protocol, \"//\").concat(host).concat(portStr, \"/\")\n  };\n  authInternal.settings.appVerificationDisabledForTesting = true;\n  authInternal.emulatorConfig = Object.freeze({\n    host: host,\n    port: port,\n    protocol: protocol.replace(':', ''),\n    options: Object.freeze({\n      disableWarnings: disableWarnings\n    })\n  });\n  if (!disableWarnings) {\n    emitEmulatorWarning();\n  }\n}\nfunction extractProtocol(url) {\n  var protocolEnd = url.indexOf(':');\n  return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n}\nfunction extractHostAndPort(url) {\n  var protocol = extractProtocol(url);\n  var authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n  if (!authority) {\n    return {\n      host: '',\n      port: null\n    };\n  }\n  var hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n  var bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n  if (bracketedIPv6) {\n    var host = bracketedIPv6[1];\n    return {\n      host: host,\n      port: parsePort(hostAndPort.substr(host.length + 1))\n    };\n  } else {\n    var _a = hostAndPort.split(':'),\n      host = _a[0],\n      port = _a[1];\n    return {\n      host: host,\n      port: parsePort(port)\n    };\n  }\n}\nfunction parsePort(portStr) {\n  if (!portStr) {\n    return null;\n  }\n  var port = Number(portStr);\n  if (isNaN(port)) {\n    return null;\n  }\n  return port;\n}\nfunction emitEmulatorWarning() {\n  function attachBanner() {\n    var el = document.createElement('p');\n    var sty = el.style;\n    el.innerText = 'Running in emulator mode. Do not use with production credentials.';\n    sty.position = 'fixed';\n    sty.width = '100%';\n    sty.backgroundColor = '#ffffff';\n    sty.border = '.1em solid #000000';\n    sty.color = '#b50000';\n    sty.bottom = '0px';\n    sty.left = '0px';\n    sty.margin = '0px';\n    sty.zIndex = '10000';\n    sty.textAlign = 'center';\n    el.classList.add('firebase-emulator-warning');\n    document.body.appendChild(el);\n  }\n  if (typeof console !== 'undefined' && typeof console.info === 'function') {\n    console.info('WARNING: You are using the Auth Emulator,' + ' which is intended for local testing only.  Do not use with' + ' production credentials.');\n  }\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    if (document.readyState === 'loading') {\n      window.addEventListener('DOMContentLoaded', attachBanner);\n    } else {\n      attachBanner();\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Interface that represents the credentials returned by an {@link AuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */\nvar AuthCredential = /** @class */function () {\n  /** @internal */\n  function AuthCredential(\n  /**\r\n   * The authentication provider ID for the credential.\r\n   *\r\n   * @remarks\r\n   * For example, 'facebook.com', or 'google.com'.\r\n   */\n  providerId,\n  /**\r\n   * The authentication sign in method for the credential.\r\n   *\r\n   * @remarks\r\n   * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\r\n   * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\r\n   * identifier as returned in {@link fetchSignInMethodsForEmail}.\r\n   */\n  signInMethod) {\n    this.providerId = providerId;\n    this.signInMethod = signInMethod;\n  }\n  /**\r\n   * Returns a JSON-serializable representation of this object.\r\n   *\r\n   * @returns a JSON-serializable representation of this object.\r\n   */\n  AuthCredential.prototype.toJSON = function () {\n    return debugFail('not implemented');\n  };\n  /** @internal */\n  AuthCredential.prototype._getIdTokenResponse = function (_auth) {\n    return debugFail('not implemented');\n  };\n  /** @internal */\n  AuthCredential.prototype._linkToIdToken = function (_auth, _idToken) {\n    return debugFail('not implemented');\n  };\n  /** @internal */\n  AuthCredential.prototype._getReauthenticationResolver = function (_auth) {\n    return debugFail('not implemented');\n  };\n  return AuthCredential;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction resetPassword(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:resetPassword\" /* Endpoint.RESET_PASSWORD */, _addTidIfNecessary(auth, request))];\n    });\n  });\n}\nfunction updateEmailPassword(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request)];\n    });\n  });\n}\nfunction applyActionCode$1(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request))];\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction signInWithPassword(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request))];\n    });\n  });\n}\nfunction sendOobCode(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendOobCode\" /* Endpoint.SEND_OOB_CODE */, _addTidIfNecessary(auth, request))];\n    });\n  });\n}\nfunction sendEmailVerification$1(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, sendOobCode(auth, request)];\n    });\n  });\n}\nfunction sendPasswordResetEmail$1(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, sendOobCode(auth, request)];\n    });\n  });\n}\nfunction sendSignInLinkToEmail$1(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, sendOobCode(auth, request)];\n    });\n  });\n}\nfunction verifyAndChangeEmail(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, sendOobCode(auth, request)];\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction signInWithEmailLink$1(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request))];\n    });\n  });\n}\nfunction signInWithEmailLinkForLinking(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request))];\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Interface that represents the credentials returned by {@link EmailAuthProvider} for\r\n * {@link ProviderId}.PASSWORD\r\n *\r\n * @remarks\r\n * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\r\n * {@link SignInMethod}.EMAIL_LINK.\r\n *\r\n * @public\r\n */\nvar EmailAuthCredential = /** @class */function (_super) {\n  tslib.__extends(EmailAuthCredential, _super);\n  /** @internal */\n  function EmailAuthCredential( /** @internal */\n  _email, /** @internal */\n  _password, signInMethod, /** @internal */\n  _tenantId) {\n    if (_tenantId === void 0) {\n      _tenantId = null;\n    }\n    var _this = _super.call(this, \"password\" /* ProviderId.PASSWORD */, signInMethod) || this;\n    _this._email = _email;\n    _this._password = _password;\n    _this._tenantId = _tenantId;\n    return _this;\n  }\n  /** @internal */\n  EmailAuthCredential._fromEmailAndPassword = function (email, password) {\n    return new EmailAuthCredential(email, password, \"password\" /* SignInMethod.EMAIL_PASSWORD */);\n  };\n  /** @internal */\n  EmailAuthCredential._fromEmailAndCode = function (email, oobCode, tenantId) {\n    if (tenantId === void 0) {\n      tenantId = null;\n    }\n    return new EmailAuthCredential(email, oobCode, \"emailLink\" /* SignInMethod.EMAIL_LINK */, tenantId);\n  };\n  /** {@inheritdoc AuthCredential.toJSON} */\n  EmailAuthCredential.prototype.toJSON = function () {\n    return {\n      email: this._email,\n      password: this._password,\n      signInMethod: this.signInMethod,\n      tenantId: this._tenantId\n    };\n  };\n  /**\r\n   * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\r\n   *\r\n   * @param json - Either `object` or the stringified representation of the object. When string is\r\n   * provided, `JSON.parse` would be called first.\r\n   *\r\n   * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\r\n   */\n  EmailAuthCredential.fromJSON = function (json) {\n    var obj = typeof json === 'string' ? JSON.parse(json) : json;\n    if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {\n      if (obj.signInMethod === \"password\" /* SignInMethod.EMAIL_PASSWORD */) {\n        return this._fromEmailAndPassword(obj.email, obj.password);\n      } else if (obj.signInMethod === \"emailLink\" /* SignInMethod.EMAIL_LINK */) {\n        return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n      }\n    }\n    return null;\n  };\n  /** @internal */\n  EmailAuthCredential.prototype._getIdTokenResponse = function (auth) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        switch (this.signInMethod) {\n          case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n            return [2 /*return*/, signInWithPassword(auth, {\n              returnSecureToken: true,\n              email: this._email,\n              password: this._password\n            })];\n          case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n            return [2 /*return*/, signInWithEmailLink$1(auth, {\n              email: this._email,\n              oobCode: this._password\n            })];\n          default:\n            _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        }\n\n        return [2 /*return*/];\n      });\n    });\n  };\n  /** @internal */\n  EmailAuthCredential.prototype._linkToIdToken = function (auth, idToken) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        switch (this.signInMethod) {\n          case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n            return [2 /*return*/, updateEmailPassword(auth, {\n              idToken: idToken,\n              returnSecureToken: true,\n              email: this._email,\n              password: this._password\n            })];\n          case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n            return [2 /*return*/, signInWithEmailLinkForLinking(auth, {\n              idToken: idToken,\n              email: this._email,\n              oobCode: this._password\n            })];\n          default:\n            _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        }\n\n        return [2 /*return*/];\n      });\n    });\n  };\n  /** @internal */\n  EmailAuthCredential.prototype._getReauthenticationResolver = function (auth) {\n    return this._getIdTokenResponse(auth);\n  };\n  return EmailAuthCredential;\n}(AuthCredential);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction signInWithIdp(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request))];\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar IDP_REQUEST_URI$1 = 'http://localhost';\n/**\r\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */\nvar OAuthCredential = /** @class */function (_super) {\n  tslib.__extends(OAuthCredential, _super);\n  function OAuthCredential() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.pendingToken = null;\n    return _this;\n  }\n  /** @internal */\n  OAuthCredential._fromParams = function (params) {\n    var cred = new OAuthCredential(params.providerId, params.signInMethod);\n    if (params.idToken || params.accessToken) {\n      // OAuth 2 and either ID token or access token.\n      if (params.idToken) {\n        cred.idToken = params.idToken;\n      }\n      if (params.accessToken) {\n        cred.accessToken = params.accessToken;\n      }\n      // Add nonce if available and no pendingToken is present.\n      if (params.nonce && !params.pendingToken) {\n        cred.nonce = params.nonce;\n      }\n      if (params.pendingToken) {\n        cred.pendingToken = params.pendingToken;\n      }\n    } else if (params.oauthToken && params.oauthTokenSecret) {\n      // OAuth 1 and OAuth token with token secret\n      cred.accessToken = params.oauthToken;\n      cred.secret = params.oauthTokenSecret;\n    } else {\n      _fail(\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    }\n\n    return cred;\n  };\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  OAuthCredential.prototype.toJSON = function () {\n    return {\n      idToken: this.idToken,\n      accessToken: this.accessToken,\n      secret: this.secret,\n      nonce: this.nonce,\n      pendingToken: this.pendingToken,\n      providerId: this.providerId,\n      signInMethod: this.signInMethod\n    };\n  };\n  /**\r\n   * Static method to deserialize a JSON representation of an object into an\r\n   * {@link  AuthCredential}.\r\n   *\r\n   * @param json - Input can be either Object or the stringified representation of the object.\r\n   * When string is provided, JSON.parse would be called first.\r\n   *\r\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\r\n   */\n  OAuthCredential.fromJSON = function (json) {\n    var obj = typeof json === 'string' ? JSON.parse(json) : json;\n    var providerId = obj.providerId,\n      signInMethod = obj.signInMethod,\n      rest = tslib.__rest(obj, [\"providerId\", \"signInMethod\"]);\n    if (!providerId || !signInMethod) {\n      return null;\n    }\n    var cred = new OAuthCredential(providerId, signInMethod);\n    cred.idToken = rest.idToken || undefined;\n    cred.accessToken = rest.accessToken || undefined;\n    cred.secret = rest.secret;\n    cred.nonce = rest.nonce;\n    cred.pendingToken = rest.pendingToken || null;\n    return cred;\n  };\n  /** @internal */\n  OAuthCredential.prototype._getIdTokenResponse = function (auth) {\n    var request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  };\n  /** @internal */\n  OAuthCredential.prototype._linkToIdToken = function (auth, idToken) {\n    var request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  };\n  /** @internal */\n  OAuthCredential.prototype._getReauthenticationResolver = function (auth) {\n    var request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  };\n  OAuthCredential.prototype.buildRequest = function () {\n    var request = {\n      requestUri: IDP_REQUEST_URI$1,\n      returnSecureToken: true\n    };\n    if (this.pendingToken) {\n      request.pendingToken = this.pendingToken;\n    } else {\n      var postBody = {};\n      if (this.idToken) {\n        postBody['id_token'] = this.idToken;\n      }\n      if (this.accessToken) {\n        postBody['access_token'] = this.accessToken;\n      }\n      if (this.secret) {\n        postBody['oauth_token_secret'] = this.secret;\n      }\n      postBody['providerId'] = this.providerId;\n      if (this.nonce && !this.pendingToken) {\n        postBody['nonce'] = this.nonce;\n      }\n      request.postBody = util.querystring(postBody);\n    }\n    return request;\n  };\n  return OAuthCredential;\n}(AuthCredential);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a;\nfunction sendPhoneVerificationCode(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendVerificationCode\" /* Endpoint.SEND_VERIFICATION_CODE */, _addTidIfNecessary(auth, request))];\n    });\n  });\n}\nfunction signInWithPhoneNumber$1(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request))];\n    });\n  });\n}\nfunction linkWithPhoneNumber$1(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var response;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request))];\n        case 1:\n          response = _a.sent();\n          if (response.temporaryProof) {\n            throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, response);\n          }\n          return [2 /*return*/, response];\n      }\n    });\n  });\n}\nvar VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = (_a = {}, _a[\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */] = \"user-not-found\" /* AuthErrorCode.USER_DELETED */, _a);\nfunction verifyPhoneNumberForExisting(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var apiRequest;\n    return tslib.__generator(this, function (_a) {\n      apiRequest = tslib.__assign(tslib.__assign({}, request), {\n        operation: 'REAUTH'\n      });\n      return [2 /*return*/, _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_)];\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents the credentials returned by {@link PhoneAuthProvider}.\r\n *\r\n * @public\r\n */\nvar PhoneAuthCredential = /** @class */function (_super) {\n  tslib.__extends(PhoneAuthCredential, _super);\n  function PhoneAuthCredential(params) {\n    var _this = _super.call(this, \"phone\" /* ProviderId.PHONE */, \"phone\" /* SignInMethod.PHONE */) || this;\n    _this.params = params;\n    return _this;\n  }\n  /** @internal */\n  PhoneAuthCredential._fromVerification = function (verificationId, verificationCode) {\n    return new PhoneAuthCredential({\n      verificationId: verificationId,\n      verificationCode: verificationCode\n    });\n  };\n  /** @internal */\n  PhoneAuthCredential._fromTokenResponse = function (phoneNumber, temporaryProof) {\n    return new PhoneAuthCredential({\n      phoneNumber: phoneNumber,\n      temporaryProof: temporaryProof\n    });\n  };\n  /** @internal */\n  PhoneAuthCredential.prototype._getIdTokenResponse = function (auth) {\n    return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\n  };\n  /** @internal */\n  PhoneAuthCredential.prototype._linkToIdToken = function (auth, idToken) {\n    return linkWithPhoneNumber$1(auth, tslib.__assign({\n      idToken: idToken\n    }, this._makeVerificationRequest()));\n  };\n  /** @internal */\n  PhoneAuthCredential.prototype._getReauthenticationResolver = function (auth) {\n    return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n  };\n  /** @internal */\n  PhoneAuthCredential.prototype._makeVerificationRequest = function () {\n    var _a = this.params,\n      temporaryProof = _a.temporaryProof,\n      phoneNumber = _a.phoneNumber,\n      verificationId = _a.verificationId,\n      verificationCode = _a.verificationCode;\n    if (temporaryProof && phoneNumber) {\n      return {\n        temporaryProof: temporaryProof,\n        phoneNumber: phoneNumber\n      };\n    }\n    return {\n      sessionInfo: verificationId,\n      code: verificationCode\n    };\n  };\n  /** {@inheritdoc AuthCredential.toJSON} */\n  PhoneAuthCredential.prototype.toJSON = function () {\n    var obj = {\n      providerId: this.providerId\n    };\n    if (this.params.phoneNumber) {\n      obj.phoneNumber = this.params.phoneNumber;\n    }\n    if (this.params.temporaryProof) {\n      obj.temporaryProof = this.params.temporaryProof;\n    }\n    if (this.params.verificationCode) {\n      obj.verificationCode = this.params.verificationCode;\n    }\n    if (this.params.verificationId) {\n      obj.verificationId = this.params.verificationId;\n    }\n    return obj;\n  };\n  /** Generates a phone credential based on a plain object or a JSON string. */\n  PhoneAuthCredential.fromJSON = function (json) {\n    if (typeof json === 'string') {\n      json = JSON.parse(json);\n    }\n    var _a = json,\n      verificationId = _a.verificationId,\n      verificationCode = _a.verificationCode,\n      phoneNumber = _a.phoneNumber,\n      temporaryProof = _a.temporaryProof;\n    if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {\n      return null;\n    }\n    return new PhoneAuthCredential({\n      verificationId: verificationId,\n      verificationCode: verificationCode,\n      phoneNumber: phoneNumber,\n      temporaryProof: temporaryProof\n    });\n  };\n  return PhoneAuthCredential;\n}(AuthCredential);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Maps the mode string in action code URL to Action Code Info operation.\r\n *\r\n * @param mode\r\n */\nfunction parseMode(mode) {\n  switch (mode) {\n    case 'recoverEmail':\n      return \"RECOVER_EMAIL\" /* ActionCodeOperation.RECOVER_EMAIL */;\n    case 'resetPassword':\n      return \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */;\n    case 'signIn':\n      return \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n    case 'verifyEmail':\n      return \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */;\n    case 'verifyAndChangeEmail':\n      return \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;\n    case 'revertSecondFactorAddition':\n      return \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;\n    default:\n      return null;\n  }\n}\n/**\r\n * Helper to parse FDL links\r\n *\r\n * @param url\r\n */\nfunction parseDeepLink(url) {\n  var link = util.querystringDecode(util.extractQuerystring(url))['link'];\n  // Double link case (automatic redirect).\n  var doubleDeepLink = link ? util.querystringDecode(util.extractQuerystring(link))['deep_link_id'] : null;\n  // iOS custom scheme links.\n  var iOSDeepLink = util.querystringDecode(util.extractQuerystring(url))['deep_link_id'];\n  var iOSDoubleDeepLink = iOSDeepLink ? util.querystringDecode(util.extractQuerystring(iOSDeepLink))['link'] : null;\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n/**\r\n * A utility class to parse email action URLs such as password reset, email verification,\r\n * email link sign in, etc.\r\n *\r\n * @public\r\n */\nvar ActionCodeURL = /** @class */function () {\n  /**\r\n   * @param actionLink - The link from which to extract the URL.\r\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\r\n   *\r\n   * @internal\r\n   */\n  function ActionCodeURL(actionLink) {\n    var _a, _b, _c, _d, _e, _f;\n    var searchParams = util.querystringDecode(util.extractQuerystring(actionLink));\n    var apiKey = (_a = searchParams[\"apiKey\" /* QueryField.API_KEY */]) !== null && _a !== void 0 ? _a : null;\n    var code = (_b = searchParams[\"oobCode\" /* QueryField.CODE */]) !== null && _b !== void 0 ? _b : null;\n    var operation = parseMode((_c = searchParams[\"mode\" /* QueryField.MODE */]) !== null && _c !== void 0 ? _c : null);\n    // Validate API key, code and mode.\n    _assert(apiKey && code && operation, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    this.apiKey = apiKey;\n    this.operation = operation;\n    this.code = code;\n    this.continueUrl = (_d = searchParams[\"continueUrl\" /* QueryField.CONTINUE_URL */]) !== null && _d !== void 0 ? _d : null;\n    this.languageCode = (_e = searchParams[\"languageCode\" /* QueryField.LANGUAGE_CODE */]) !== null && _e !== void 0 ? _e : null;\n    this.tenantId = (_f = searchParams[\"tenantId\" /* QueryField.TENANT_ID */]) !== null && _f !== void 0 ? _f : null;\n  }\n  /**\r\n   * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\r\n   * otherwise returns null.\r\n   *\r\n   * @param link  - The email action link string.\r\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\r\n   *\r\n   * @public\r\n   */\n  ActionCodeURL.parseLink = function (link) {\n    var actionLink = parseDeepLink(link);\n    try {\n      return new ActionCodeURL(actionLink);\n    } catch (_a) {\n      return null;\n    }\n  };\n  return ActionCodeURL;\n}();\n/**\r\n * Parses the email action link string and returns an {@link ActionCodeURL} if\r\n * the link is valid, otherwise returns null.\r\n *\r\n * @public\r\n */\nfunction parseActionCodeURL(link) {\n  return ActionCodeURL.parseLink(link);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for generating {@link EmailAuthCredential}.\r\n *\r\n * @public\r\n */\nvar EmailAuthProvider = /** @class */function () {\n  function EmailAuthProvider() {\n    /**\r\n     * Always set to {@link ProviderId}.PASSWORD, even for email link.\r\n     */\n    this.providerId = EmailAuthProvider.PROVIDER_ID;\n  }\n  /**\r\n   * Initialize an {@link AuthCredential} using an email and password.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const authCredential = EmailAuthProvider.credential(email, password);\r\n   * const userCredential = await signInWithCredential(auth, authCredential);\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n   * ```\r\n   *\r\n   * @param email - Email address.\r\n   * @param password - User account password.\r\n   * @returns The auth provider credential.\r\n   */\n  EmailAuthProvider.credential = function (email, password) {\n    return EmailAuthCredential._fromEmailAndPassword(email, password);\n  };\n  /**\r\n   * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\r\n   * email link operation.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\r\n   * const userCredential = await signInWithCredential(auth, authCredential);\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * await sendSignInLinkToEmail(auth, email);\r\n   * // Obtain emailLink from user.\r\n   * const userCredential = await signInWithEmailLink(auth, email, emailLink);\r\n   * ```\r\n   *\r\n   * @param auth - The {@link Auth} instance used to verify the link.\r\n   * @param email - Email address.\r\n   * @param emailLink - Sign-in email link.\r\n   * @returns - The auth provider credential.\r\n   */\n  EmailAuthProvider.credentialWithLink = function (email, emailLink) {\n    var actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    _assert(actionCodeUrl, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\n  };\n  /**\r\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\r\n   */\n  EmailAuthProvider.PROVIDER_ID = \"password\" /* ProviderId.PASSWORD */;\n  /**\r\n   * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\r\n   */\n  EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\" /* SignInMethod.EMAIL_PASSWORD */;\n  /**\r\n   * Always set to {@link SignInMethod}.EMAIL_LINK.\r\n   */\n  EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\" /* SignInMethod.EMAIL_LINK */;\n  return EmailAuthProvider;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The base class for all Federated providers (OAuth (including OIDC), SAML).\r\n *\r\n * This class is not meant to be instantiated directly.\r\n *\r\n * @public\r\n */\nvar FederatedAuthProvider = /** @class */function () {\n  /**\r\n   * Constructor for generic OAuth providers.\r\n   *\r\n   * @param providerId - Provider for which credentials should be generated.\r\n   */\n  function FederatedAuthProvider(providerId) {\n    this.providerId = providerId;\n    /** @internal */\n    this.defaultLanguageCode = null;\n    /** @internal */\n    this.customParameters = {};\n  }\n  /**\r\n   * Set the language gode.\r\n   *\r\n   * @param languageCode - language code\r\n   */\n  FederatedAuthProvider.prototype.setDefaultLanguage = function (languageCode) {\n    this.defaultLanguageCode = languageCode;\n  };\n  /**\r\n   * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\r\n   * operations.\r\n   *\r\n   * @remarks\r\n   * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\r\n   * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\r\n   *\r\n   * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\r\n   */\n  FederatedAuthProvider.prototype.setCustomParameters = function (customOAuthParameters) {\n    this.customParameters = customOAuthParameters;\n    return this;\n  };\n  /**\r\n   * Retrieve the current list of {@link CustomParameters}.\r\n   */\n  FederatedAuthProvider.prototype.getCustomParameters = function () {\n    return this.customParameters;\n  };\n  return FederatedAuthProvider;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Common code to all OAuth providers. This is separate from the\r\n * {@link OAuthProvider} so that child providers (like\r\n * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\r\n * Instead, they rely on a static `credential` method.\r\n */\nvar BaseOAuthProvider = /** @class */function (_super) {\n  tslib.__extends(BaseOAuthProvider, _super);\n  function BaseOAuthProvider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** @internal */\n    _this.scopes = [];\n    return _this;\n  }\n  /**\r\n   * Add an OAuth scope to the credential.\r\n   *\r\n   * @param scope - Provider OAuth scope to add.\r\n   */\n  BaseOAuthProvider.prototype.addScope = function (scope) {\n    // If not already added, add scope to list.\n    if (!this.scopes.includes(scope)) {\n      this.scopes.push(scope);\n    }\n    return this;\n  };\n  /**\r\n   * Retrieve the current list of OAuth scopes.\r\n   */\n  BaseOAuthProvider.prototype.getScopes = function () {\n    return tslib.__spreadArray([], this.scopes, true);\n  };\n  return BaseOAuthProvider;\n}(FederatedAuthProvider);\n/**\r\n * Provider for generating generic {@link OAuthCredential}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new OAuthProvider('google.com');\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a OAuth Access Token for the provider.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new OAuthProvider('google.com');\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a OAuth Access Token for the provider.\r\n * const credential = provider.credentialFromResult(auth, result);\r\n * const token = credential.accessToken;\r\n * ```\r\n * @public\r\n */\nvar OAuthProvider = /** @class */function (_super) {\n  tslib.__extends(OAuthProvider, _super);\n  function OAuthProvider() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Creates an {@link OAuthCredential} from a JSON string or a plain object.\r\n   * @param json - A plain object or a JSON string\r\n   */\n  OAuthProvider.credentialFromJSON = function (json) {\n    var obj = typeof json === 'string' ? JSON.parse(json) : json;\n    _assert('providerId' in obj && 'signInMethod' in obj, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return OAuthCredential._fromParams(obj);\n  };\n  /**\r\n   * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\r\n   *\r\n   * @remarks\r\n   * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\r\n   * the raw nonce must match the nonce field in the ID token.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // `googleUser` from the onsuccess Google Sign In callback.\r\n   * // Initialize a generate OAuth provider with a `google.com` providerId.\r\n   * const provider = new OAuthProvider('google.com');\r\n   * const credential = provider.credential({\r\n   *   idToken: googleUser.getAuthResponse().id_token,\r\n   * });\r\n   * const result = await signInWithCredential(credential);\r\n   * ```\r\n   *\r\n   * @param params - Either the options object containing the ID token, access token and raw nonce\r\n   * or the ID token string.\r\n   */\n  OAuthProvider.prototype.credential = function (params) {\n    return this._credential(tslib.__assign(tslib.__assign({}, params), {\n      nonce: params.rawNonce\n    }));\n  };\n  /** An internal credential method that accepts more permissive options */\n  OAuthProvider.prototype._credential = function (params) {\n    _assert(params.idToken || params.accessToken, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    // For OAuthCredential, sign in method is same as providerId.\n    return OAuthCredential._fromParams(tslib.__assign(tslib.__assign({}, params), {\n      providerId: this.providerId,\n      signInMethod: this.providerId\n    }));\n  };\n  /**\r\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n   *\r\n   * @param userCredential - The user credential.\r\n   */\n  OAuthProvider.credentialFromResult = function (userCredential) {\n    return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\n  };\n  /**\r\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n   * thrown during a sign-in, link, or reauthenticate operation.\r\n   *\r\n   * @param userCredential - The user credential.\r\n   */\n  OAuthProvider.credentialFromError = function (error) {\n    return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});\n  };\n  OAuthProvider.oauthCredentialFromTaggedObject = function (_a) {\n    var tokenResponse = _a._tokenResponse;\n    if (!tokenResponse) {\n      return null;\n    }\n    var _b = tokenResponse,\n      oauthIdToken = _b.oauthIdToken,\n      oauthAccessToken = _b.oauthAccessToken,\n      oauthTokenSecret = _b.oauthTokenSecret,\n      pendingToken = _b.pendingToken,\n      nonce = _b.nonce,\n      providerId = _b.providerId;\n    if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n      return null;\n    }\n    if (!providerId) {\n      return null;\n    }\n    try {\n      return new OAuthProvider(providerId)._credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        nonce: nonce,\n        pendingToken: pendingToken\n      });\n    } catch (e) {\n      return null;\n    }\n  };\n  return OAuthProvider;\n}(BaseOAuthProvider);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('user_birthday');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Facebook Access Token.\r\n *   const credential = FacebookAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * provider.addScope('user_birthday');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Facebook Access Token.\r\n * const credential = FacebookAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @public\r\n */\nvar FacebookAuthProvider = /** @class */function (_super) {\n  tslib.__extends(FacebookAuthProvider, _super);\n  function FacebookAuthProvider() {\n    return _super.call(this, \"facebook.com\" /* ProviderId.FACEBOOK */) || this;\n  }\n  /**\r\n   * Creates a credential for Facebook.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // `event` from the Facebook auth.authResponseChange callback.\r\n   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\r\n   * const result = await signInWithCredential(credential);\r\n   * ```\r\n   *\r\n   * @param accessToken - Facebook access token.\r\n   */\n  FacebookAuthProvider.credential = function (accessToken) {\n    return OAuthCredential._fromParams({\n      providerId: FacebookAuthProvider.PROVIDER_ID,\n      signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n      accessToken: accessToken\n    });\n  };\n  /**\r\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n   *\r\n   * @param userCredential - The user credential.\r\n   */\n  FacebookAuthProvider.credentialFromResult = function (userCredential) {\n    return FacebookAuthProvider.credentialFromTaggedObject(userCredential);\n  };\n  /**\r\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n   * thrown during a sign-in, link, or reauthenticate operation.\r\n   *\r\n   * @param userCredential - The user credential.\r\n   */\n  FacebookAuthProvider.credentialFromError = function (error) {\n    return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});\n  };\n  FacebookAuthProvider.credentialFromTaggedObject = function (_a) {\n    var tokenResponse = _a._tokenResponse;\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n    try {\n      return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch (_b) {\n      return null;\n    }\n  };\n  /** Always set to {@link SignInMethod}.FACEBOOK. */\n  FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\" /* SignInMethod.FACEBOOK */;\n  /** Always set to {@link ProviderId}.FACEBOOK. */\n  FacebookAuthProvider.PROVIDER_ID = \"facebook.com\" /* ProviderId.FACEBOOK */;\n  return FacebookAuthProvider;\n}(BaseOAuthProvider);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for generating an an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new GoogleAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Google Access Token.\r\n *   const credential = GoogleAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new GoogleAuthProvider();\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Google Access Token.\r\n * const credential = GoogleAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @public\r\n */\nvar GoogleAuthProvider = /** @class */function (_super) {\n  tslib.__extends(GoogleAuthProvider, _super);\n  function GoogleAuthProvider() {\n    var _this = _super.call(this, \"google.com\" /* ProviderId.GOOGLE */) || this;\n    _this.addScope('profile');\n    return _this;\n  }\n  /**\r\n   * Creates a credential for Google. At least one of ID token and access token is required.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // \\`googleUser\\` from the onsuccess Google Sign In callback.\r\n   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\r\n   * const result = await signInWithCredential(credential);\r\n   * ```\r\n   *\r\n   * @param idToken - Google ID token.\r\n   * @param accessToken - Google access token.\r\n   */\n  GoogleAuthProvider.credential = function (idToken, accessToken) {\n    return OAuthCredential._fromParams({\n      providerId: GoogleAuthProvider.PROVIDER_ID,\n      signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n      idToken: idToken,\n      accessToken: accessToken\n    });\n  };\n  /**\r\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n   *\r\n   * @param userCredential - The user credential.\r\n   */\n  GoogleAuthProvider.credentialFromResult = function (userCredential) {\n    return GoogleAuthProvider.credentialFromTaggedObject(userCredential);\n  };\n  /**\r\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n   * thrown during a sign-in, link, or reauthenticate operation.\r\n   *\r\n   * @param userCredential - The user credential.\r\n   */\n  GoogleAuthProvider.credentialFromError = function (error) {\n    return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});\n  };\n  GoogleAuthProvider.credentialFromTaggedObject = function (_a) {\n    var tokenResponse = _a._tokenResponse;\n    if (!tokenResponse) {\n      return null;\n    }\n    var _b = tokenResponse,\n      oauthIdToken = _b.oauthIdToken,\n      oauthAccessToken = _b.oauthAccessToken;\n    if (!oauthIdToken && !oauthAccessToken) {\n      // This could be an oauth 1 credential or a phone credential\n      return null;\n    }\n    try {\n      return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n    } catch (_c) {\n      return null;\n    }\n  };\n  /** Always set to {@link SignInMethod}.GOOGLE. */\n  GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\" /* SignInMethod.GOOGLE */;\n  /** Always set to {@link ProviderId}.GOOGLE. */\n  GoogleAuthProvider.PROVIDER_ID = \"google.com\" /* ProviderId.GOOGLE */;\n  return GoogleAuthProvider;\n}(BaseOAuthProvider);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\r\n *\r\n * @remarks\r\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\r\n * the {@link signInWithPopup} handler:\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new GithubAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('repo');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Github Access Token.\r\n *   const credential = GithubAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new GithubAuthProvider();\r\n * provider.addScope('repo');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Github Access Token.\r\n * const credential = GithubAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n * @public\r\n */\nvar GithubAuthProvider = /** @class */function (_super) {\n  tslib.__extends(GithubAuthProvider, _super);\n  function GithubAuthProvider() {\n    return _super.call(this, \"github.com\" /* ProviderId.GITHUB */) || this;\n  }\n  /**\r\n   * Creates a credential for Github.\r\n   *\r\n   * @param accessToken - Github access token.\r\n   */\n  GithubAuthProvider.credential = function (accessToken) {\n    return OAuthCredential._fromParams({\n      providerId: GithubAuthProvider.PROVIDER_ID,\n      signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n      accessToken: accessToken\n    });\n  };\n  /**\r\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n   *\r\n   * @param userCredential - The user credential.\r\n   */\n  GithubAuthProvider.credentialFromResult = function (userCredential) {\n    return GithubAuthProvider.credentialFromTaggedObject(userCredential);\n  };\n  /**\r\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n   * thrown during a sign-in, link, or reauthenticate operation.\r\n   *\r\n   * @param userCredential - The user credential.\r\n   */\n  GithubAuthProvider.credentialFromError = function (error) {\n    return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});\n  };\n  GithubAuthProvider.credentialFromTaggedObject = function (_a) {\n    var tokenResponse = _a._tokenResponse;\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n    try {\n      return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch (_b) {\n      return null;\n    }\n  };\n  /** Always set to {@link SignInMethod}.GITHUB. */\n  GithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\" /* SignInMethod.GITHUB */;\n  /** Always set to {@link ProviderId}.GITHUB. */\n  GithubAuthProvider.PROVIDER_ID = \"github.com\" /* ProviderId.GITHUB */;\n  return GithubAuthProvider;\n}(BaseOAuthProvider);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar IDP_REQUEST_URI = 'http://localhost';\n/**\r\n * @public\r\n */\nvar SAMLAuthCredential = /** @class */function (_super) {\n  tslib.__extends(SAMLAuthCredential, _super);\n  /** @internal */\n  function SAMLAuthCredential(providerId, pendingToken) {\n    var _this = _super.call(this, providerId, providerId) || this;\n    _this.pendingToken = pendingToken;\n    return _this;\n  }\n  /** @internal */\n  SAMLAuthCredential.prototype._getIdTokenResponse = function (auth) {\n    var request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  };\n  /** @internal */\n  SAMLAuthCredential.prototype._linkToIdToken = function (auth, idToken) {\n    var request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  };\n  /** @internal */\n  SAMLAuthCredential.prototype._getReauthenticationResolver = function (auth) {\n    var request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  };\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  SAMLAuthCredential.prototype.toJSON = function () {\n    return {\n      signInMethod: this.signInMethod,\n      providerId: this.providerId,\n      pendingToken: this.pendingToken\n    };\n  };\n  /**\r\n   * Static method to deserialize a JSON representation of an object into an\r\n   * {@link  AuthCredential}.\r\n   *\r\n   * @param json - Input can be either Object or the stringified representation of the object.\r\n   * When string is provided, JSON.parse would be called first.\r\n   *\r\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\r\n   */\n  SAMLAuthCredential.fromJSON = function (json) {\n    var obj = typeof json === 'string' ? JSON.parse(json) : json;\n    var providerId = obj.providerId,\n      signInMethod = obj.signInMethod,\n      pendingToken = obj.pendingToken;\n    if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {\n      return null;\n    }\n    return new SAMLAuthCredential(providerId, pendingToken);\n  };\n  /**\r\n   * Helper static method to avoid exposing the constructor to end users.\r\n   *\r\n   * @internal\r\n   */\n  SAMLAuthCredential._create = function (providerId, pendingToken) {\n    return new SAMLAuthCredential(providerId, pendingToken);\n  };\n  SAMLAuthCredential.prototype.buildRequest = function () {\n    return {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true,\n      pendingToken: this.pendingToken\n    };\n  };\n  return SAMLAuthCredential;\n}(AuthCredential);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar SAML_PROVIDER_PREFIX = 'saml.';\n/**\r\n * An {@link AuthProvider} for SAML.\r\n *\r\n * @public\r\n */\nvar SAMLAuthProvider = /** @class */function (_super) {\n  tslib.__extends(SAMLAuthProvider, _super);\n  /**\r\n   * Constructor. The providerId must start with \"saml.\"\r\n   * @param providerId - SAML provider ID.\r\n   */\n  function SAMLAuthProvider(providerId) {\n    _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return _super.call(this, providerId) || this;\n  }\n  /**\r\n   * Generates an {@link AuthCredential} from a {@link UserCredential} after a\r\n   * successful SAML flow completes.\r\n   *\r\n   * @remarks\r\n   *\r\n   * For example, to get an {@link AuthCredential}, you could write the\r\n   * following code:\r\n   *\r\n   * ```js\r\n   * const userCredential = await signInWithPopup(auth, samlProvider);\r\n   * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\r\n   * ```\r\n   *\r\n   * @param userCredential - The user credential.\r\n   */\n  SAMLAuthProvider.credentialFromResult = function (userCredential) {\n    return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\n  };\n  /**\r\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n   * thrown during a sign-in, link, or reauthenticate operation.\r\n   *\r\n   * @param userCredential - The user credential.\r\n   */\n  SAMLAuthProvider.credentialFromError = function (error) {\n    return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});\n  };\n  /**\r\n   * Creates an {@link AuthCredential} from a JSON string or a plain object.\r\n   * @param json - A plain object or a JSON string\r\n   */\n  SAMLAuthProvider.credentialFromJSON = function (json) {\n    var credential = SAMLAuthCredential.fromJSON(json);\n    _assert(credential, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return credential;\n  };\n  SAMLAuthProvider.samlCredentialFromTaggedObject = function (_a) {\n    var tokenResponse = _a._tokenResponse;\n    if (!tokenResponse) {\n      return null;\n    }\n    var _b = tokenResponse,\n      pendingToken = _b.pendingToken,\n      providerId = _b.providerId;\n    if (!pendingToken || !providerId) {\n      return null;\n    }\n    try {\n      return SAMLAuthCredential._create(providerId, pendingToken);\n    } catch (e) {\n      return null;\n    }\n  };\n  return SAMLAuthProvider;\n}(FederatedAuthProvider);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new TwitterAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Twitter Access Token and Secret.\r\n *   const credential = TwitterAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n *   const secret = credential.secret;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new TwitterAuthProvider();\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Twitter Access Token and Secret.\r\n * const credential = TwitterAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * const secret = credential.secret;\r\n * ```\r\n *\r\n * @public\r\n */\nvar TwitterAuthProvider = /** @class */function (_super) {\n  tslib.__extends(TwitterAuthProvider, _super);\n  function TwitterAuthProvider() {\n    return _super.call(this, \"twitter.com\" /* ProviderId.TWITTER */) || this;\n  }\n  /**\r\n   * Creates a credential for Twitter.\r\n   *\r\n   * @param token - Twitter access token.\r\n   * @param secret - Twitter secret.\r\n   */\n  TwitterAuthProvider.credential = function (token, secret) {\n    return OAuthCredential._fromParams({\n      providerId: TwitterAuthProvider.PROVIDER_ID,\n      signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n      oauthToken: token,\n      oauthTokenSecret: secret\n    });\n  };\n  /**\r\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n   *\r\n   * @param userCredential - The user credential.\r\n   */\n  TwitterAuthProvider.credentialFromResult = function (userCredential) {\n    return TwitterAuthProvider.credentialFromTaggedObject(userCredential);\n  };\n  /**\r\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n   * thrown during a sign-in, link, or reauthenticate operation.\r\n   *\r\n   * @param userCredential - The user credential.\r\n   */\n  TwitterAuthProvider.credentialFromError = function (error) {\n    return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});\n  };\n  TwitterAuthProvider.credentialFromTaggedObject = function (_a) {\n    var tokenResponse = _a._tokenResponse;\n    if (!tokenResponse) {\n      return null;\n    }\n    var _b = tokenResponse,\n      oauthAccessToken = _b.oauthAccessToken,\n      oauthTokenSecret = _b.oauthTokenSecret;\n    if (!oauthAccessToken || !oauthTokenSecret) {\n      return null;\n    }\n    try {\n      return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n    } catch (_c) {\n      return null;\n    }\n  };\n  /** Always set to {@link SignInMethod}.TWITTER. */\n  TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\" /* SignInMethod.TWITTER */;\n  /** Always set to {@link ProviderId}.TWITTER. */\n  TwitterAuthProvider.PROVIDER_ID = \"twitter.com\" /* ProviderId.TWITTER */;\n  return TwitterAuthProvider;\n}(BaseOAuthProvider);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction signUp(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, _addTidIfNecessary(auth, request))];\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar UserCredentialImpl = /** @class */function () {\n  function UserCredentialImpl(params) {\n    this.user = params.user;\n    this.providerId = params.providerId;\n    this._tokenResponse = params._tokenResponse;\n    this.operationType = params.operationType;\n  }\n  UserCredentialImpl._fromIdTokenResponse = function (auth, operationType, idTokenResponse, isAnonymous) {\n    if (isAnonymous === void 0) {\n      isAnonymous = false;\n    }\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var user, providerId, userCred;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous)];\n          case 1:\n            user = _a.sent();\n            providerId = providerIdForResponse(idTokenResponse);\n            userCred = new UserCredentialImpl({\n              user: user,\n              providerId: providerId,\n              _tokenResponse: idTokenResponse,\n              operationType: operationType\n            });\n            return [2 /*return*/, userCred];\n        }\n      });\n    });\n  };\n  UserCredentialImpl._forOperation = function (user, operationType, response) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var providerId;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, user._updateTokensIfNecessary(response, /* reload */true)];\n          case 1:\n            _a.sent();\n            providerId = providerIdForResponse(response);\n            return [2 /*return*/, new UserCredentialImpl({\n              user: user,\n              providerId: providerId,\n              _tokenResponse: response,\n              operationType: operationType\n            })];\n        }\n      });\n    });\n  };\n  return UserCredentialImpl;\n}();\nfunction providerIdForResponse(response) {\n  if (response.providerId) {\n    return response.providerId;\n  }\n  if ('phoneNumber' in response) {\n    return \"phone\" /* ProviderId.PHONE */;\n  }\n\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Asynchronously signs in as an anonymous user.\r\n *\r\n * @remarks\r\n * If there is already an anonymous user signed in, that user will be returned; otherwise, a\r\n * new anonymous user identity will be created and returned.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\nfunction signInAnonymously(auth) {\n  var _a;\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var authInternal, response, userCredential;\n    return tslib.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          authInternal = _castAuth(auth);\n          return [4 /*yield*/, authInternal._initializationPromise];\n        case 1:\n          _b.sent();\n          if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {\n            // If an anonymous user is already signed in, no need to sign them in again.\n            return [2 /*return*/, new UserCredentialImpl({\n              user: authInternal.currentUser,\n              providerId: null,\n              operationType: \"signIn\" /* OperationType.SIGN_IN */\n            })];\n          }\n\n          return [4 /*yield*/, signUp(authInternal, {\n            returnSecureToken: true\n          })];\n        case 2:\n          response = _b.sent();\n          return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response, true)];\n        case 3:\n          userCredential = _b.sent();\n          return [4 /*yield*/, authInternal._updateCurrentUser(userCredential.user)];\n        case 4:\n          _b.sent();\n          return [2 /*return*/, userCredential];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar MultiFactorError = /** @class */function (_super) {\n  tslib.__extends(MultiFactorError, _super);\n  function MultiFactorError(auth, error, operationType, user) {\n    var _this = this;\n    var _a;\n    _this = _super.call(this, error.code, error.message) || this;\n    _this.operationType = operationType;\n    _this.user = user;\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(_this, MultiFactorError.prototype);\n    _this.customData = {\n      appName: auth.name,\n      tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined,\n      _serverResponse: error.customData._serverResponse,\n      operationType: operationType\n    };\n    return _this;\n  }\n  MultiFactorError._fromErrorAndOperation = function (auth, error, operationType, user) {\n    return new MultiFactorError(auth, error, operationType, user);\n  };\n  return MultiFactorError;\n}(util.FirebaseError);\nfunction _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\n  var idTokenProvider = operationType === \"reauthenticate\" /* OperationType.REAUTHENTICATE */ ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);\n  return idTokenProvider.catch(function (error) {\n    if (error.code === \"auth/\".concat(\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */)) {\n      throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\n    }\n    throw error;\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Takes a set of UserInfo provider data and converts it to a set of names\r\n */\nfunction providerDataAsNames(providerData) {\n  return new Set(providerData.map(function (_a) {\n    var providerId = _a.providerId;\n    return providerId;\n  }).filter(function (pid) {\n    return !!pid;\n  }));\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Unlinks a provider from a user account.\r\n *\r\n * @param user - The user.\r\n * @param providerId - The provider to unlink.\r\n *\r\n * @public\r\n */\nfunction unlink(user, providerId) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var userInternal, providerUserInfo, _a, _b, providersLeft;\n    var _c;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          userInternal = util.getModularInstance(user);\n          return [4 /*yield*/, _assertLinkedStatus(true, userInternal, providerId)];\n        case 1:\n          _d.sent();\n          _a = deleteLinkedAccounts;\n          _b = [userInternal.auth];\n          _c = {};\n          return [4 /*yield*/, userInternal.getIdToken()];\n        case 2:\n          return [4 /*yield*/, _a.apply(void 0, _b.concat([(_c.idToken = _d.sent(), _c.deleteProvider = [providerId], _c)]))];\n        case 3:\n          providerUserInfo = _d.sent().providerUserInfo;\n          providersLeft = providerDataAsNames(providerUserInfo || []);\n          userInternal.providerData = userInternal.providerData.filter(function (pd) {\n            return providersLeft.has(pd.providerId);\n          });\n          if (!providersLeft.has(\"phone\" /* ProviderId.PHONE */)) {\n            userInternal.phoneNumber = null;\n          }\n          return [4 /*yield*/, userInternal.auth._persistUserIfCurrent(userInternal)];\n        case 4:\n          _d.sent();\n          return [2 /*return*/, userInternal];\n      }\n    });\n  });\n}\nfunction _link(user, credential, bypassAuthState) {\n  if (bypassAuthState === void 0) {\n    bypassAuthState = false;\n  }\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var response, _a, _b, _c, _d, _e;\n    return tslib.__generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = _logoutIfInvalidated;\n          _b = [user];\n          _d = (_c = credential)._linkToIdToken;\n          _e = [user.auth];\n          return [4 /*yield*/, user.getIdToken()];\n        case 1:\n          return [4 /*yield*/, _a.apply(void 0, _b.concat([_d.apply(_c, _e.concat([_f.sent()])), bypassAuthState]))];\n        case 2:\n          response = _f.sent();\n          return [2 /*return*/, UserCredentialImpl._forOperation(user, \"link\" /* OperationType.LINK */, response)];\n      }\n    });\n  });\n}\nfunction _assertLinkedStatus(expected, user, provider) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var providerIds, code;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, _reloadWithoutSaving(user)];\n        case 1:\n          _a.sent();\n          providerIds = providerDataAsNames(user.providerData);\n          code = expected === false ? \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */ : \"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */;\n          _assert(providerIds.has(provider) === expected, user.auth, code);\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _reauthenticate(user, credential, bypassAuthState) {\n  if (bypassAuthState === void 0) {\n    bypassAuthState = false;\n  }\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var auth, operationType, response, parsed, localId, e_1;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          auth = user.auth;\n          operationType = \"reauthenticate\" /* OperationType.REAUTHENTICATE */;\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState)];\n        case 2:\n          response = _a.sent();\n          _assert(response.idToken, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          parsed = _parseToken(response.idToken);\n          _assert(parsed, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          localId = parsed.sub;\n          _assert(user.uid === localId, auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n          return [2 /*return*/, UserCredentialImpl._forOperation(user, operationType, response)];\n        case 3:\n          e_1 = _a.sent();\n          // Convert user deleted error into user mismatch\n          if ((e_1 === null || e_1 === void 0 ? void 0 : e_1.code) === \"auth/\".concat(\"user-not-found\" /* AuthErrorCode.USER_DELETED */)) {\n            _fail(auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n          }\n\n          throw e_1;\n        case 4:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _signInWithCredential(auth, credential, bypassAuthState) {\n  if (bypassAuthState === void 0) {\n    bypassAuthState = false;\n  }\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var operationType, response, userCredential;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          operationType = \"signIn\" /* OperationType.SIGN_IN */;\n          return [4 /*yield*/, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential)];\n        case 1:\n          response = _a.sent();\n          return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(auth, operationType, response)];\n        case 2:\n          userCredential = _a.sent();\n          if (!!bypassAuthState) return [3 /*break*/, 4];\n          return [4 /*yield*/, auth._updateCurrentUser(userCredential.user)];\n        case 3:\n          _a.sent();\n          _a.label = 4;\n        case 4:\n          return [2 /*return*/, userCredential];\n      }\n    });\n  });\n}\n/**\r\n * Asynchronously signs in with the given credentials.\r\n *\r\n * @remarks\r\n * An {@link AuthProvider} can be used to generate the credential.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */\nfunction signInWithCredential(auth, credential) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _signInWithCredential(_castAuth(auth), credential)];\n    });\n  });\n}\n/**\r\n * Links the user account with the given credentials.\r\n *\r\n * @remarks\r\n * An {@link AuthProvider} can be used to generate the credential.\r\n *\r\n * @param user - The user.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */\nfunction linkWithCredential(user, credential) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var userInternal;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          userInternal = util.getModularInstance(user);\n          return [4 /*yield*/, _assertLinkedStatus(false, userInternal, credential.providerId)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, _link(userInternal, credential)];\n      }\n    });\n  });\n}\n/**\r\n * Re-authenticates a user using a fresh credential.\r\n *\r\n * @remarks\r\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\r\n * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\r\n * or a `TOKEN_EXPIRED` error.\r\n *\r\n * @param user - The user.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */\nfunction reauthenticateWithCredential(user, credential) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _reauthenticate(util.getModularInstance(user), credential)];\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction signInWithCustomToken$1(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request))];\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Asynchronously signs in using a custom token.\r\n *\r\n * @remarks\r\n * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\r\n * be generated by an auth backend using the\r\n * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\r\n * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\r\n *\r\n * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param customToken - The custom token to sign in with.\r\n *\r\n * @public\r\n */\nfunction signInWithCustomToken(auth, customToken) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var authInternal, response, cred;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          authInternal = _castAuth(auth);\n          return [4 /*yield*/, signInWithCustomToken$1(authInternal, {\n            token: customToken,\n            returnSecureToken: true\n          })];\n        case 1:\n          response = _a.sent();\n          return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response)];\n        case 2:\n          cred = _a.sent();\n          return [4 /*yield*/, authInternal._updateCurrentUser(cred.user)];\n        case 3:\n          _a.sent();\n          return [2 /*return*/, cred];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar MultiFactorInfoImpl = /** @class */function () {\n  function MultiFactorInfoImpl(factorId, response) {\n    this.factorId = factorId;\n    this.uid = response.mfaEnrollmentId;\n    this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n    this.displayName = response.displayName;\n  }\n  MultiFactorInfoImpl._fromServerResponse = function (auth, enrollment) {\n    if ('phoneInfo' in enrollment) {\n      return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n    }\n    return _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  };\n\n  return MultiFactorInfoImpl;\n}();\nvar PhoneMultiFactorInfoImpl = /** @class */function (_super) {\n  tslib.__extends(PhoneMultiFactorInfoImpl, _super);\n  function PhoneMultiFactorInfoImpl(response) {\n    var _this = _super.call(this, \"phone\" /* FactorId.PHONE */, response) || this;\n    _this.phoneNumber = response.phoneInfo;\n    return _this;\n  }\n  PhoneMultiFactorInfoImpl._fromServerResponse = function (_auth, enrollment) {\n    return new PhoneMultiFactorInfoImpl(enrollment);\n  };\n  return PhoneMultiFactorInfoImpl;\n}(MultiFactorInfoImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\n  var _a;\n  _assert(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */);\n  _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' || actionCodeSettings.dynamicLinkDomain.length > 0, auth, \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */);\n  request.continueUrl = actionCodeSettings.url;\n  request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n  request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n  if (actionCodeSettings.iOS) {\n    _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */);\n    request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n  }\n  if (actionCodeSettings.android) {\n    _assert(actionCodeSettings.android.packageName.length > 0, auth, \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */);\n    request.androidInstallApp = actionCodeSettings.android.installApp;\n    request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;\n    request.androidPackageName = actionCodeSettings.android.packageName;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Sends a password reset email to the given email address.\r\n *\r\n * @remarks\r\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\r\n * the email sent to the user, along with the new password specified by the user.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain code from user.\r\n * await confirmPasswordReset('user@example.com', code);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\nfunction sendPasswordResetEmail(auth, email, actionCodeSettings) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var authModular, request;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          authModular = util.getModularInstance(auth);\n          request = {\n            requestType: \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */,\n            email: email\n          };\n          if (actionCodeSettings) {\n            _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);\n          }\n          return [4 /*yield*/, sendPasswordResetEmail$1(authModular, request)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Completes the password reset process, given a confirmation code and new password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A confirmation code sent to the user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */\nfunction confirmPasswordReset(auth, oobCode, newPassword) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, resetPassword(util.getModularInstance(auth), {\n            oobCode: oobCode,\n            newPassword: newPassword\n          })];\n        case 1:\n          _a.sent();\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */\nfunction applyActionCode(auth, oobCode) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, applyActionCode$1(util.getModularInstance(auth), {\n            oobCode: oobCode\n          })];\n        case 1:\n          _a.sent();\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns metadata about the code.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */\nfunction checkActionCode(auth, oobCode) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var authModular, response, operation, multiFactorInfo;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          authModular = util.getModularInstance(auth);\n          return [4 /*yield*/, resetPassword(authModular, {\n            oobCode: oobCode\n          })];\n        case 1:\n          response = _a.sent();\n          operation = response.requestType;\n          _assert(operation, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          switch (operation) {\n            case \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */:\n              break;\n            case \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */:\n              _assert(response.newEmail, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n              break;\n            case \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */:\n              _assert(response.mfaInfo, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            // fall through\n            default:\n              _assert(response.email, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          }\n\n          multiFactorInfo = null;\n          if (response.mfaInfo) {\n            multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\n          }\n          return [2 /*return*/, {\n            data: {\n              email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.newEmail : response.email) || null,\n              previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.email : response.newEmail) || null,\n              multiFactorInfo: multiFactorInfo\n            },\n            operation: operation\n          }];\n      }\n    });\n  });\n}\n/**\r\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns the user's email address if valid.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param code - A verification code sent to the user.\r\n *\r\n * @public\r\n */\nfunction verifyPasswordResetCode(auth, code) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var data;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, checkActionCode(util.getModularInstance(auth), code)];\n        case 1:\n          data = _a.sent().data;\n          // Email should always be present since a code was sent to it\n          return [2 /*return*/, data.email];\n      }\n    });\n  });\n}\n/**\r\n * Creates a new user account associated with the specified email address and password.\r\n *\r\n * @remarks\r\n * On successful creation of the user account, this user will also be signed in to your application.\r\n *\r\n * User account creation can fail if the account already exists or the password is invalid.\r\n *\r\n * Note: The email address acts as a unique identifier for the user and enables an email-based\r\n * password reset. This function will create a new user account and set the initial user password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param password - The user's chosen password.\r\n *\r\n * @public\r\n */\nfunction createUserWithEmailAndPassword(auth, email, password) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var authInternal, response, userCredential;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          authInternal = _castAuth(auth);\n          return [4 /*yield*/, signUp(authInternal, {\n            returnSecureToken: true,\n            email: email,\n            password: password\n          })];\n        case 1:\n          response = _a.sent();\n          return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response)];\n        case 2:\n          userCredential = _a.sent();\n          return [4 /*yield*/, authInternal._updateCurrentUser(userCredential.user)];\n        case 3:\n          _a.sent();\n          return [2 /*return*/, userCredential];\n      }\n    });\n  });\n}\n/**\r\n * Asynchronously signs in using an email and password.\r\n *\r\n * @remarks\r\n * Fails with an error if the email address and password do not match.\r\n *\r\n * Note: The user's password is NOT the password used to access the user's email account. The\r\n * email address serves as a unique identifier for the user, and the password is used to access\r\n * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The users email address.\r\n * @param password - The users password.\r\n *\r\n * @public\r\n */\nfunction signInWithEmailAndPassword(auth, email, password) {\n  return signInWithCredential(util.getModularInstance(auth), EmailAuthProvider.credential(email, password));\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Sends a sign-in email link to the user with the specified email.\r\n *\r\n * @remarks\r\n * The sign-in operation has to always be completed in the app unlike other out of band email\r\n * actions (password reset and email verifications). This is because, at the end of the flow,\r\n * the user is expected to be signed in and their Auth state persisted within the app.\r\n *\r\n * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\r\n * address and the email link supplied in the email sent to the user.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain emailLink from the user.\r\n * if(isSignInWithEmailLink(auth, emailLink)) {\r\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\r\n * }\r\n * ```\r\n *\r\n * @param authInternal - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\nfunction sendSignInLinkToEmail(auth, email, actionCodeSettings) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var authModular, request;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          authModular = util.getModularInstance(auth);\n          request = {\n            requestType: \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */,\n            email: email\n          };\n          _assert(actionCodeSettings.handleCodeInApp, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n          if (actionCodeSettings) {\n            _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);\n          }\n          return [4 /*yield*/, sendSignInLinkToEmail$1(authModular, request)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param emailLink - The link sent to the user's email address.\r\n *\r\n * @public\r\n */\nfunction isSignInWithEmailLink(auth, emailLink) {\n  var actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n  return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n}\n/**\r\n * Asynchronously signs in using an email and sign-in email link.\r\n *\r\n * @remarks\r\n * If no link is passed, the link is inferred from the current URL.\r\n *\r\n * Fails with an error if the email address is invalid or OTP in email link expires.\r\n *\r\n * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain emailLink from the user.\r\n * if(isSignInWithEmailLink(auth, emailLink)) {\r\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\r\n * }\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param emailLink - The link sent to the user's email address.\r\n *\r\n * @public\r\n */\nfunction signInWithEmailLink(auth, email, emailLink) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var authModular, credential;\n    return tslib.__generator(this, function (_a) {\n      authModular = util.getModularInstance(auth);\n      credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());\n      // Check if the tenant ID in the email link matches the tenant ID on Auth\n      // instance.\n      _assert(credential._tenantId === (authModular.tenantId || null), authModular, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n      return [2 /*return*/, signInWithCredential(authModular, credential)];\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction createAuthUri(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:createAuthUri\" /* Endpoint.CREATE_AUTH_URI */, _addTidIfNecessary(auth, request))];\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Gets the list of possible sign in methods for the given email address.\r\n *\r\n * @remarks\r\n * This is useful to differentiate methods of sign-in for the same provider, eg.\r\n * {@link EmailAuthProvider} which has 2 methods of sign-in,\r\n * {@link SignInMethod}.EMAIL_PASSWORD and\r\n * {@link SignInMethod}.EMAIL_LINK.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n *\r\n * @public\r\n */\nfunction fetchSignInMethodsForEmail(auth, email) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var continueUri, request, signinMethods;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\n          request = {\n            identifier: email,\n            continueUri: continueUri\n          };\n          return [4 /*yield*/, createAuthUri(util.getModularInstance(auth), request)];\n        case 1:\n          signinMethods = _a.sent().signinMethods;\n          return [2 /*return*/, signinMethods || []];\n      }\n    });\n  });\n}\n/**\r\n * Sends a verification email to a user.\r\n *\r\n * @remarks\r\n * The verification process is completed by calling {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendEmailVerification(user, actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\nfunction sendEmailVerification(user, actionCodeSettings) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var userInternal, idToken, request, email;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          userInternal = util.getModularInstance(user);\n          return [4 /*yield*/, user.getIdToken()];\n        case 1:\n          idToken = _a.sent();\n          request = {\n            requestType: \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */,\n            idToken: idToken\n          };\n          if (actionCodeSettings) {\n            _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n          }\n          return [4 /*yield*/, sendEmailVerification$1(userInternal.auth, request)];\n        case 2:\n          email = _a.sent().email;\n          if (!(email !== user.email)) return [3 /*break*/, 4];\n          return [4 /*yield*/, user.reload()];\n        case 3:\n          _a.sent();\n          _a.label = 4;\n        case 4:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Sends a verification email to a new email address.\r\n *\r\n * @remarks\r\n * The user's email will be updated to the new one after being verified.\r\n *\r\n * If you have a custom email action handler, you can complete the verification process by calling\r\n * {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address to be verified before update.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\nfunction verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var userInternal, idToken, request, email;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          userInternal = util.getModularInstance(user);\n          return [4 /*yield*/, user.getIdToken()];\n        case 1:\n          idToken = _a.sent();\n          request = {\n            requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */,\n            idToken: idToken,\n            newEmail: newEmail\n          };\n          if (actionCodeSettings) {\n            _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n          }\n          return [4 /*yield*/, verifyAndChangeEmail(userInternal.auth, request)];\n        case 2:\n          email = _a.sent().email;\n          if (!(email !== user.email)) return [3 /*break*/, 4];\n          // If the local copy of the email on user is outdated, reload the\n          // user.\n          return [4 /*yield*/, user.reload()];\n        case 3:\n          // If the local copy of the email on user is outdated, reload the\n          // user.\n          _a.sent();\n          _a.label = 4;\n        case 4:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction updateProfile$1(auth, request) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request)];\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Updates a user's profile data.\r\n *\r\n * @param user - The user.\r\n * @param profile - The profile's `displayName` and `photoURL` to update.\r\n *\r\n * @public\r\n */\nfunction updateProfile(user, _a) {\n  var displayName = _a.displayName,\n    photoUrl = _a.photoURL;\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var userInternal, idToken, profileRequest, response, passwordProvider;\n    return tslib.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (displayName === undefined && photoUrl === undefined) {\n            return [2 /*return*/];\n          }\n\n          userInternal = util.getModularInstance(user);\n          return [4 /*yield*/, userInternal.getIdToken()];\n        case 1:\n          idToken = _b.sent();\n          profileRequest = {\n            idToken: idToken,\n            displayName: displayName,\n            photoUrl: photoUrl,\n            returnSecureToken: true\n          };\n          return [4 /*yield*/, _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest))];\n        case 2:\n          response = _b.sent();\n          userInternal.displayName = response.displayName || null;\n          userInternal.photoURL = response.photoUrl || null;\n          passwordProvider = userInternal.providerData.find(function (_a) {\n            var providerId = _a.providerId;\n            return providerId === \"password\" /* ProviderId.PASSWORD */;\n          });\n\n          if (passwordProvider) {\n            passwordProvider.displayName = userInternal.displayName;\n            passwordProvider.photoURL = userInternal.photoURL;\n          }\n          return [4 /*yield*/, userInternal._updateTokensIfNecessary(response)];\n        case 3:\n          _b.sent();\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Updates the user's email address.\r\n *\r\n * @remarks\r\n * An email will be sent to the original email address (if it was set) that allows to revoke the\r\n * email address change, in order to protect them from account hijacking.\r\n *\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address.\r\n *\r\n * @public\r\n */\nfunction updateEmail(user, newEmail) {\n  return updateEmailOrPassword(util.getModularInstance(user), newEmail, null);\n}\n/**\r\n * Updates the user's password.\r\n *\r\n * @remarks\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */\nfunction updatePassword(user, newPassword) {\n  return updateEmailOrPassword(util.getModularInstance(user), null, newPassword);\n}\nfunction updateEmailOrPassword(user, email, password) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var auth, idToken, request, response;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          auth = user.auth;\n          return [4 /*yield*/, user.getIdToken()];\n        case 1:\n          idToken = _a.sent();\n          request = {\n            idToken: idToken,\n            returnSecureToken: true\n          };\n          if (email) {\n            request.email = email;\n          }\n          if (password) {\n            request.password = password;\n          }\n          return [4 /*yield*/, _logoutIfInvalidated(user, updateEmailPassword(auth, request))];\n        case 2:\n          response = _a.sent();\n          return [4 /*yield*/, user._updateTokensIfNecessary(response, /* reload */true)];\n        case 3:\n          _a.sent();\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Parse the `AdditionalUserInfo` from the ID token response.\r\n *\r\n */\nfunction _fromIdTokenResponse(idTokenResponse) {\n  var _a, _b;\n  if (!idTokenResponse) {\n    return null;\n  }\n  var providerId = idTokenResponse.providerId;\n  var profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};\n  var isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\" /* IdTokenResponseKind.SignupNewUser */;\n  if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {\n    var signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b['sign_in_provider'];\n    if (signInProvider) {\n      var filteredProviderId = signInProvider !== \"anonymous\" /* ProviderId.ANONYMOUS */ && signInProvider !== \"custom\" /* ProviderId.CUSTOM */ ? signInProvider : null;\n      // Uses generic class in accordance with the legacy SDK.\n      return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n    }\n  }\n  if (!providerId) {\n    return null;\n  }\n  switch (providerId) {\n    case \"facebook.com\" /* ProviderId.FACEBOOK */:\n      return new FacebookAdditionalUserInfo(isNewUser, profile);\n    case \"github.com\" /* ProviderId.GITHUB */:\n      return new GithubAdditionalUserInfo(isNewUser, profile);\n    case \"google.com\" /* ProviderId.GOOGLE */:\n      return new GoogleAdditionalUserInfo(isNewUser, profile);\n    case \"twitter.com\" /* ProviderId.TWITTER */:\n      return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\n    case \"custom\" /* ProviderId.CUSTOM */:\n    case \"anonymous\" /* ProviderId.ANONYMOUS */:\n      return new GenericAdditionalUserInfo(isNewUser, null);\n    default:\n      return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n  }\n}\nvar GenericAdditionalUserInfo = /** @class */function () {\n  function GenericAdditionalUserInfo(isNewUser, providerId, profile) {\n    if (profile === void 0) {\n      profile = {};\n    }\n    this.isNewUser = isNewUser;\n    this.providerId = providerId;\n    this.profile = profile;\n  }\n  return GenericAdditionalUserInfo;\n}();\nvar FederatedAdditionalUserInfoWithUsername = /** @class */function (_super) {\n  tslib.__extends(FederatedAdditionalUserInfoWithUsername, _super);\n  function FederatedAdditionalUserInfoWithUsername(isNewUser, providerId, profile, username) {\n    var _this = _super.call(this, isNewUser, providerId, profile) || this;\n    _this.username = username;\n    return _this;\n  }\n  return FederatedAdditionalUserInfoWithUsername;\n}(GenericAdditionalUserInfo);\nvar FacebookAdditionalUserInfo = /** @class */function (_super) {\n  tslib.__extends(FacebookAdditionalUserInfo, _super);\n  function FacebookAdditionalUserInfo(isNewUser, profile) {\n    return _super.call(this, isNewUser, \"facebook.com\" /* ProviderId.FACEBOOK */, profile) || this;\n  }\n  return FacebookAdditionalUserInfo;\n}(GenericAdditionalUserInfo);\nvar GithubAdditionalUserInfo = /** @class */function (_super) {\n  tslib.__extends(GithubAdditionalUserInfo, _super);\n  function GithubAdditionalUserInfo(isNewUser, profile) {\n    return _super.call(this, isNewUser, \"github.com\" /* ProviderId.GITHUB */, profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === 'string' ? profile === null || profile === void 0 ? void 0 : profile.login : null) || this;\n  }\n  return GithubAdditionalUserInfo;\n}(FederatedAdditionalUserInfoWithUsername);\nvar GoogleAdditionalUserInfo = /** @class */function (_super) {\n  tslib.__extends(GoogleAdditionalUserInfo, _super);\n  function GoogleAdditionalUserInfo(isNewUser, profile) {\n    return _super.call(this, isNewUser, \"google.com\" /* ProviderId.GOOGLE */, profile) || this;\n  }\n  return GoogleAdditionalUserInfo;\n}(GenericAdditionalUserInfo);\nvar TwitterAdditionalUserInfo = /** @class */function (_super) {\n  tslib.__extends(TwitterAdditionalUserInfo, _super);\n  function TwitterAdditionalUserInfo(isNewUser, profile, screenName) {\n    return _super.call(this, isNewUser, \"twitter.com\" /* ProviderId.TWITTER */, profile, screenName) || this;\n  }\n  return TwitterAdditionalUserInfo;\n}(FederatedAdditionalUserInfoWithUsername);\n/**\r\n * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\r\n *\r\n * @param userCredential - The user credential.\r\n *\r\n * @public\r\n */\nfunction getAdditionalUserInfo(userCredential) {\n  var _a = userCredential,\n    user = _a.user,\n    _tokenResponse = _a._tokenResponse;\n  if (user.isAnonymous && !_tokenResponse) {\n    // Handle the special case where signInAnonymously() gets called twice.\n    // No network call is made so there's nothing to actually fill this in\n    return {\n      providerId: null,\n      isNewUser: false,\n      profile: null\n    };\n  }\n  return _fromIdTokenResponse(_tokenResponse);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Non-optional auth methods.\n/**\r\n * Changes the type of persistence on the {@link Auth} instance for the currently saved\r\n * `Auth` session and applies this type of persistence for future sign-in requests, including\r\n * sign-in with redirect requests.\r\n *\r\n * @remarks\r\n * This makes it easy for a user signing in to specify whether their session should be\r\n * remembered or not. It also makes it easier to never persist the `Auth` state for applications\r\n * that are shared by other users or have sensitive data.\r\n *\r\n * @example\r\n * ```javascript\r\n * setPersistence(auth, browserSessionPersistence);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param persistence - The {@link Persistence} to use.\r\n * @returns A `Promise` that resolves once the persistence change has completed\r\n *\r\n * @public\r\n */\nfunction setPersistence(auth, persistence) {\n  return util.getModularInstance(auth).setPersistence(persistence);\n}\n/**\r\n * Adds an observer for changes to the signed-in user's ID token.\r\n *\r\n * @remarks\r\n * This includes sign-in, sign-out, and token refresh events.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param nextOrObserver - callback triggered on change.\r\n * @param error - Deprecated. This callback is never triggered. Errors\r\n * on signing in/out can be caught in promises returned from\r\n * sign-in/sign-out functions.\r\n * @param completed - Deprecated. This callback is never triggered.\r\n *\r\n * @public\r\n */\nfunction onIdTokenChanged(auth, nextOrObserver, error, completed) {\n  return util.getModularInstance(auth).onIdTokenChanged(nextOrObserver, error, completed);\n}\n/**\r\n * Adds a blocking callback that runs before an auth state change\r\n * sets a new user.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param callback - callback triggered before new user value is set.\r\n *   If this throws, it blocks the user from being set.\r\n * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\r\n *   callback throws, allowing you to undo any side effects.\r\n */\nfunction beforeAuthStateChanged(auth, callback, onAbort) {\n  return util.getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);\n}\n/**\r\n * Adds an observer for changes to the user's sign-in state.\r\n *\r\n * @remarks\r\n * To keep the old behavior, see {@link onIdTokenChanged}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param nextOrObserver - callback triggered on change.\r\n * @param error - Deprecated. This callback is never triggered. Errors\r\n * on signing in/out can be caught in promises returned from\r\n * sign-in/sign-out functions.\r\n * @param completed - Deprecated. This callback is never triggered.\r\n *\r\n * @public\r\n */\nfunction onAuthStateChanged(auth, nextOrObserver, error, completed) {\n  return util.getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);\n}\n/**\r\n * Sets the current language to the default device/browser preference.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\nfunction useDeviceLanguage(auth) {\n  util.getModularInstance(auth).useDeviceLanguage();\n}\n/**\r\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the\r\n * {@link Auth} instance.\r\n *\r\n * @remarks\r\n * A new instance copy of the user provided will be made and set as currentUser.\r\n *\r\n * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\r\n * like other sign in methods.\r\n *\r\n * The operation fails with an error if the user to be updated belongs to a different Firebase\r\n * project.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param user - The new {@link User}.\r\n *\r\n * @public\r\n */\nfunction updateCurrentUser(auth, user) {\n  return util.getModularInstance(auth).updateCurrentUser(user);\n}\n/**\r\n * Signs out the current user.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\nfunction signOut(auth) {\n  return util.getModularInstance(auth).signOut();\n}\n/**\r\n * Deletes and signs out the user.\r\n *\r\n * @remarks\r\n * Important: this is a security-sensitive operation that requires the user to have recently\r\n * signed in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\nfunction deleteUser(user) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      return [2 /*return*/, util.getModularInstance(user).delete()];\n    });\n  });\n}\nvar MultiFactorSessionImpl = /** @class */function () {\n  function MultiFactorSessionImpl(type, credential, auth) {\n    this.type = type;\n    this.credential = credential;\n    this.auth = auth;\n  }\n  MultiFactorSessionImpl._fromIdtoken = function (idToken, auth) {\n    return new MultiFactorSessionImpl(\"enroll\" /* MultiFactorSessionType.ENROLL */, idToken, auth);\n  };\n  MultiFactorSessionImpl._fromMfaPendingCredential = function (mfaPendingCredential) {\n    return new MultiFactorSessionImpl(\"signin\" /* MultiFactorSessionType.SIGN_IN */, mfaPendingCredential);\n  };\n  MultiFactorSessionImpl.prototype.toJSON = function () {\n    var _a;\n    var key = this.type === \"enroll\" /* MultiFactorSessionType.ENROLL */ ? 'idToken' : 'pendingCredential';\n    return {\n      multiFactorSession: (_a = {}, _a[key] = this.credential, _a)\n    };\n  };\n  MultiFactorSessionImpl.fromJSON = function (obj) {\n    var _a, _b;\n    if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {\n      if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {\n        return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\n      } else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {\n        return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\n      }\n    }\n    return null;\n  };\n  return MultiFactorSessionImpl;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar MultiFactorResolverImpl = /** @class */function () {\n  function MultiFactorResolverImpl(session, hints, signInResolver) {\n    this.session = session;\n    this.hints = hints;\n    this.signInResolver = signInResolver;\n  }\n  /** @internal */\n  MultiFactorResolverImpl._fromError = function (authExtern, error) {\n    var _this = this;\n    var auth = _castAuth(authExtern);\n    var serverResponse = error.customData._serverResponse;\n    var hints = (serverResponse.mfaInfo || []).map(function (enrollment) {\n      return MultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n    });\n    _assert(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    var session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\n    return new MultiFactorResolverImpl(session, hints, function (assertion) {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        var mfaResponse, idTokenResponse, _a, userCredential;\n        return tslib.__generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              return [4 /*yield*/, assertion._process(auth, session)];\n            case 1:\n              mfaResponse = _b.sent();\n              // Clear out the unneeded fields from the old login response\n              delete serverResponse.mfaInfo;\n              delete serverResponse.mfaPendingCredential;\n              idTokenResponse = tslib.__assign(tslib.__assign({}, serverResponse), {\n                idToken: mfaResponse.idToken,\n                refreshToken: mfaResponse.refreshToken\n              });\n              _a = error.operationType;\n              switch (_a) {\n                case \"signIn\" /* OperationType.SIGN_IN */:\n                  return [3 /*break*/, 2];\n                case \"reauthenticate\" /* OperationType.REAUTHENTICATE */:\n                  return [3 /*break*/, 5];\n              }\n              return [3 /*break*/, 6];\n            case 2:\n              return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse)];\n            case 3:\n              userCredential = _b.sent();\n              return [4 /*yield*/, auth._updateCurrentUser(userCredential.user)];\n            case 4:\n              _b.sent();\n              return [2 /*return*/, userCredential];\n            case 5:\n              _assert(error.user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n              return [2 /*return*/, UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse)];\n            case 6:\n              _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n              _b.label = 7;\n            case 7:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  MultiFactorResolverImpl.prototype.resolveSignIn = function (assertionExtern) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var assertion;\n      return tslib.__generator(this, function (_a) {\n        assertion = assertionExtern;\n        return [2 /*return*/, this.signInResolver(assertion)];\n      });\n    });\n  };\n  return MultiFactorResolverImpl;\n}();\n/**\r\n * Provides a {@link MultiFactorResolver} suitable for completion of a\r\n * multi-factor flow.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param error - The {@link MultiFactorError} raised during a sign-in, or\r\n * reauthentication operation.\r\n *\r\n * @public\r\n */\nfunction getMultiFactorResolver(auth, error) {\n  var _a;\n  var authModular = util.getModularInstance(auth);\n  var errorInternal = error;\n  _assert(error.customData.operationType, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n  _assert((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n  return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction startEnrollPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n}\nfunction finalizeEnrollPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n}\nfunction withdrawMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:withdraw\" /* Endpoint.WITHDRAW_MFA */, _addTidIfNecessary(auth, request));\n}\nvar MultiFactorUserImpl = /** @class */function () {\n  function MultiFactorUserImpl(user) {\n    var _this = this;\n    this.user = user;\n    this.enrolledFactors = [];\n    user._onReload(function (userInfo) {\n      if (userInfo.mfaInfo) {\n        _this.enrolledFactors = userInfo.mfaInfo.map(function (enrollment) {\n          return MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment);\n        });\n      }\n    });\n  }\n  MultiFactorUserImpl._fromUser = function (user) {\n    return new MultiFactorUserImpl(user);\n  };\n  MultiFactorUserImpl.prototype.getSession = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var _a, _b;\n      return tslib.__generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = (_a = MultiFactorSessionImpl)._fromIdtoken;\n            return [4 /*yield*/, this.user.getIdToken()];\n          case 1:\n            return [2 /*return*/, _b.apply(_a, [_c.sent(), this.user.auth])];\n        }\n      });\n    });\n  };\n  MultiFactorUserImpl.prototype.enroll = function (assertionExtern, displayName) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var assertion, session, finalizeMfaResponse;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            assertion = assertionExtern;\n            return [4 /*yield*/, this.getSession()];\n          case 1:\n            session = _a.sent();\n            return [4 /*yield*/, _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName))];\n          case 2:\n            finalizeMfaResponse = _a.sent();\n            // New tokens will be issued after enrollment of the new second factors.\n            // They need to be updated on the user.\n            return [4 /*yield*/, this.user._updateTokensIfNecessary(finalizeMfaResponse)];\n          case 3:\n            // New tokens will be issued after enrollment of the new second factors.\n            // They need to be updated on the user.\n            _a.sent();\n            // The user needs to be reloaded to get the new multi-factor information\n            // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n            // will be updated.\n            return [2 /*return*/, this.user.reload()];\n        }\n      });\n    });\n  };\n  MultiFactorUserImpl.prototype.unenroll = function (infoOrUid) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var mfaEnrollmentId, idToken, idTokenResponse, e_1;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n            return [4 /*yield*/, this.user.getIdToken()];\n          case 1:\n            idToken = _a.sent();\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 6,, 7]);\n            return [4 /*yield*/, _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\n              idToken: idToken,\n              mfaEnrollmentId: mfaEnrollmentId\n            }))];\n          case 3:\n            idTokenResponse = _a.sent();\n            // Remove the second factor from the user's list.\n            this.enrolledFactors = this.enrolledFactors.filter(function (_a) {\n              var uid = _a.uid;\n              return uid !== mfaEnrollmentId;\n            });\n            // Depending on whether the backend decided to revoke the user's session,\n            // the tokenResponse may be empty. If the tokens were not updated (and they\n            // are now invalid), reloading the user will discover this and invalidate\n            // the user's state accordingly.\n            return [4 /*yield*/, this.user._updateTokensIfNecessary(idTokenResponse)];\n          case 4:\n            // Depending on whether the backend decided to revoke the user's session,\n            // the tokenResponse may be empty. If the tokens were not updated (and they\n            // are now invalid), reloading the user will discover this and invalidate\n            // the user's state accordingly.\n            _a.sent();\n            return [4 /*yield*/, this.user.reload()];\n          case 5:\n            _a.sent();\n            return [3 /*break*/, 7];\n          case 6:\n            e_1 = _a.sent();\n            throw e_1;\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return MultiFactorUserImpl;\n}();\nvar multiFactorUserCache = new WeakMap();\n/**\r\n * The {@link MultiFactorUser} corresponding to the user.\r\n *\r\n * @remarks\r\n * This is used to access all multi-factor properties and operations related to the user.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\nfunction multiFactor(user) {\n  var userModular = util.getModularInstance(user);\n  if (!multiFactorUserCache.has(userModular)) {\n    multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\n  }\n  return multiFactorUserCache.get(userModular);\n}\nvar name = \"@firebase/auth\";\nvar version = \"0.21.5\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar AuthInterop = /** @class */function () {\n  function AuthInterop(auth) {\n    this.auth = auth;\n    this.internalListeners = new Map();\n  }\n  AuthInterop.prototype.getUid = function () {\n    var _a;\n    this.assertAuthConfigured();\n    return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;\n  };\n  AuthInterop.prototype.getToken = function (forceRefresh) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var accessToken;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.assertAuthConfigured();\n            return [4 /*yield*/, this.auth._initializationPromise];\n          case 1:\n            _a.sent();\n            if (!this.auth.currentUser) {\n              return [2 /*return*/, null];\n            }\n            return [4 /*yield*/, this.auth.currentUser.getIdToken(forceRefresh)];\n          case 2:\n            accessToken = _a.sent();\n            return [2 /*return*/, {\n              accessToken: accessToken\n            }];\n        }\n      });\n    });\n  };\n  AuthInterop.prototype.addAuthTokenListener = function (listener) {\n    this.assertAuthConfigured();\n    if (this.internalListeners.has(listener)) {\n      return;\n    }\n    var unsubscribe = this.auth.onIdTokenChanged(function (user) {\n      listener((user === null || user === void 0 ? void 0 : user.stsTokenManager.accessToken) || null);\n    });\n    this.internalListeners.set(listener, unsubscribe);\n    this.updateProactiveRefresh();\n  };\n  AuthInterop.prototype.removeAuthTokenListener = function (listener) {\n    this.assertAuthConfigured();\n    var unsubscribe = this.internalListeners.get(listener);\n    if (!unsubscribe) {\n      return;\n    }\n    this.internalListeners.delete(listener);\n    unsubscribe();\n    this.updateProactiveRefresh();\n  };\n  AuthInterop.prototype.assertAuthConfigured = function () {\n    _assert(this.auth._initializationPromise, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);\n  };\n\n  AuthInterop.prototype.updateProactiveRefresh = function () {\n    if (this.internalListeners.size > 0) {\n      this.auth._startProactiveRefresh();\n    } else {\n      this.auth._stopProactiveRefresh();\n    }\n  };\n  return AuthInterop;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getVersionForPlatform(clientPlatform) {\n  switch (clientPlatform) {\n    case \"Node\" /* ClientPlatform.NODE */:\n      return 'node';\n    case \"ReactNative\" /* ClientPlatform.REACT_NATIVE */:\n      return 'rn';\n    case \"Worker\" /* ClientPlatform.WORKER */:\n      return 'webworker';\n    case \"Cordova\" /* ClientPlatform.CORDOVA */:\n      return 'cordova';\n    default:\n      return undefined;\n  }\n}\n/** @internal */\nfunction registerAuth(clientPlatform) {\n  app._registerComponent(new component.Component(\"auth\" /* _ComponentName.AUTH */, function (container, _a) {\n    var deps = _a.options;\n    var app = container.getProvider('app').getImmediate();\n    var heartbeatServiceProvider = container.getProvider('heartbeat');\n    var _b = app.options,\n      apiKey = _b.apiKey,\n      authDomain = _b.authDomain;\n    return function (app, heartbeatServiceProvider) {\n      _assert(apiKey && !apiKey.includes(':'), \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */, {\n        appName: app.name\n      });\n      // Auth domain is optional if IdP sign in isn't being used\n      _assert(!(authDomain === null || authDomain === void 0 ? void 0 : authDomain.includes(':')), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, {\n        appName: app.name\n      });\n      var config = {\n        apiKey: apiKey,\n        authDomain: authDomain,\n        clientPlatform: clientPlatform,\n        apiHost: \"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */,\n        tokenApiHost: \"securetoken.googleapis.com\" /* DefaultConfig.TOKEN_API_HOST */,\n        apiScheme: \"https\" /* DefaultConfig.API_SCHEME */,\n        sdkClientVersion: _getClientVersion(clientPlatform)\n      };\n      var authInstance = new AuthImpl(app, heartbeatServiceProvider, config);\n      _initializeAuthInstance(authInstance, deps);\n      return authInstance;\n    }(app, heartbeatServiceProvider);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */)\n  /**\r\n   * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\r\n   * For why we do this, See go/firebase-next-auth-init\r\n   */.setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\n  /**\r\n   * Because all firebase products that depend on auth depend on auth-internal directly,\r\n   * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\r\n   */.setInstanceCreatedCallback(function (container, _instanceIdentifier, _instance) {\n    var authInternalProvider = container.getProvider(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */);\n    authInternalProvider.initialize();\n  }));\n  app._registerComponent(new component.Component(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */, function (container) {\n    var auth = _castAuth(container.getProvider(\"auth\" /* _ComponentName.AUTH */).getImmediate());\n    return function (auth) {\n      return new AuthInterop(auth);\n    }(auth);\n  }, \"PRIVATE\" /* ComponentType.PRIVATE */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\n  app.registerVersion(name, version, getVersionForPlatform(clientPlatform));\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  app.registerVersion(name, version, 'cjs5');\n}\nvar STORAGE_AVAILABLE_KEY = '__sak';\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An enum of factors that may be used for multifactor authentication.\r\n *\r\n * @public\r\n */\nvar FactorId = {\n  /** Phone as second factor */\n  PHONE: 'phone'\n};\n/**\r\n * Enumeration of supported providers.\r\n *\r\n * @public\r\n */\nvar ProviderId = {\n  /** Facebook provider ID */\n  FACEBOOK: 'facebook.com',\n  /** GitHub provider ID */\n  GITHUB: 'github.com',\n  /** Google provider ID */\n  GOOGLE: 'google.com',\n  /** Password provider */\n  PASSWORD: 'password',\n  /** Phone provider */\n  PHONE: 'phone',\n  /** Twitter provider ID */\n  TWITTER: 'twitter.com'\n};\n/**\r\n * Enumeration of supported sign-in methods.\r\n *\r\n * @public\r\n */\nvar SignInMethod = {\n  /** Email link sign in method */\n  EMAIL_LINK: 'emailLink',\n  /** Email/password sign in method */\n  EMAIL_PASSWORD: 'password',\n  /** Facebook sign in method */\n  FACEBOOK: 'facebook.com',\n  /** GitHub sign in method */\n  GITHUB: 'github.com',\n  /** Google sign in method */\n  GOOGLE: 'google.com',\n  /** Phone sign in method */\n  PHONE: 'phone',\n  /** Twitter sign in method */\n  TWITTER: 'twitter.com'\n};\n/**\r\n * Enumeration of supported operation types.\r\n *\r\n * @public\r\n */\nvar OperationType = {\n  /** Operation involving linking an additional provider to an already signed-in user. */\n  LINK: 'link',\n  /** Operation involving using a provider to reauthenticate an already signed-in user. */\n  REAUTHENTICATE: 'reauthenticate',\n  /** Operation involving signing in a user. */\n  SIGN_IN: 'signIn'\n};\n/**\r\n * An enumeration of the possible email action types.\r\n *\r\n * @public\r\n */\nvar ActionCodeOperation = {\n  /** The email link sign-in action. */\n  EMAIL_SIGNIN: 'EMAIL_SIGNIN',\n  /** The password reset action. */\n  PASSWORD_RESET: 'PASSWORD_RESET',\n  /** The email revocation action. */\n  RECOVER_EMAIL: 'RECOVER_EMAIL',\n  /** The revert second factor addition email action. */\n  REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\n  /** The revert second factor addition email action. */\n  VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\n  /** The email verification action. */\n  VERIFY_EMAIL: 'VERIFY_EMAIL'\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction startSignInPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:start\" /* Endpoint.START_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n}\nfunction finalizeSignInPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getRecaptchaParams(auth) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/recaptchaParams\" /* Endpoint.GET_RECAPTCHA_PARAM */)];\n        case 1:\n          return [2 /*return*/, _a.sent().recaptchaSiteKey || ''];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Lazy accessor for window, since the compat layer won't tree shake this out,\r\n * we need to make sure not to mess with window unless we have to\r\n */\nfunction _window() {\n  return window;\n}\nfunction _setWindowLocation(url) {\n  _window().location.href = url;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _isWorker() {\n  return typeof _window()['WorkerGlobalScope'] !== 'undefined' && typeof _window()['importScripts'] === 'function';\n}\nfunction _getActiveServiceWorker() {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var registration;\n    return tslib.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {\n            return [2 /*return*/, null];\n          }\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, navigator.serviceWorker.ready];\n        case 2:\n          registration = _b.sent();\n          return [2 /*return*/, registration.active];\n        case 3:\n          _b.sent();\n          return [2 /*return*/, null];\n        case 4:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nfunction _getServiceWorkerController() {\n  var _a;\n  return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;\n}\nfunction _getWorkerGlobalScope() {\n  return _isWorker() ? self : null;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getScriptParentElement() {\n  var _a, _b;\n  return (_b = (_a = document.getElementsByTagName('head')) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;\n}\nfunction _loadJS(url) {\n  // TODO: consider adding timeout support & cancellation\n  return new Promise(function (resolve, reject) {\n    var el = document.createElement('script');\n    el.setAttribute('src', url);\n    el.onload = resolve;\n    el.onerror = function (e) {\n      var error = _createError(\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      error.customData = e;\n      reject(error);\n    };\n    el.type = 'text/javascript';\n    el.charset = 'UTF-8';\n    getScriptParentElement().appendChild(el);\n  });\n}\nfunction _generateCallbackName(prefix) {\n  return \"__\".concat(prefix).concat(Math.floor(Math.random() * 1000000));\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _SOLVE_TIME_MS = 500;\nvar _EXPIRATION_TIME_MS = 60000;\nvar _WIDGET_ID_START = 1000000000000;\nvar MockReCaptcha = /** @class */function () {\n  function MockReCaptcha(auth) {\n    this.auth = auth;\n    this.counter = _WIDGET_ID_START;\n    this._widgets = new Map();\n  }\n  MockReCaptcha.prototype.render = function (container, parameters) {\n    var id = this.counter;\n    this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));\n    this.counter++;\n    return id;\n  };\n  MockReCaptcha.prototype.reset = function (optWidgetId) {\n    var _a;\n    var id = optWidgetId || _WIDGET_ID_START;\n    void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());\n    this._widgets.delete(id);\n  };\n  MockReCaptcha.prototype.getResponse = function (optWidgetId) {\n    var _a;\n    var id = optWidgetId || _WIDGET_ID_START;\n    return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || '';\n  };\n  MockReCaptcha.prototype.execute = function (optWidgetId) {\n    var _a;\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var id;\n      return tslib.__generator(this, function (_b) {\n        id = optWidgetId || _WIDGET_ID_START;\n        void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());\n        return [2 /*return*/, ''];\n      });\n    });\n  };\n  return MockReCaptcha;\n}();\nvar MockWidget = /** @class */function () {\n  function MockWidget(containerOrId, appName, params) {\n    var _this = this;\n    this.params = params;\n    this.timerId = null;\n    this.deleted = false;\n    this.responseToken = null;\n    this.clickHandler = function () {\n      _this.execute();\n    };\n    var container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;\n    _assert(container, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, {\n      appName: appName\n    });\n    this.container = container;\n    this.isVisible = this.params.size !== 'invisible';\n    if (this.isVisible) {\n      this.execute();\n    } else {\n      this.container.addEventListener('click', this.clickHandler);\n    }\n  }\n  MockWidget.prototype.getResponse = function () {\n    this.checkIfDeleted();\n    return this.responseToken;\n  };\n  MockWidget.prototype.delete = function () {\n    this.checkIfDeleted();\n    this.deleted = true;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n      this.timerId = null;\n    }\n    this.container.removeEventListener('click', this.clickHandler);\n  };\n  MockWidget.prototype.execute = function () {\n    var _this = this;\n    this.checkIfDeleted();\n    if (this.timerId) {\n      return;\n    }\n    this.timerId = window.setTimeout(function () {\n      _this.responseToken = generateRandomAlphaNumericString(50);\n      var _a = _this.params,\n        callback = _a.callback,\n        expiredCallback = _a[\"expired-callback\"];\n      if (callback) {\n        try {\n          callback(_this.responseToken);\n        } catch (e) {}\n      }\n      _this.timerId = window.setTimeout(function () {\n        _this.timerId = null;\n        _this.responseToken = null;\n        if (expiredCallback) {\n          try {\n            expiredCallback();\n          } catch (e) {}\n        }\n        if (_this.isVisible) {\n          _this.execute();\n        }\n      }, _EXPIRATION_TIME_MS);\n    }, _SOLVE_TIME_MS);\n  };\n  MockWidget.prototype.checkIfDeleted = function () {\n    if (this.deleted) {\n      throw new Error('reCAPTCHA mock was already deleted!');\n    }\n  };\n  return MockWidget;\n}();\nfunction generateRandomAlphaNumericString(len) {\n  var chars = [];\n  var allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  for (var i = 0; i < len; i++) {\n    chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));\n  }\n  return chars.join('');\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// ReCaptcha will load using the same callback, so the callback function needs\n// to be kept around\nvar _JSLOAD_CALLBACK = _generateCallbackName('rcb');\nvar NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\nvar RECAPTCHA_BASE = 'https://www.google.com/recaptcha/api.js?';\n/**\r\n * Loader for the GReCaptcha library. There should only ever be one of this.\r\n */\nvar ReCaptchaLoaderImpl = /** @class */function () {\n  function ReCaptchaLoaderImpl() {\n    var _a;\n    this.hostLanguage = '';\n    this.counter = 0;\n    /**\r\n     * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\r\n     * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\r\n     * `window.grecaptcha.render()` will not. Another load will add it.\r\n     */\n    this.librarySeparatelyLoaded = !!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render);\n  }\n  ReCaptchaLoaderImpl.prototype.load = function (auth, hl) {\n    var _this = this;\n    if (hl === void 0) {\n      hl = '';\n    }\n    _assert(isHostLanguageValid(hl), auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    if (this.shouldResolveImmediately(hl)) {\n      return Promise.resolve(_window().grecaptcha);\n    }\n    return new Promise(function (resolve, reject) {\n      var networkTimeout = _window().setTimeout(function () {\n        reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n      }, NETWORK_TIMEOUT_DELAY.get());\n      _window()[_JSLOAD_CALLBACK] = function () {\n        _window().clearTimeout(networkTimeout);\n        delete _window()[_JSLOAD_CALLBACK];\n        var recaptcha = _window().grecaptcha;\n        if (!recaptcha) {\n          reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n          return;\n        }\n        // Wrap the greptcha render function so that we know if the developer has\n        // called it separately\n        var render = recaptcha.render;\n        recaptcha.render = function (container, params) {\n          var widgetId = render(container, params);\n          _this.counter++;\n          return widgetId;\n        };\n        _this.hostLanguage = hl;\n        resolve(recaptcha);\n      };\n      var url = \"\".concat(RECAPTCHA_BASE, \"?\").concat(util.querystring({\n        onload: _JSLOAD_CALLBACK,\n        render: 'explicit',\n        hl: hl\n      }));\n      _loadJS(url).catch(function () {\n        clearTimeout(networkTimeout);\n        reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n      });\n    });\n  };\n\n  ReCaptchaLoaderImpl.prototype.clearedOneInstance = function () {\n    this.counter--;\n  };\n  ReCaptchaLoaderImpl.prototype.shouldResolveImmediately = function (hl) {\n    var _a;\n    // We can resolve immediately if:\n    //   • grecaptcha is already defined AND (\n    //     1. the requested language codes are the same OR\n    //     2. there exists already a ReCaptcha on the page\n    //     3. the library was already loaded by the app\n    // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\n    // that are already in the page\n    return !!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render) && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);\n  };\n  return ReCaptchaLoaderImpl;\n}();\nfunction isHostLanguageValid(hl) {\n  return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n}\nvar MockReCaptchaLoaderImpl = /** @class */function () {\n  function MockReCaptchaLoaderImpl() {}\n  MockReCaptchaLoaderImpl.prototype.load = function (auth) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        return [2 /*return*/, new MockReCaptcha(auth)];\n      });\n    });\n  };\n  MockReCaptchaLoaderImpl.prototype.clearedOneInstance = function () {};\n  return MockReCaptchaLoaderImpl;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\nvar DEFAULT_PARAMS = {\n  theme: 'light',\n  type: 'image'\n};\n/**\r\n * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\r\n *\r\n * @public\r\n */\nvar RecaptchaVerifier = /** @class */function () {\n  /**\r\n   *\r\n   * @param containerOrId - The reCAPTCHA container parameter.\r\n   *\r\n   * @remarks\r\n   * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\r\n   * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\r\n   * an element ID. The corresponding element must also must be in the DOM at the time of\r\n   * initialization.\r\n   *\r\n   * @param parameters - The optional reCAPTCHA parameters.\r\n   *\r\n   * @remarks\r\n   * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\r\n   * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\r\n   * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\r\n   * 'invisible'.\r\n   *\r\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\r\n   */\n  function RecaptchaVerifier(containerOrId, parameters, authExtern) {\n    if (parameters === void 0) {\n      parameters = tslib.__assign({}, DEFAULT_PARAMS);\n    }\n    this.parameters = parameters;\n    /**\r\n     * The application verifier type.\r\n     *\r\n     * @remarks\r\n     * For a reCAPTCHA verifier, this is 'recaptcha'.\r\n     */\n    this.type = RECAPTCHA_VERIFIER_TYPE;\n    this.destroyed = false;\n    this.widgetId = null;\n    this.tokenChangeListeners = new Set();\n    this.renderPromise = null;\n    this.recaptcha = null;\n    this.auth = _castAuth(authExtern);\n    this.isInvisible = this.parameters.size === 'invisible';\n    _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n    var container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;\n    _assert(container, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    this.container = container;\n    this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n    this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new MockReCaptchaLoaderImpl() : new ReCaptchaLoaderImpl();\n    this.validateStartingState();\n    // TODO: Figure out if sdk version is needed\n  }\n  /**\r\n   * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\r\n   *\r\n   * @returns A Promise for the reCAPTCHA token.\r\n   */\n  RecaptchaVerifier.prototype.verify = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var id, recaptcha, response;\n      var _this = this;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.assertNotDestroyed();\n            return [4 /*yield*/, this.render()];\n          case 1:\n            id = _a.sent();\n            recaptcha = this.getAssertedRecaptcha();\n            response = recaptcha.getResponse(id);\n            if (response) {\n              return [2 /*return*/, response];\n            }\n            return [2 /*return*/, new Promise(function (resolve) {\n              var tokenChange = function tokenChange(token) {\n                if (!token) {\n                  return; // Ignore token expirations.\n                }\n\n                _this.tokenChangeListeners.delete(tokenChange);\n                resolve(token);\n              };\n              _this.tokenChangeListeners.add(tokenChange);\n              if (_this.isInvisible) {\n                recaptcha.execute(id);\n              }\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Renders the reCAPTCHA widget on the page.\r\n   *\r\n   * @returns A Promise that resolves with the reCAPTCHA widget ID.\r\n   */\n  RecaptchaVerifier.prototype.render = function () {\n    var _this = this;\n    try {\n      this.assertNotDestroyed();\n    } catch (e) {\n      // This method returns a promise. Since it's not async (we want to return the\n      // _same_ promise if rendering is still occurring), the API surface should\n      // reject with the error rather than just throw\n      return Promise.reject(e);\n    }\n    if (this.renderPromise) {\n      return this.renderPromise;\n    }\n    this.renderPromise = this.makeRenderPromise().catch(function (e) {\n      _this.renderPromise = null;\n      throw e;\n    });\n    return this.renderPromise;\n  };\n  /** @internal */\n  RecaptchaVerifier.prototype._reset = function () {\n    this.assertNotDestroyed();\n    if (this.widgetId !== null) {\n      this.getAssertedRecaptcha().reset(this.widgetId);\n    }\n  };\n  /**\r\n   * Clears the reCAPTCHA widget from the page and destroys the instance.\r\n   */\n  RecaptchaVerifier.prototype.clear = function () {\n    var _this = this;\n    this.assertNotDestroyed();\n    this.destroyed = true;\n    this._recaptchaLoader.clearedOneInstance();\n    if (!this.isInvisible) {\n      this.container.childNodes.forEach(function (node) {\n        _this.container.removeChild(node);\n      });\n    }\n  };\n  RecaptchaVerifier.prototype.validateStartingState = function () {\n    _assert(!this.parameters.sitekey, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n  };\n\n  RecaptchaVerifier.prototype.makeTokenCallback = function (existing) {\n    var _this = this;\n    return function (token) {\n      _this.tokenChangeListeners.forEach(function (listener) {\n        return listener(token);\n      });\n      if (typeof existing === 'function') {\n        existing(token);\n      } else if (typeof existing === 'string') {\n        var globalFunc = _window()[existing];\n        if (typeof globalFunc === 'function') {\n          globalFunc(token);\n        }\n      }\n    };\n  };\n  RecaptchaVerifier.prototype.assertNotDestroyed = function () {\n    _assert(!this.destroyed, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  };\n\n  RecaptchaVerifier.prototype.makeRenderPromise = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var container, guaranteedEmpty;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.init()];\n          case 1:\n            _a.sent();\n            if (!this.widgetId) {\n              container = this.container;\n              if (!this.isInvisible) {\n                guaranteedEmpty = document.createElement('div');\n                container.appendChild(guaranteedEmpty);\n                container = guaranteedEmpty;\n              }\n              this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);\n            }\n            return [2 /*return*/, this.widgetId];\n        }\n      });\n    });\n  };\n  RecaptchaVerifier.prototype.init = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var _a, siteKey;\n      return tslib.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _assert(_isHttpOrHttps() && !_isWorker(), this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            return [4 /*yield*/, domReady()];\n          case 1:\n            _b.sent();\n            _a = this;\n            return [4 /*yield*/, this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined)];\n          case 2:\n            _a.recaptcha = _b.sent();\n            return [4 /*yield*/, getRecaptchaParams(this.auth)];\n          case 3:\n            siteKey = _b.sent();\n            _assert(siteKey, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            this.parameters.sitekey = siteKey;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  RecaptchaVerifier.prototype.getAssertedRecaptcha = function () {\n    _assert(this.recaptcha, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return this.recaptcha;\n  };\n  return RecaptchaVerifier;\n}();\nfunction domReady() {\n  var resolver = null;\n  return new Promise(function (resolve) {\n    if (document.readyState === 'complete') {\n      resolve();\n      return;\n    }\n    // Document not ready, wait for load before resolving.\n    // Save resolver, so we can remove listener in case it was externally\n    // cancelled.\n    resolver = function resolver() {\n      return resolve();\n    };\n    window.addEventListener('load', resolver);\n  }).catch(function (e) {\n    if (resolver) {\n      window.removeEventListener('load', resolver);\n    }\n    throw e;\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ConfirmationResultImpl = /** @class */function () {\n  function ConfirmationResultImpl(verificationId, onConfirmation) {\n    this.verificationId = verificationId;\n    this.onConfirmation = onConfirmation;\n  }\n  ConfirmationResultImpl.prototype.confirm = function (verificationCode) {\n    var authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);\n    return this.onConfirmation(authCredential);\n  };\n  return ConfirmationResultImpl;\n}();\n/**\r\n * Asynchronously signs in using a phone number.\r\n *\r\n * @remarks\r\n * This method sends a code via SMS to the given\r\n * phone number, and returns a {@link ConfirmationResult}. After the user\r\n * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\r\n * with the code to sign the user in.\r\n *\r\n * For abuse prevention, this method also requires a {@link ApplicationVerifier}.\r\n * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.\r\n * This function can work on other platforms that do not support the\r\n * {@link RecaptchaVerifier} (like React Native), but you need to use a\r\n * third-party {@link ApplicationVerifier} implementation.\r\n *\r\n * @example\r\n * ```javascript\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\r\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n * // Obtain a verificationCode from the user.\r\n * const credential = await confirmationResult.confirm(verificationCode);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\nfunction signInWithPhoneNumber(auth, phoneNumber, appVerifier) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var authInternal, verificationId;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          authInternal = _castAuth(auth);\n          return [4 /*yield*/, _verifyPhoneNumber(authInternal, phoneNumber, util.getModularInstance(appVerifier))];\n        case 1:\n          verificationId = _a.sent();\n          return [2 /*return*/, new ConfirmationResultImpl(verificationId, function (cred) {\n            return signInWithCredential(authInternal, cred);\n          })];\n      }\n    });\n  });\n}\n/**\r\n * Links the user account with the given phone number.\r\n *\r\n * @param user - The user.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\nfunction linkWithPhoneNumber(user, phoneNumber, appVerifier) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var userInternal, verificationId;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          userInternal = util.getModularInstance(user);\n          return [4 /*yield*/, _assertLinkedStatus(false, userInternal, \"phone\" /* ProviderId.PHONE */)];\n        case 1:\n          _a.sent();\n          return [4 /*yield*/, _verifyPhoneNumber(userInternal.auth, phoneNumber, util.getModularInstance(appVerifier))];\n        case 2:\n          verificationId = _a.sent();\n          return [2 /*return*/, new ConfirmationResultImpl(verificationId, function (cred) {\n            return linkWithCredential(userInternal, cred);\n          })];\n      }\n    });\n  });\n}\n/**\r\n * Re-authenticates a user using a fresh phone credential.\r\n *\r\n * @remarks Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\r\n *\r\n * @param user - The user.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\nfunction reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var userInternal, verificationId;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          userInternal = util.getModularInstance(user);\n          return [4 /*yield*/, _verifyPhoneNumber(userInternal.auth, phoneNumber, util.getModularInstance(appVerifier))];\n        case 1:\n          verificationId = _a.sent();\n          return [2 /*return*/, new ConfirmationResultImpl(verificationId, function (cred) {\n            return reauthenticateWithCredential(userInternal, cred);\n          })];\n      }\n    });\n  });\n}\n/**\r\n * Returns a verification ID to be used in conjunction with the SMS code that is sent.\r\n *\r\n */\nfunction _verifyPhoneNumber(auth, options, verifier) {\n  var _a;\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var recaptchaToken, phoneInfoOptions, session, response, mfaEnrollmentId, response, sessionInfo;\n    return tslib.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4 /*yield*/, verifier.verify()];\n        case 1:\n          recaptchaToken = _b.sent();\n          _b.label = 2;\n        case 2:\n          _b.trys.push([2,, 10, 11]);\n          _assert(typeof recaptchaToken === 'string', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n          _assert(verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n          phoneInfoOptions = void 0;\n          if (typeof options === 'string') {\n            phoneInfoOptions = {\n              phoneNumber: options\n            };\n          } else {\n            phoneInfoOptions = options;\n          }\n          if (!('session' in phoneInfoOptions)) return [3 /*break*/, 7];\n          session = phoneInfoOptions.session;\n          if (!('phoneNumber' in phoneInfoOptions)) return [3 /*break*/, 4];\n          _assert(session.type === \"enroll\" /* MultiFactorSessionType.ENROLL */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          return [4 /*yield*/, startEnrollPhoneMfa(auth, {\n            idToken: session.credential,\n            phoneEnrollmentInfo: {\n              phoneNumber: phoneInfoOptions.phoneNumber,\n              recaptchaToken: recaptchaToken\n            }\n          })];\n        case 3:\n          response = _b.sent();\n          return [2 /*return*/, response.phoneSessionInfo.sessionInfo];\n        case 4:\n          _assert(session.type === \"signin\" /* MultiFactorSessionType.SIGN_IN */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) || phoneInfoOptions.multiFactorUid;\n          _assert(mfaEnrollmentId, auth, \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */);\n          return [4 /*yield*/, startSignInPhoneMfa(auth, {\n            mfaPendingCredential: session.credential,\n            mfaEnrollmentId: mfaEnrollmentId,\n            phoneSignInInfo: {\n              recaptchaToken: recaptchaToken\n            }\n          })];\n        case 5:\n          response = _b.sent();\n          return [2 /*return*/, response.phoneResponseInfo.sessionInfo];\n        case 6:\n          return [3 /*break*/, 9];\n        case 7:\n          return [4 /*yield*/, sendPhoneVerificationCode(auth, {\n            phoneNumber: phoneInfoOptions.phoneNumber,\n            recaptchaToken: recaptchaToken\n          })];\n        case 8:\n          sessionInfo = _b.sent().sessionInfo;\n          return [2 /*return*/, sessionInfo];\n        case 9:\n          return [3 /*break*/, 11];\n        case 10:\n          verifier._reset();\n          return [7 /*endfinally*/];\n        case 11:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Updates the user's phone number.\r\n *\r\n * @example\r\n * ```\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\r\n * const provider = new PhoneAuthProvider(auth);\r\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\r\n * // Obtain the verificationCode from the user.\r\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n * await updatePhoneNumber(user, phoneCredential);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param credential - A credential authenticating the new phone number.\r\n *\r\n * @public\r\n */\nfunction updatePhoneNumber(user, credential) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, _link(util.getModularInstance(user), credential)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for generating an {@link PhoneAuthCredential}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\r\n * const provider = new PhoneAuthProvider(auth);\r\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\r\n * // Obtain the verificationCode from the user.\r\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n * const userCredential = await signInWithCredential(auth, phoneCredential);\r\n * ```\r\n *\r\n * @public\r\n */\nvar PhoneAuthProvider = /** @class */function () {\n  /**\r\n   * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\r\n   *\r\n   */\n  function PhoneAuthProvider(auth) {\n    /** Always set to {@link ProviderId}.PHONE. */\n    this.providerId = PhoneAuthProvider.PROVIDER_ID;\n    this.auth = _castAuth(auth);\n  }\n  /**\r\n   *\r\n   * Starts a phone number authentication flow by sending a verification code to the given phone\r\n   * number.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const provider = new PhoneAuthProvider(auth);\r\n   * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\r\n   * // Obtain verificationCode from the user.\r\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n   * const userCredential = await signInWithCredential(auth, authCredential);\r\n   * ```\r\n   *\r\n   * @example\r\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\r\n   * ```javascript\r\n   * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n   * // Obtain verificationCode from the user.\r\n   * const userCredential = confirmationResult.confirm(verificationCode);\r\n   * ```\r\n   *\r\n   * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\r\n   * E.164 format (e.g. +16505550101).\r\n   * @param applicationVerifier - For abuse prevention, this method also requires a\r\n   * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,\r\n   * {@link RecaptchaVerifier}.\r\n   *\r\n   * @returns A Promise for a verification ID that can be passed to\r\n   * {@link PhoneAuthProvider.credential} to identify this flow..\r\n   */\n  PhoneAuthProvider.prototype.verifyPhoneNumber = function (phoneOptions, applicationVerifier) {\n    return _verifyPhoneNumber(this.auth, phoneOptions, util.getModularInstance(applicationVerifier));\n  };\n  /**\r\n   * Creates a phone auth credential, given the verification ID from\r\n   * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\r\n   * mobile device.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const provider = new PhoneAuthProvider(auth);\r\n   * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\r\n   * // Obtain verificationCode from the user.\r\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n   * const userCredential = signInWithCredential(auth, authCredential);\r\n   * ```\r\n   *\r\n   * @example\r\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\r\n   * ```javascript\r\n   * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n   * // Obtain verificationCode from the user.\r\n   * const userCredential = await confirmationResult.confirm(verificationCode);\r\n   * ```\r\n   *\r\n   * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\r\n   * @param verificationCode - The verification code sent to the user's mobile device.\r\n   *\r\n   * @returns The auth provider credential.\r\n   */\n  PhoneAuthProvider.credential = function (verificationId, verificationCode) {\n    return PhoneAuthCredential._fromVerification(verificationId, verificationCode);\n  };\n  /**\r\n   * Generates an {@link AuthCredential} from a {@link UserCredential}.\r\n   * @param userCredential - The user credential.\r\n   */\n  PhoneAuthProvider.credentialFromResult = function (userCredential) {\n    var credential = userCredential;\n    return PhoneAuthProvider.credentialFromTaggedObject(credential);\n  };\n  /**\r\n   * Returns an {@link AuthCredential} when passed an error.\r\n   *\r\n   * @remarks\r\n   *\r\n   * This method works for errors like\r\n   * `auth/account-exists-with-different-credentials`. This is useful for\r\n   * recovering when attempting to set a user's phone number but the number\r\n   * in question is already tied to another account. For example, the following\r\n   * code tries to update the current user's phone number, and if that\r\n   * fails, links the user with the account associated with that number:\r\n   *\r\n   * ```js\r\n   * const provider = new PhoneAuthProvider(auth);\r\n   * const verificationId = await provider.verifyPhoneNumber(number, verifier);\r\n   * try {\r\n   *   const code = ''; // Prompt the user for the verification code\r\n   *   await updatePhoneNumber(\r\n   *       auth.currentUser,\r\n   *       PhoneAuthProvider.credential(verificationId, code));\r\n   * } catch (e) {\r\n   *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\r\n   *     const cred = PhoneAuthProvider.credentialFromError(e);\r\n   *     await linkWithCredential(auth.currentUser, cred);\r\n   *   }\r\n   * }\r\n   *\r\n   * // At this point, auth.currentUser.phoneNumber === number.\r\n   * ```\r\n   *\r\n   * @param error - The error to generate a credential from.\r\n   */\n  PhoneAuthProvider.credentialFromError = function (error) {\n    return PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});\n  };\n  PhoneAuthProvider.credentialFromTaggedObject = function (_a) {\n    var tokenResponse = _a._tokenResponse;\n    if (!tokenResponse) {\n      return null;\n    }\n    var _b = tokenResponse,\n      phoneNumber = _b.phoneNumber,\n      temporaryProof = _b.temporaryProof;\n    if (phoneNumber && temporaryProof) {\n      return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);\n    }\n    return null;\n  };\n  /** Always set to {@link ProviderId}.PHONE. */\n  PhoneAuthProvider.PROVIDER_ID = \"phone\" /* ProviderId.PHONE */;\n  /** Always set to {@link SignInMethod}.PHONE. */\n  PhoneAuthProvider.PHONE_SIGN_IN_METHOD = \"phone\" /* SignInMethod.PHONE */;\n  return PhoneAuthProvider;\n}();\nvar MultiFactorAssertionImpl = /** @class */function () {\n  function MultiFactorAssertionImpl(factorId) {\n    this.factorId = factorId;\n  }\n  MultiFactorAssertionImpl.prototype._process = function (auth, session, displayName) {\n    switch (session.type) {\n      case \"enroll\" /* MultiFactorSessionType.ENROLL */:\n        return this._finalizeEnroll(auth, session.credential, displayName);\n      case \"signin\" /* MultiFactorSessionType.SIGN_IN */:\n        return this._finalizeSignIn(auth, session.credential);\n      default:\n        return debugFail('unexpected MultiFactorSessionType');\n    }\n  };\n  return MultiFactorAssertionImpl;\n}();\n\n/**\r\n * {@inheritdoc PhoneMultiFactorAssertion}\r\n *\r\n * @public\r\n */\nvar PhoneMultiFactorAssertionImpl = /** @class */function (_super) {\n  tslib.__extends(PhoneMultiFactorAssertionImpl, _super);\n  function PhoneMultiFactorAssertionImpl(credential) {\n    var _this = _super.call(this, \"phone\" /* FactorId.PHONE */) || this;\n    _this.credential = credential;\n    return _this;\n  }\n  /** @internal */\n  PhoneMultiFactorAssertionImpl._fromCredential = function (credential) {\n    return new PhoneMultiFactorAssertionImpl(credential);\n  };\n  /** @internal */\n  PhoneMultiFactorAssertionImpl.prototype._finalizeEnroll = function (auth, idToken, displayName) {\n    return finalizeEnrollPhoneMfa(auth, {\n      idToken: idToken,\n      displayName: displayName,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  };\n  /** @internal */\n  PhoneMultiFactorAssertionImpl.prototype._finalizeSignIn = function (auth, mfaPendingCredential) {\n    return finalizeSignInPhoneMfa(auth, {\n      mfaPendingCredential: mfaPendingCredential,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  };\n  return PhoneMultiFactorAssertionImpl;\n}(MultiFactorAssertionImpl);\n/**\r\n * Provider for generating a {@link PhoneMultiFactorAssertion}.\r\n *\r\n * @public\r\n */\nvar PhoneMultiFactorGenerator = /** @class */function () {\n  function PhoneMultiFactorGenerator() {}\n  /**\r\n   * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\r\n   *\r\n   * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\r\n   * @returns A {@link PhoneMultiFactorAssertion} which can be used with\r\n   * {@link MultiFactorResolver.resolveSignIn}\r\n   */\n  PhoneMultiFactorGenerator.assertion = function (credential) {\n    return PhoneMultiFactorAssertionImpl._fromCredential(credential);\n  };\n  /**\r\n   * The identifier of the phone second factor: `phone`.\r\n   */\n  PhoneMultiFactorGenerator.FACTOR_ID = 'phone';\n  return PhoneMultiFactorGenerator;\n}();\nexports.AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY;\nexports.ActionCodeOperation = ActionCodeOperation;\nexports.ActionCodeURL = ActionCodeURL;\nexports.AuthCredential = AuthCredential;\nexports.AuthImpl = AuthImpl;\nexports.BaseOAuthProvider = BaseOAuthProvider;\nexports.Delay = Delay;\nexports.EmailAuthCredential = EmailAuthCredential;\nexports.EmailAuthProvider = EmailAuthProvider;\nexports.FacebookAuthProvider = FacebookAuthProvider;\nexports.FactorId = FactorId;\nexports.FederatedAuthProvider = FederatedAuthProvider;\nexports.FetchProvider = FetchProvider;\nexports.GithubAuthProvider = GithubAuthProvider;\nexports.GoogleAuthProvider = GoogleAuthProvider;\nexports.OAuthCredential = OAuthCredential;\nexports.OAuthProvider = OAuthProvider;\nexports.OperationType = OperationType;\nexports.PhoneAuthCredential = PhoneAuthCredential;\nexports.PhoneAuthProvider = PhoneAuthProvider;\nexports.PhoneMultiFactorGenerator = PhoneMultiFactorGenerator;\nexports.ProviderId = ProviderId;\nexports.RecaptchaVerifier = RecaptchaVerifier;\nexports.SAMLAuthCredential = SAMLAuthCredential;\nexports.SAMLAuthProvider = SAMLAuthProvider;\nexports.STORAGE_AVAILABLE_KEY = STORAGE_AVAILABLE_KEY;\nexports.SignInMethod = SignInMethod;\nexports.TwitterAuthProvider = TwitterAuthProvider;\nexports.UserImpl = UserImpl;\nexports._assert = _assert;\nexports._assertInstanceOf = _assertInstanceOf;\nexports._assertLinkedStatus = _assertLinkedStatus;\nexports._castAuth = _castAuth;\nexports._createError = _createError;\nexports._emulatorUrl = _emulatorUrl;\nexports._fail = _fail;\nexports._generateCallbackName = _generateCallbackName;\nexports._getActiveServiceWorker = _getActiveServiceWorker;\nexports._getClientVersion = _getClientVersion;\nexports._getCurrentUrl = _getCurrentUrl;\nexports._getInstance = _getInstance;\nexports._getServiceWorkerController = _getServiceWorkerController;\nexports._getWorkerGlobalScope = _getWorkerGlobalScope;\nexports._isAndroid = _isAndroid;\nexports._isChromeIOS = _isChromeIOS;\nexports._isFirefox = _isFirefox;\nexports._isIE10 = _isIE10;\nexports._isIOS = _isIOS;\nexports._isIOS7Or8 = _isIOS7Or8;\nexports._isIOSStandalone = _isIOSStandalone;\nexports._isIframe = _isIframe;\nexports._isMobileBrowser = _isMobileBrowser;\nexports._isSafari = _isSafari;\nexports._isWorker = _isWorker;\nexports._link = _link;\nexports._loadJS = _loadJS;\nexports._performApiRequest = _performApiRequest;\nexports._persistenceKeyName = _persistenceKeyName;\nexports._reauthenticate = _reauthenticate;\nexports._setWindowLocation = _setWindowLocation;\nexports._signInWithCredential = _signInWithCredential;\nexports._window = _window;\nexports.applyActionCode = applyActionCode;\nexports.beforeAuthStateChanged = beforeAuthStateChanged;\nexports.checkActionCode = checkActionCode;\nexports.confirmPasswordReset = confirmPasswordReset;\nexports.connectAuthEmulator = connectAuthEmulator;\nexports.createUserWithEmailAndPassword = createUserWithEmailAndPassword;\nexports.debugAssert = debugAssert;\nexports.debugErrorMap = debugErrorMap;\nexports.deleteUser = deleteUser;\nexports.fetchSignInMethodsForEmail = fetchSignInMethodsForEmail;\nexports.getAdditionalUserInfo = getAdditionalUserInfo;\nexports.getIdToken = getIdToken;\nexports.getIdTokenResult = getIdTokenResult;\nexports.getMultiFactorResolver = getMultiFactorResolver;\nexports.inMemoryPersistence = inMemoryPersistence;\nexports.initializeAuth = initializeAuth;\nexports.isSignInWithEmailLink = isSignInWithEmailLink;\nexports.linkWithCredential = linkWithCredential;\nexports.linkWithPhoneNumber = linkWithPhoneNumber;\nexports.multiFactor = multiFactor;\nexports.onAuthStateChanged = onAuthStateChanged;\nexports.onIdTokenChanged = onIdTokenChanged;\nexports.parseActionCodeURL = parseActionCodeURL;\nexports.prodErrorMap = prodErrorMap;\nexports.reauthenticateWithCredential = reauthenticateWithCredential;\nexports.reauthenticateWithPhoneNumber = reauthenticateWithPhoneNumber;\nexports.registerAuth = registerAuth;\nexports.reload = reload;\nexports.sendEmailVerification = sendEmailVerification;\nexports.sendPasswordResetEmail = sendPasswordResetEmail;\nexports.sendSignInLinkToEmail = sendSignInLinkToEmail;\nexports.setPersistence = setPersistence;\nexports.signInAnonymously = signInAnonymously;\nexports.signInWithCredential = signInWithCredential;\nexports.signInWithCustomToken = signInWithCustomToken;\nexports.signInWithEmailAndPassword = signInWithEmailAndPassword;\nexports.signInWithEmailLink = signInWithEmailLink;\nexports.signInWithIdp = signInWithIdp;\nexports.signInWithPhoneNumber = signInWithPhoneNumber;\nexports.signOut = signOut;\nexports.unlink = unlink;\nexports.updateCurrentUser = updateCurrentUser;\nexports.updateEmail = updateEmail;\nexports.updatePassword = updatePassword;\nexports.updatePhoneNumber = updatePhoneNumber;\nexports.updateProfile = updateProfile;\nexports.useDeviceLanguage = useDeviceLanguage;\nexports.verifyBeforeUpdateEmail = verifyBeforeUpdateEmail;\nexports.verifyPasswordResetCode = verifyPasswordResetCode;","map":{"version":3,"sources":["../../src/core/errors.ts","../../src/core/util/log.ts","../../src/core/util/assert.ts","../../src/core/util/instantiator.ts","../../src/core/auth/initialize.ts","../../src/core/util/location.ts","../../src/core/util/navigator.ts","../../src/core/util/delay.ts","../../src/core/util/emulator.ts","../../src/core/util/fetch_provider.ts","../../src/api/errors.ts","../../src/api/index.ts","../../src/api/account_management/account.ts","../../src/core/util/time.ts","../../src/core/user/id_token_result.ts","../../src/core/user/invalidation.ts","../../src/core/user/proactive_refresh.ts","../../src/core/user/user_metadata.ts","../../src/core/user/reload.ts","../../src/api/authentication/token.ts","../../src/core/user/token_manager.ts","../../src/core/user/user_impl.ts","../../src/core/persistence/in_memory.ts","../../src/core/persistence/persistence_user_manager.ts","../../src/core/util/browser.ts","../../src/core/util/version.ts","../../src/core/auth/middleware.ts","../../src/core/auth/auth_impl.ts","../../src/core/auth/emulator.ts","../../src/core/credentials/auth_credential.ts","../../src/api/account_management/email_and_password.ts","../../src/api/authentication/email_and_password.ts","../../src/api/authentication/email_link.ts","../../src/core/credentials/email.ts","../../src/api/authentication/idp.ts","../../src/core/credentials/oauth.ts","../../src/api/authentication/sms.ts","../../src/core/credentials/phone.ts","../../src/core/action_code_url.ts","../../src/core/providers/email.ts","../../src/core/providers/federated.ts","../../src/core/providers/oauth.ts","../../src/core/providers/facebook.ts","../../src/core/providers/google.ts","../../src/core/providers/github.ts","../../src/core/credentials/saml.ts","../../src/core/providers/saml.ts","../../src/core/providers/twitter.ts","../../src/api/authentication/sign_up.ts","../../src/core/user/user_credential_impl.ts","../../src/core/strategies/anonymous.ts","../../src/mfa/mfa_error.ts","../../src/core/util/providers.ts","../../src/core/user/link_unlink.ts","../../src/core/user/reauthenticate.ts","../../src/core/strategies/credential.ts","../../src/api/authentication/custom_token.ts","../../src/core/strategies/custom_token.ts","../../src/mfa/mfa_info.ts","../../src/core/strategies/action_code_settings.ts","../../src/core/strategies/email_and_password.ts","../../src/core/strategies/email_link.ts","../../src/api/authentication/create_auth_uri.ts","../../src/core/strategies/email.ts","../../src/api/account_management/profile.ts","../../src/core/user/account_info.ts","../../src/core/user/additional_user_info.ts","../../src/core/index.ts","../../src/mfa/mfa_session.ts","../../src/mfa/mfa_resolver.ts","../../src/api/account_management/mfa.ts","../../src/mfa/mfa_user.ts","../../src/core/auth/firebase_internal.ts","../../src/core/auth/register.ts","../../src/core/persistence/index.ts","../../src/model/enum_maps.ts","../../src/api/authentication/mfa.ts","../../src/api/authentication/recaptcha.ts","../../src/platform_browser/auth_window.ts","../../src/platform_browser/util/worker.ts","../../src/platform_browser/load_js.ts","../../src/platform_browser/recaptcha/recaptcha_mock.ts","../../src/platform_browser/recaptcha/recaptcha_loader.ts","../../src/platform_browser/recaptcha/recaptcha_verifier.ts","../../src/platform_browser/strategies/phone.ts","../../src/platform_browser/providers/phone.ts","../../src/mfa/mfa_assertion.ts","../../src/platform_browser/mfa/assertions/phone.ts"],"names":["ErrorFactory","Logger","LogLevel","__spreadArray","SDK_VERSION","app","_getProvider","deepEqual","isBrowserExtension","isMobileCordova","isReactNative","_a","querystring","__assign","FirebaseError","getModularInstance","base64Decode","isIE","getUA","createSubscribe","IDP_REQUEST_URI","signInWithPhoneNumber","linkWithPhoneNumber","querystringDecode","extractQuerystring","account.applyActionCode","apiUpdateProfile","apiUpdateEmailPassword","Component","registerVersion","jsHelpers._generateCallbackName"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorMap, User } from '../model/public_types';\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nimport { IdTokenMfaResponse } from '../api/authentication/mfa';\nimport { AppName } from '../model/auth';\nimport { AuthCredential } from './credentials';\n\n/**\n * Enumeration of Firebase Auth error codes.\n *\n * @internal\n */\nexport const enum AuthErrorCode {\n  ADMIN_ONLY_OPERATION = 'admin-restricted-operation',\n  ARGUMENT_ERROR = 'argument-error',\n  APP_NOT_AUTHORIZED = 'app-not-authorized',\n  APP_NOT_INSTALLED = 'app-not-installed',\n  CAPTCHA_CHECK_FAILED = 'captcha-check-failed',\n  CODE_EXPIRED = 'code-expired',\n  CORDOVA_NOT_READY = 'cordova-not-ready',\n  CORS_UNSUPPORTED = 'cors-unsupported',\n  CREDENTIAL_ALREADY_IN_USE = 'credential-already-in-use',\n  CREDENTIAL_MISMATCH = 'custom-token-mismatch',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN = 'requires-recent-login',\n  DEPENDENT_SDK_INIT_BEFORE_AUTH = 'dependent-sdk-initialized-before-auth',\n  DYNAMIC_LINK_NOT_ACTIVATED = 'dynamic-link-not-activated',\n  EMAIL_CHANGE_NEEDS_VERIFICATION = 'email-change-needs-verification',\n  EMAIL_EXISTS = 'email-already-in-use',\n  EMULATOR_CONFIG_FAILED = 'emulator-config-failed',\n  EXPIRED_OOB_CODE = 'expired-action-code',\n  EXPIRED_POPUP_REQUEST = 'cancelled-popup-request',\n  INTERNAL_ERROR = 'internal-error',\n  INVALID_API_KEY = 'invalid-api-key',\n  INVALID_APP_CREDENTIAL = 'invalid-app-credential',\n  INVALID_APP_ID = 'invalid-app-id',\n  INVALID_AUTH = 'invalid-user-token',\n  INVALID_AUTH_EVENT = 'invalid-auth-event',\n  INVALID_CERT_HASH = 'invalid-cert-hash',\n  INVALID_CODE = 'invalid-verification-code',\n  INVALID_CONTINUE_URI = 'invalid-continue-uri',\n  INVALID_CORDOVA_CONFIGURATION = 'invalid-cordova-configuration',\n  INVALID_CUSTOM_TOKEN = 'invalid-custom-token',\n  INVALID_DYNAMIC_LINK_DOMAIN = 'invalid-dynamic-link-domain',\n  INVALID_EMAIL = 'invalid-email',\n  INVALID_EMULATOR_SCHEME = 'invalid-emulator-scheme',\n  INVALID_IDP_RESPONSE = 'invalid-credential',\n  INVALID_MESSAGE_PAYLOAD = 'invalid-message-payload',\n  INVALID_MFA_SESSION = 'invalid-multi-factor-session',\n  INVALID_OAUTH_CLIENT_ID = 'invalid-oauth-client-id',\n  INVALID_OAUTH_PROVIDER = 'invalid-oauth-provider',\n  INVALID_OOB_CODE = 'invalid-action-code',\n  INVALID_ORIGIN = 'unauthorized-domain',\n  INVALID_PASSWORD = 'wrong-password',\n  INVALID_PERSISTENCE = 'invalid-persistence-type',\n  INVALID_PHONE_NUMBER = 'invalid-phone-number',\n  INVALID_PROVIDER_ID = 'invalid-provider-id',\n  INVALID_RECIPIENT_EMAIL = 'invalid-recipient-email',\n  INVALID_SENDER = 'invalid-sender',\n  INVALID_SESSION_INFO = 'invalid-verification-id',\n  INVALID_TENANT_ID = 'invalid-tenant-id',\n  LOGIN_BLOCKED = 'login-blocked',\n  MFA_INFO_NOT_FOUND = 'multi-factor-info-not-found',\n  MFA_REQUIRED = 'multi-factor-auth-required',\n  MISSING_ANDROID_PACKAGE_NAME = 'missing-android-pkg-name',\n  MISSING_APP_CREDENTIAL = 'missing-app-credential',\n  MISSING_AUTH_DOMAIN = 'auth-domain-config-required',\n  MISSING_CODE = 'missing-verification-code',\n  MISSING_CONTINUE_URI = 'missing-continue-uri',\n  MISSING_IFRAME_START = 'missing-iframe-start',\n  MISSING_IOS_BUNDLE_ID = 'missing-ios-bundle-id',\n  MISSING_OR_INVALID_NONCE = 'missing-or-invalid-nonce',\n  MISSING_MFA_INFO = 'missing-multi-factor-info',\n  MISSING_MFA_SESSION = 'missing-multi-factor-session',\n  MISSING_PHONE_NUMBER = 'missing-phone-number',\n  MISSING_SESSION_INFO = 'missing-verification-id',\n  MODULE_DESTROYED = 'app-deleted',\n  NEED_CONFIRMATION = 'account-exists-with-different-credential',\n  NETWORK_REQUEST_FAILED = 'network-request-failed',\n  NULL_USER = 'null-user',\n  NO_AUTH_EVENT = 'no-auth-event',\n  NO_SUCH_PROVIDER = 'no-such-provider',\n  OPERATION_NOT_ALLOWED = 'operation-not-allowed',\n  OPERATION_NOT_SUPPORTED = 'operation-not-supported-in-this-environment',\n  POPUP_BLOCKED = 'popup-blocked',\n  POPUP_CLOSED_BY_USER = 'popup-closed-by-user',\n  PROVIDER_ALREADY_LINKED = 'provider-already-linked',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  REDIRECT_CANCELLED_BY_USER = 'redirect-cancelled-by-user',\n  REDIRECT_OPERATION_PENDING = 'redirect-operation-pending',\n  REJECTED_CREDENTIAL = 'rejected-credential',\n  SECOND_FACTOR_ALREADY_ENROLLED = 'second-factor-already-in-use',\n  SECOND_FACTOR_LIMIT_EXCEEDED = 'maximum-second-factor-count-exceeded',\n  TENANT_ID_MISMATCH = 'tenant-id-mismatch',\n  TIMEOUT = 'timeout',\n  TOKEN_EXPIRED = 'user-token-expired',\n  TOO_MANY_ATTEMPTS_TRY_LATER = 'too-many-requests',\n  UNAUTHORIZED_DOMAIN = 'unauthorized-continue-uri',\n  UNSUPPORTED_FIRST_FACTOR = 'unsupported-first-factor',\n  UNSUPPORTED_PERSISTENCE = 'unsupported-persistence-type',\n  UNSUPPORTED_TENANT_OPERATION = 'unsupported-tenant-operation',\n  UNVERIFIED_EMAIL = 'unverified-email',\n  USER_CANCELLED = 'user-cancelled',\n  USER_DELETED = 'user-not-found',\n  USER_DISABLED = 'user-disabled',\n  USER_MISMATCH = 'user-mismatch',\n  USER_SIGNED_OUT = 'user-signed-out',\n  WEAK_PASSWORD = 'weak-password',\n  WEB_STORAGE_UNSUPPORTED = 'web-storage-unsupported',\n  ALREADY_INITIALIZED = 'already-initialized'\n}\n\nfunction _debugErrorMap(): ErrorMap<AuthErrorCode> {\n  return {\n    [AuthErrorCode.ADMIN_ONLY_OPERATION]:\n      'This operation is restricted to administrators only.',\n    [AuthErrorCode.ARGUMENT_ERROR]: '',\n    [AuthErrorCode.APP_NOT_AUTHORIZED]:\n      \"This app, identified by the domain where it's hosted, is not \" +\n      'authorized to use Firebase Authentication with the provided API key. ' +\n      'Review your key configuration in the Google API console.',\n    [AuthErrorCode.APP_NOT_INSTALLED]:\n      'The requested mobile application corresponding to the identifier (' +\n      'Android package name or iOS bundle ID) provided is not installed on ' +\n      'this device.',\n    [AuthErrorCode.CAPTCHA_CHECK_FAILED]:\n      'The reCAPTCHA response token provided is either invalid, expired, ' +\n      'already used or the domain associated with it does not match the list ' +\n      'of whitelisted domains.',\n    [AuthErrorCode.CODE_EXPIRED]:\n      'The SMS code has expired. Please re-send the verification code to try ' +\n      'again.',\n    [AuthErrorCode.CORDOVA_NOT_READY]: 'Cordova framework is not ready.',\n    [AuthErrorCode.CORS_UNSUPPORTED]: 'This browser is not supported.',\n    [AuthErrorCode.CREDENTIAL_ALREADY_IN_USE]:\n      'This credential is already associated with a different user account.',\n    [AuthErrorCode.CREDENTIAL_MISMATCH]:\n      'The custom token corresponds to a different audience.',\n    [AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN]:\n      'This operation is sensitive and requires recent authentication. Log in ' +\n      'again before retrying this request.',\n    [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]:\n      'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\n      'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\n      'starting any other Firebase SDK.',\n    [AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED]:\n      'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' +\n      'conditions.',\n    [AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION]:\n      'Multi-factor users must always have a verified email.',\n    [AuthErrorCode.EMAIL_EXISTS]:\n      'The email address is already in use by another account.',\n    [AuthErrorCode.EMULATOR_CONFIG_FAILED]:\n      'Auth instance has already been used to make a network call. Auth can ' +\n      'no longer be configured to use the emulator. Try calling ' +\n      '\"connectAuthEmulator()\" sooner.',\n    [AuthErrorCode.EXPIRED_OOB_CODE]: 'The action code has expired.',\n    [AuthErrorCode.EXPIRED_POPUP_REQUEST]:\n      'This operation has been cancelled due to another conflicting popup being opened.',\n    [AuthErrorCode.INTERNAL_ERROR]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.INVALID_APP_CREDENTIAL]:\n      'The phone verification request contains an invalid application verifier.' +\n      ' The reCAPTCHA token response is either invalid or expired.',\n    [AuthErrorCode.INVALID_APP_ID]:\n      'The mobile app identifier is not registed for the current project.',\n    [AuthErrorCode.INVALID_AUTH]:\n      \"This user's credential isn't valid for this project. This can happen \" +\n      \"if the user's token has been tampered with, or if the user isn't for \" +\n      'the project associated with this API key.',\n    [AuthErrorCode.INVALID_AUTH_EVENT]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.INVALID_CODE]:\n      'The SMS verification code used to create the phone auth credential is ' +\n      'invalid. Please resend the verification code sms and be sure to use the ' +\n      'verification code provided by the user.',\n    [AuthErrorCode.INVALID_CONTINUE_URI]:\n      'The continue URL provided in the request is invalid.',\n    [AuthErrorCode.INVALID_CORDOVA_CONFIGURATION]:\n      'The following Cordova plugins must be installed to enable OAuth sign-in: ' +\n      'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' +\n      'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' +\n      'cordova-plugin-customurlscheme.',\n    [AuthErrorCode.INVALID_CUSTOM_TOKEN]:\n      'The custom token format is incorrect. Please check the documentation.',\n    [AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN]:\n      'The provided dynamic link domain is not configured or authorized for the current project.',\n    [AuthErrorCode.INVALID_EMAIL]: 'The email address is badly formatted.',\n    [AuthErrorCode.INVALID_EMULATOR_SCHEME]:\n      'Emulator URL must start with a valid scheme (http:// or https://).',\n    [AuthErrorCode.INVALID_API_KEY]:\n      'Your API key is invalid, please check you have copied it correctly.',\n    [AuthErrorCode.INVALID_CERT_HASH]:\n      'The SHA-1 certificate hash provided is invalid.',\n    [AuthErrorCode.INVALID_IDP_RESPONSE]:\n      'The supplied auth credential is malformed or has expired.',\n    [AuthErrorCode.INVALID_MESSAGE_PAYLOAD]:\n      'The email template corresponding to this action contains invalid characters in its message. ' +\n      'Please fix by going to the Auth email templates section in the Firebase Console.',\n    [AuthErrorCode.INVALID_MFA_SESSION]:\n      'The request does not contain a valid proof of first factor successful sign-in.',\n    [AuthErrorCode.INVALID_OAUTH_PROVIDER]:\n      'EmailAuthProvider is not supported for this operation. This operation ' +\n      'only supports OAuth providers.',\n    [AuthErrorCode.INVALID_OAUTH_CLIENT_ID]:\n      'The OAuth client ID provided is either invalid or does not match the ' +\n      'specified API key.',\n    [AuthErrorCode.INVALID_ORIGIN]:\n      'This domain is not authorized for OAuth operations for your Firebase ' +\n      'project. Edit the list of authorized domains from the Firebase console.',\n    [AuthErrorCode.INVALID_OOB_CODE]:\n      'The action code is invalid. This can happen if the code is malformed, ' +\n      'expired, or has already been used.',\n    [AuthErrorCode.INVALID_PASSWORD]:\n      'The password is invalid or the user does not have a password.',\n    [AuthErrorCode.INVALID_PERSISTENCE]:\n      'The specified persistence type is invalid. It can only be local, session or none.',\n    [AuthErrorCode.INVALID_PHONE_NUMBER]:\n      'The format of the phone number provided is incorrect. Please enter the ' +\n      'phone number in a format that can be parsed into E.164 format. E.164 ' +\n      'phone numbers are written in the format [+][country code][subscriber ' +\n      'number including area code].',\n    [AuthErrorCode.INVALID_PROVIDER_ID]:\n      'The specified provider ID is invalid.',\n    [AuthErrorCode.INVALID_RECIPIENT_EMAIL]:\n      'The email corresponding to this action failed to send as the provided ' +\n      'recipient email address is invalid.',\n    [AuthErrorCode.INVALID_SENDER]:\n      'The email template corresponding to this action contains an invalid sender email or name. ' +\n      'Please fix by going to the Auth email templates section in the Firebase Console.',\n    [AuthErrorCode.INVALID_SESSION_INFO]:\n      'The verification ID used to create the phone auth credential is invalid.',\n    [AuthErrorCode.INVALID_TENANT_ID]:\n      \"The Auth instance's tenant ID is invalid.\",\n    [AuthErrorCode.LOGIN_BLOCKED]:\n      'Login blocked by user-provided method: {$originalMessage}',\n    [AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME]:\n      'An Android Package Name must be provided if the Android App is required to be installed.',\n    [AuthErrorCode.MISSING_AUTH_DOMAIN]:\n      'Be sure to include authDomain when calling firebase.initializeApp(), ' +\n      'by following the instructions in the Firebase console.',\n    [AuthErrorCode.MISSING_APP_CREDENTIAL]:\n      'The phone verification request is missing an application verifier ' +\n      'assertion. A reCAPTCHA response token needs to be provided.',\n    [AuthErrorCode.MISSING_CODE]:\n      'The phone auth credential was created with an empty SMS verification code.',\n    [AuthErrorCode.MISSING_CONTINUE_URI]:\n      'A continue URL must be provided in the request.',\n    [AuthErrorCode.MISSING_IFRAME_START]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.MISSING_IOS_BUNDLE_ID]:\n      'An iOS Bundle ID must be provided if an App Store ID is provided.',\n    [AuthErrorCode.MISSING_OR_INVALID_NONCE]:\n      'The request does not contain a valid nonce. This can occur if the ' +\n      'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' +\n      'in the ID token payload.',\n    [AuthErrorCode.MISSING_MFA_INFO]:\n      'No second factor identifier is provided.',\n    [AuthErrorCode.MISSING_MFA_SESSION]:\n      'The request is missing proof of first factor successful sign-in.',\n    [AuthErrorCode.MISSING_PHONE_NUMBER]:\n      'To send verification codes, provide a phone number for the recipient.',\n    [AuthErrorCode.MISSING_SESSION_INFO]:\n      'The phone auth credential was created with an empty verification ID.',\n    [AuthErrorCode.MODULE_DESTROYED]:\n      'This instance of FirebaseApp has been deleted.',\n    [AuthErrorCode.MFA_INFO_NOT_FOUND]:\n      'The user does not have a second factor matching the identifier provided.',\n    [AuthErrorCode.MFA_REQUIRED]:\n      'Proof of ownership of a second factor is required to complete sign-in.',\n    [AuthErrorCode.NEED_CONFIRMATION]:\n      'An account already exists with the same email address but different ' +\n      'sign-in credentials. Sign in using a provider associated with this ' +\n      'email address.',\n    [AuthErrorCode.NETWORK_REQUEST_FAILED]:\n      'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\n    [AuthErrorCode.NO_AUTH_EVENT]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.NO_SUCH_PROVIDER]:\n      'User was not linked to an account with the given provider.',\n    [AuthErrorCode.NULL_USER]:\n      'A null user object was provided as the argument for an operation which ' +\n      'requires a non-null user object.',\n    [AuthErrorCode.OPERATION_NOT_ALLOWED]:\n      'The given sign-in provider is disabled for this Firebase project. ' +\n      'Enable it in the Firebase console, under the sign-in method tab of the ' +\n      'Auth section.',\n    [AuthErrorCode.OPERATION_NOT_SUPPORTED]:\n      'This operation is not supported in the environment this application is ' +\n      'running on. \"location.protocol\" must be http, https or chrome-extension' +\n      ' and web storage must be enabled.',\n    [AuthErrorCode.POPUP_BLOCKED]:\n      'Unable to establish a connection with the popup. It may have been blocked by the browser.',\n    [AuthErrorCode.POPUP_CLOSED_BY_USER]:\n      'The popup has been closed by the user before finalizing the operation.',\n    [AuthErrorCode.PROVIDER_ALREADY_LINKED]:\n      'User can only be linked to one identity for the given provider.',\n    [AuthErrorCode.QUOTA_EXCEEDED]:\n      \"The project's quota for this operation has been exceeded.\",\n    [AuthErrorCode.REDIRECT_CANCELLED_BY_USER]:\n      'The redirect operation has been cancelled by the user before finalizing.',\n    [AuthErrorCode.REDIRECT_OPERATION_PENDING]:\n      'A redirect sign-in operation is already pending.',\n    [AuthErrorCode.REJECTED_CREDENTIAL]:\n      'The request contains malformed or mismatching credentials.',\n    [AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED]:\n      'The second factor is already enrolled on this account.',\n    [AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED]:\n      'The maximum allowed number of second factors on a user has been exceeded.',\n    [AuthErrorCode.TENANT_ID_MISMATCH]:\n      \"The provided tenant ID does not match the Auth instance's tenant ID\",\n    [AuthErrorCode.TIMEOUT]: 'The operation has timed out.',\n    [AuthErrorCode.TOKEN_EXPIRED]:\n      \"The user's credential is no longer valid. The user must sign in again.\",\n    [AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER]:\n      'We have blocked all requests from this device due to unusual activity. ' +\n      'Try again later.',\n    [AuthErrorCode.UNAUTHORIZED_DOMAIN]:\n      'The domain of the continue URL is not whitelisted.  Please whitelist ' +\n      'the domain in the Firebase console.',\n    [AuthErrorCode.UNSUPPORTED_FIRST_FACTOR]:\n      'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\n    [AuthErrorCode.UNSUPPORTED_PERSISTENCE]:\n      'The current environment does not support the specified persistence type.',\n    [AuthErrorCode.UNSUPPORTED_TENANT_OPERATION]:\n      'This operation is not supported in a multi-tenant context.',\n    [AuthErrorCode.UNVERIFIED_EMAIL]:\n      'The operation requires a verified email.',\n    [AuthErrorCode.USER_CANCELLED]:\n      'The user did not grant your application the permissions it requested.',\n    [AuthErrorCode.USER_DELETED]:\n      'There is no user record corresponding to this identifier. The user may ' +\n      'have been deleted.',\n    [AuthErrorCode.USER_DISABLED]:\n      'The user account has been disabled by an administrator.',\n    [AuthErrorCode.USER_MISMATCH]:\n      'The supplied credentials do not correspond to the previously signed in user.',\n    [AuthErrorCode.USER_SIGNED_OUT]: '',\n    [AuthErrorCode.WEAK_PASSWORD]:\n      'The password must be 6 characters long or more.',\n    [AuthErrorCode.WEB_STORAGE_UNSUPPORTED]:\n      'This browser is not supported or 3rd party cookies and data may be disabled.',\n    [AuthErrorCode.ALREADY_INITIALIZED]:\n      'initializeAuth() has already been called with ' +\n      'different options. To avoid this error, call initializeAuth() with the ' +\n      'same options as when it was originally called, or call getAuth() to return the' +\n      ' already initialized instance.'\n  };\n}\n\nexport interface ErrorMapRetriever extends AuthErrorMap {\n  (): ErrorMap<AuthErrorCode>;\n}\n\nfunction _prodErrorMap(): ErrorMap<AuthErrorCode> {\n  // We will include this one message in the prod error map since by the very\n  // nature of this error, developers will never be able to see the message\n  // using the debugErrorMap (which is installed during auth initialization).\n  return {\n    [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]:\n      'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\n      'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\n      'starting any other Firebase SDK.'\n  } as ErrorMap<AuthErrorCode>;\n}\n\n/**\n * A verbose error map with detailed descriptions for most error codes.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nexport const debugErrorMap: AuthErrorMap = _debugErrorMap;\n\n/**\n * A minimal error map with all verbose error messages stripped.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nexport const prodErrorMap: AuthErrorMap = _prodErrorMap;\n\nexport interface NamedErrorParams {\n  appName: AppName;\n  credential?: AuthCredential;\n  email?: string;\n  phoneNumber?: string;\n  tenantId?: string;\n  user?: User;\n  _serverResponse?: object;\n}\n\n/**\n * @internal\n */\ntype GenericAuthErrorParams = {\n  [key in Exclude<\n    AuthErrorCode,\n    | AuthErrorCode.ARGUMENT_ERROR\n    | AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH\n    | AuthErrorCode.INTERNAL_ERROR\n    | AuthErrorCode.MFA_REQUIRED\n    | AuthErrorCode.NO_AUTH_EVENT\n    | AuthErrorCode.OPERATION_NOT_SUPPORTED\n  >]: {\n    appName?: AppName;\n    email?: string;\n    phoneNumber?: string;\n    message?: string;\n  };\n};\n\n/**\n * @internal\n */\nexport interface AuthErrorParams extends GenericAuthErrorParams {\n  [AuthErrorCode.ARGUMENT_ERROR]: { appName?: AppName };\n  [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]: { appName?: AppName };\n  [AuthErrorCode.INTERNAL_ERROR]: { appName?: AppName };\n  [AuthErrorCode.LOGIN_BLOCKED]: {\n    appName?: AppName;\n    originalMessage?: string;\n  };\n  [AuthErrorCode.OPERATION_NOT_SUPPORTED]: { appName?: AppName };\n  [AuthErrorCode.NO_AUTH_EVENT]: { appName?: AppName };\n  [AuthErrorCode.MFA_REQUIRED]: {\n    appName: AppName;\n    _serverResponse: IdTokenMfaResponse;\n  };\n  [AuthErrorCode.INVALID_CORDOVA_CONFIGURATION]: {\n    appName: AppName;\n    missingPlugin?: string;\n  };\n}\n\nexport const _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory<\n  AuthErrorCode,\n  AuthErrorParams\n>('auth', 'Firebase', _prodErrorMap());\n\n/**\n * A map of potential `Auth` error codes, for easier comparison with errors\n * thrown by the SDK.\n *\n * @remarks\n * Note that you can't tree-shake individual keys\n * in the map, so by using the map you might substantially increase your\n * bundle size.\n *\n * @public\n */\nexport const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n  ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n  ARGUMENT_ERROR: 'auth/argument-error',\n  APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n  APP_NOT_INSTALLED: 'auth/app-not-installed',\n  CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n  CODE_EXPIRED: 'auth/code-expired',\n  CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n  CORS_UNSUPPORTED: 'auth/cors-unsupported',\n  CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n  CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n  DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n  DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n  EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n  EMAIL_EXISTS: 'auth/email-already-in-use',\n  EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n  EXPIRED_OOB_CODE: 'auth/expired-action-code',\n  EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n  INTERNAL_ERROR: 'auth/internal-error',\n  INVALID_API_KEY: 'auth/invalid-api-key',\n  INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n  INVALID_APP_ID: 'auth/invalid-app-id',\n  INVALID_AUTH: 'auth/invalid-user-token',\n  INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n  INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n  INVALID_CODE: 'auth/invalid-verification-code',\n  INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n  INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n  INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n  INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n  INVALID_EMAIL: 'auth/invalid-email',\n  INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n  INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n  INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n  INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n  INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n  INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n  INVALID_OOB_CODE: 'auth/invalid-action-code',\n  INVALID_ORIGIN: 'auth/unauthorized-domain',\n  INVALID_PASSWORD: 'auth/wrong-password',\n  INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n  INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n  INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n  INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n  INVALID_SENDER: 'auth/invalid-sender',\n  INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n  INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n  MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n  MFA_REQUIRED: 'auth/multi-factor-auth-required',\n  MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n  MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n  MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n  MISSING_CODE: 'auth/missing-verification-code',\n  MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n  MISSING_IFRAME_START: 'auth/missing-iframe-start',\n  MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n  MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n  MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n  MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n  MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n  MISSING_SESSION_INFO: 'auth/missing-verification-id',\n  MODULE_DESTROYED: 'auth/app-deleted',\n  NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n  NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n  NULL_USER: 'auth/null-user',\n  NO_AUTH_EVENT: 'auth/no-auth-event',\n  NO_SUCH_PROVIDER: 'auth/no-such-provider',\n  OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n  OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n  POPUP_BLOCKED: 'auth/popup-blocked',\n  POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n  PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n  QUOTA_EXCEEDED: 'auth/quota-exceeded',\n  REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n  REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n  REJECTED_CREDENTIAL: 'auth/rejected-credential',\n  SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n  SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n  TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n  TIMEOUT: 'auth/timeout',\n  TOKEN_EXPIRED: 'auth/user-token-expired',\n  TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n  UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n  UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n  UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n  UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n  UNVERIFIED_EMAIL: 'auth/unverified-email',\n  USER_CANCELLED: 'auth/user-cancelled',\n  USER_DELETED: 'auth/user-not-found',\n  USER_DISABLED: 'auth/user-disabled',\n  USER_MISMATCH: 'auth/user-mismatch',\n  USER_SIGNED_OUT: 'auth/user-signed-out',\n  WEAK_PASSWORD: 'auth/weak-password',\n  WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n  ALREADY_INITIALIZED: 'auth/already-initialized'\n} as const;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SDK_VERSION } from '@firebase/app';\n\nexport { LogLevel };\n\nconst logClient = new Logger('@firebase/auth');\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function _getLogLevel(): LogLevel {\n  return logClient.logLevel;\n}\n\nexport function _setLogLevel(newLevel: LogLevel): void {\n  logClient.logLevel = newLevel;\n}\n\nexport function _logDebug(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    logClient.debug(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function _logError(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth } from '../../model/public_types';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  _DEFAULT_AUTH_ERROR_FACTORY,\n  AuthErrorCode,\n  AuthErrorParams,\n  prodErrorMap,\n  ErrorMapRetriever\n} from '../errors';\nimport { _logError } from './log';\n\ntype AuthErrorListParams<K> = K extends keyof AuthErrorParams\n  ? [AuthErrorParams[K]]\n  : [];\ntype LessAppName<K extends AuthErrorCode> = Omit<AuthErrorParams[K], 'appName'>;\n\n/**\n * Unconditionally fails, throwing a developer facing INTERNAL_ERROR\n *\n * @example\n * ```javascript\n * fail(auth, AuthErrorCode.MFA_REQUIRED);  // Error: the MFA_REQUIRED error needs more params than appName\n * fail(auth, AuthErrorCode.MFA_REQUIRED, {serverResponse});  // Compiles\n * fail(AuthErrorCode.INTERNAL_ERROR);  // Compiles; internal error does not need appName\n * fail(AuthErrorCode.USER_DELETED);  // Error: USER_DELETED requires app name\n * fail(auth, AuthErrorCode.USER_DELETED);  // Compiles; USER_DELETED _only_ needs app name\n * ```\n *\n * @param appName App name for tagging the error\n * @throws FirebaseError\n */\nexport function _fail<K extends AuthErrorCode>(\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): never;\nexport function _fail<K extends AuthErrorCode>(\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): never;\nexport function _fail<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): never {\n  throw createErrorInternal(authOrCode, ...rest);\n}\n\nexport function _createError<K extends AuthErrorCode>(\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): FirebaseError;\nexport function _createError<K extends AuthErrorCode>(\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): FirebaseError;\nexport function _createError<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): FirebaseError {\n  return createErrorInternal(authOrCode, ...rest);\n}\n\nexport function _errorWithCustomMessage(\n  auth: Auth,\n  code: AuthErrorCode,\n  message: string\n): FirebaseError {\n  const errorMap = {\n    ...(prodErrorMap as ErrorMapRetriever)(),\n    [code]: message\n  };\n  const factory = new ErrorFactory<AuthErrorCode, AuthErrorParams>(\n    'auth',\n    'Firebase',\n    errorMap\n  );\n  return factory.create(code, {\n    appName: auth.name\n  });\n}\n\nexport function _assertInstanceOf(\n  auth: Auth,\n  object: object,\n  instance: unknown\n): void {\n  const constructorInstance = instance as { new (...args: unknown[]): unknown };\n  if (!(object instanceof constructorInstance)) {\n    if (constructorInstance.name !== object.constructor.name) {\n      _fail(auth, AuthErrorCode.ARGUMENT_ERROR);\n    }\n\n    throw _errorWithCustomMessage(\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR,\n      `Type of ${object.constructor.name} does not match expected instance.` +\n        `Did you pass a reference from a different Auth SDK?`\n    );\n  }\n}\n\nfunction createErrorInternal<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): FirebaseError {\n  if (typeof authOrCode !== 'string') {\n    const code = rest[0] as K;\n    const fullParams = [...rest.slice(1)] as AuthErrorListParams<K>;\n    if (fullParams[0]) {\n      fullParams[0].appName = authOrCode.name;\n    }\n\n    return (authOrCode as AuthInternal)._errorFactory.create(\n      code,\n      ...fullParams\n    );\n  }\n\n  return _DEFAULT_AUTH_ERROR_FACTORY.create(\n    authOrCode,\n    ...(rest as AuthErrorListParams<K>)\n  );\n}\n\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): asserts assertion;\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): asserts assertion;\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): asserts assertion {\n  if (!assertion) {\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n}\n\n// We really do want to accept literally any function type here\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype TypeExpectation = Function | string | MapType;\n\ninterface MapType extends Record<string, TypeExpectation | Optional> {}\n\nclass Optional {\n  constructor(readonly type: TypeExpectation) {}\n}\n\nexport function opt(type: TypeExpectation): Optional {\n  return new Optional(type);\n}\n\n/**\n * Asserts the runtime types of arguments. The 'expected' field can be one of\n * a class, a string (representing a \"typeof\" call), or a record map of name\n * to type. Furthermore, the opt() function can be used to mark a field as\n * optional. For example:\n *\n * function foo(auth: Auth, profile: {displayName?: string}, update = false) {\n *   assertTypes(arguments, [AuthImpl, {displayName: opt('string')}, opt('boolean')]);\n * }\n *\n * opt() can be used for any type:\n * function foo(auth?: Auth) {\n *   assertTypes(arguments, [opt(AuthImpl)]);\n * }\n *\n * The string types can be or'd together, and you can use \"null\" as well (note\n * that typeof null === 'object'; this is an edge case). For example:\n *\n * function foo(profile: {displayName?: string | null}) {\n *   assertTypes(arguments, [{displayName: opt('string|null')}]);\n * }\n *\n * @param args\n * @param expected\n */\nexport function assertTypes(\n  args: Omit<IArguments, 'callee'>,\n  ...expected: Array<TypeExpectation | Optional>\n): void {\n  if (args.length > expected.length) {\n    _fail(AuthErrorCode.ARGUMENT_ERROR, {});\n  }\n\n  for (let i = 0; i < expected.length; i++) {\n    let expect = expected[i];\n    const arg = args[i];\n\n    if (expect instanceof Optional) {\n      // If the arg is undefined, then it matches \"optional\" and we can move to\n      // the next arg\n      if (typeof arg === 'undefined') {\n        continue;\n      }\n      expect = expect.type;\n    }\n\n    if (typeof expect === 'string') {\n      // Handle the edge case for null because typeof null === 'object'\n      if (expect.includes('null') && arg === null) {\n        continue;\n      }\n\n      const required = expect.split('|');\n      _assert(required.includes(typeof arg), AuthErrorCode.ARGUMENT_ERROR, {});\n    } else if (typeof expect === 'object') {\n      // Recursively check record arguments\n      const record = arg as Record<string, unknown>;\n      const map = expect as MapType;\n      const keys = Object.keys(expect);\n\n      assertTypes(\n        keys.map(k => record[k]),\n        ...keys.map(k => map[k])\n      );\n    } else {\n      _assert(arg instanceof expect, AuthErrorCode.ARGUMENT_ERROR, {});\n    }\n  }\n}\n\n/**\n * Unconditionally fails, throwing an internal error with the given message.\n *\n * @param failure type of failure encountered\n * @throws Error\n */\nexport function debugFail(failure: string): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message = `INTERNAL ASSERTION FAILED: ` + failure;\n  _logError(message);\n\n  // NOTE: We don't use FirebaseError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * @param assertion\n * @param message\n */\nexport function debugAssert(\n  assertion: unknown,\n  message: string\n): asserts assertion {\n  if (!assertion) {\n    debugFail(message);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\n/**\n * Our API has a lot of one-off constants that are used to do things.\n * Unfortunately we can't export these as classes instantiated directly since\n * the constructor may side effect and therefore can't be proven to be safely\n * culled. Instead, we export these classes themselves as a lowerCamelCase\n * constant, and instantiate them under the hood.\n */\nexport interface SingletonInstantiator<T> {\n  new (): T;\n}\n\nconst instanceCache: Map<unknown, unknown> = new Map();\n\nexport function _getInstance<T>(cls: unknown): T {\n  debugAssert(cls instanceof Function, 'Expected a class definition');\n  let instance = instanceCache.get(cls) as T | undefined;\n\n  if (instance) {\n    debugAssert(\n      instance instanceof cls,\n      'Instance stored in cache mismatched with class'\n    );\n    return instance;\n  }\n\n  instance = new (cls as SingletonInstantiator<T>)();\n  instanceCache.set(cls, instance);\n  return instance;\n}\n\nexport function _clearInstanceMap(): void {\n  instanceCache.clear();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp } from '@firebase/app';\nimport { deepEqual } from '@firebase/util';\nimport { Auth, Dependencies } from '../../model/public_types';\n\nimport { AuthErrorCode } from '../errors';\nimport { PersistenceInternal } from '../persistence';\nimport { _fail } from '../util/assert';\nimport { _getInstance } from '../util/instantiator';\nimport { AuthImpl } from './auth_impl';\n\n/**\n * Initializes an {@link Auth} instance with fine-grained control over\n * {@link Dependencies}.\n *\n * @remarks\n *\n * This function allows more control over the {@link Auth} instance than\n * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\n * the {@link Dependencies}. In general, `getAuth` is the easiest way to\n * initialize Auth and works for most use cases. Use `initializeAuth` if you\n * need control over which persistence layer is used, or to minimize bundle\n * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n *\n * For example, if your app only uses anonymous accounts and you only want\n * accounts saved for the current session, initialize `Auth` with:\n *\n * ```js\n * const auth = initializeAuth(app, {\n *   persistence: browserSessionPersistence,\n *   popupRedirectResolver: undefined,\n * });\n * ```\n *\n * @public\n */\nexport function initializeAuth(app: FirebaseApp, deps?: Dependencies): Auth {\n  const provider = _getProvider(app, 'auth');\n\n  if (provider.isInitialized()) {\n    const auth = provider.getImmediate() as AuthImpl;\n    const initialOptions = provider.getOptions() as Dependencies;\n    if (deepEqual(initialOptions, deps ?? {})) {\n      return auth;\n    } else {\n      _fail(auth, AuthErrorCode.ALREADY_INITIALIZED);\n    }\n  }\n\n  const auth = provider.initialize({ options: deps }) as AuthImpl;\n\n  return auth;\n}\n\nexport function _initializeAuthInstance(\n  auth: AuthImpl,\n  deps?: Dependencies\n): void {\n  const persistence = deps?.persistence || [];\n  const hierarchy = (\n    Array.isArray(persistence) ? persistence : [persistence]\n  ).map<PersistenceInternal>(_getInstance);\n  if (deps?.errorMap) {\n    auth._updateErrorMap(deps.errorMap);\n  }\n\n  // This promise is intended to float; auth initialization happens in the\n  // background, meanwhile the auth object may be used by the app.\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  auth._initializeWithPersistence(hierarchy, deps?.popupRedirectResolver);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function _getCurrentUrl(): string {\n  return (typeof self !== 'undefined' && self.location?.href) || '';\n}\n\nexport function _isHttpOrHttps(): boolean {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n\nexport function _getCurrentScheme(): string | null {\n  return (typeof self !== 'undefined' && self.location?.protocol) || null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isBrowserExtension } from '@firebase/util';\nimport { _isHttpOrHttps } from './location';\n\n/**\n * Determine whether the browser is working online\n */\nexport function _isOnline(): boolean {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator &&\n    'onLine' in navigator &&\n    typeof navigator.onLine === 'boolean' &&\n    // Apply only for traditional web apps and Chrome extensions.\n    // This is especially true for Cordova apps which have unreliable\n    // navigator.onLine behavior unless cordova-plugin-network-information is\n    // installed which overwrites the native navigator.onLine value and\n    // defines navigator.connection.\n    (_isHttpOrHttps() || isBrowserExtension() || 'connection' in navigator)\n  ) {\n    return navigator.onLine;\n  }\n  // If we can't determine the state, assume it is online.\n  return true;\n}\n\nexport function _getUserLanguage(): string | null {\n  if (typeof navigator === 'undefined') {\n    return null;\n  }\n  const navigatorLanguage: NavigatorLanguage = navigator;\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language ||\n    // Couldn't determine language.\n    null\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isMobileCordova, isReactNative } from '@firebase/util';\nimport { _isOnline } from './navigator';\nimport { debugAssert } from './assert';\n\nexport const enum DelayMin {\n  OFFLINE = 5000\n}\n\n/**\n * A structure to help pick between a range of long and short delay durations\n * depending on the current environment. In general, the long delay is used for\n * mobile environments whereas short delays are used for desktop environments.\n */\nexport class Delay {\n  // The default value for the offline delay timeout in ms.\n\n  private readonly isMobile: boolean;\n  constructor(\n    private readonly shortDelay: number,\n    private readonly longDelay: number\n  ) {\n    // Internal error when improperly initialized.\n    debugAssert(\n      longDelay > shortDelay,\n      'Short delay should be less than long delay!'\n    );\n    this.isMobile = isMobileCordova() || isReactNative();\n  }\n\n  get(): number {\n    if (!_isOnline()) {\n      // Pick the shorter timeout.\n      return Math.min(DelayMin.OFFLINE, this.shortDelay);\n    }\n    // If running in a mobile environment, return the long delay, otherwise\n    // return the short delay.\n    // This could be improved in the future to dynamically change based on other\n    // variables instead of just reading the current environment.\n    return this.isMobile ? this.longDelay : this.shortDelay;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConfigInternal } from '../../model/auth';\nimport { debugAssert } from './assert';\n\nexport function _emulatorUrl(config: ConfigInternal, path?: string): string {\n  debugAssert(config.emulator, 'Emulator should always be set here');\n  const { url } = config.emulator;\n\n  if (!path) {\n    return url;\n  }\n\n  return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugFail } from './assert';\n\nexport class FetchProvider {\n  private static fetchImpl: typeof fetch | null;\n  private static headersImpl: typeof Headers | null;\n  private static responseImpl: typeof Response | null;\n\n  static initialize(\n    fetchImpl: typeof fetch,\n    headersImpl?: typeof Headers,\n    responseImpl?: typeof Response\n  ): void {\n    this.fetchImpl = fetchImpl;\n    if (headersImpl) {\n      this.headersImpl = headersImpl;\n    }\n    if (responseImpl) {\n      this.responseImpl = responseImpl;\n    }\n  }\n\n  static fetch(): typeof fetch {\n    if (this.fetchImpl) {\n      return this.fetchImpl;\n    }\n    if (typeof self !== 'undefined' && 'fetch' in self) {\n      return self.fetch;\n    }\n    debugFail(\n      'Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n\n  static headers(): typeof Headers {\n    if (this.headersImpl) {\n      return this.headersImpl;\n    }\n    if (typeof self !== 'undefined' && 'Headers' in self) {\n      return self.Headers;\n    }\n    debugFail(\n      'Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n\n  static response(): typeof Response {\n    if (this.responseImpl) {\n      return this.responseImpl;\n    }\n    if (typeof self !== 'undefined' && 'Response' in self) {\n      return self.Response;\n    }\n    debugFail(\n      'Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../core/errors';\n\n/**\n * Errors that can be returned by the backend\n */\nexport const enum ServerError {\n  ADMIN_ONLY_OPERATION = 'ADMIN_ONLY_OPERATION',\n  BLOCKING_FUNCTION_ERROR_RESPONSE = 'BLOCKING_FUNCTION_ERROR_RESPONSE',\n  CAPTCHA_CHECK_FAILED = 'CAPTCHA_CHECK_FAILED',\n  CORS_UNSUPPORTED = 'CORS_UNSUPPORTED',\n  CREDENTIAL_MISMATCH = 'CREDENTIAL_MISMATCH',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN = 'CREDENTIAL_TOO_OLD_LOGIN_AGAIN',\n  DYNAMIC_LINK_NOT_ACTIVATED = 'DYNAMIC_LINK_NOT_ACTIVATED',\n  EMAIL_CHANGE_NEEDS_VERIFICATION = 'EMAIL_CHANGE_NEEDS_VERIFICATION',\n  EMAIL_EXISTS = 'EMAIL_EXISTS',\n  EMAIL_NOT_FOUND = 'EMAIL_NOT_FOUND',\n  EXPIRED_OOB_CODE = 'EXPIRED_OOB_CODE',\n  FEDERATED_USER_ID_ALREADY_LINKED = 'FEDERATED_USER_ID_ALREADY_LINKED',\n  INVALID_APP_CREDENTIAL = 'INVALID_APP_CREDENTIAL',\n  INVALID_APP_ID = 'INVALID_APP_ID',\n  INVALID_CERT_HASH = 'INVALID_CERT_HASH',\n  INVALID_CODE = 'INVALID_CODE',\n  INVALID_CONTINUE_URI = 'INVALID_CONTINUE_URI',\n  INVALID_CUSTOM_TOKEN = 'INVALID_CUSTOM_TOKEN',\n  INVALID_DYNAMIC_LINK_DOMAIN = 'INVALID_DYNAMIC_LINK_DOMAIN',\n  INVALID_EMAIL = 'INVALID_EMAIL',\n  INVALID_ID_TOKEN = 'INVALID_ID_TOKEN',\n  INVALID_IDP_RESPONSE = 'INVALID_IDP_RESPONSE',\n  INVALID_IDENTIFIER = 'INVALID_IDENTIFIER',\n  INVALID_MESSAGE_PAYLOAD = 'INVALID_MESSAGE_PAYLOAD',\n  INVALID_MFA_PENDING_CREDENTIAL = 'INVALID_MFA_PENDING_CREDENTIAL',\n  INVALID_OAUTH_CLIENT_ID = 'INVALID_OAUTH_CLIENT_ID',\n  INVALID_OOB_CODE = 'INVALID_OOB_CODE',\n  INVALID_PASSWORD = 'INVALID_PASSWORD',\n  INVALID_PENDING_TOKEN = 'INVALID_PENDING_TOKEN',\n  INVALID_PHONE_NUMBER = 'INVALID_PHONE_NUMBER',\n  INVALID_PROVIDER_ID = 'INVALID_PROVIDER_ID',\n  INVALID_RECIPIENT_EMAIL = 'INVALID_RECIPIENT_EMAIL',\n  INVALID_SENDER = 'INVALID_SENDER',\n  INVALID_SESSION_INFO = 'INVALID_SESSION_INFO',\n  INVALID_TEMPORARY_PROOF = 'INVALID_TEMPORARY_PROOF',\n  INVALID_TENANT_ID = 'INVALID_TENANT_ID',\n  MFA_ENROLLMENT_NOT_FOUND = 'MFA_ENROLLMENT_NOT_FOUND',\n  MISSING_ANDROID_PACKAGE_NAME = 'MISSING_ANDROID_PACKAGE_NAME',\n  MISSING_APP_CREDENTIAL = 'MISSING_APP_CREDENTIAL',\n  MISSING_CODE = 'MISSING_CODE',\n  MISSING_CONTINUE_URI = 'MISSING_CONTINUE_URI',\n  MISSING_CUSTOM_TOKEN = 'MISSING_CUSTOM_TOKEN',\n  MISSING_IOS_BUNDLE_ID = 'MISSING_IOS_BUNDLE_ID',\n  MISSING_MFA_ENROLLMENT_ID = 'MISSING_MFA_ENROLLMENT_ID',\n  MISSING_MFA_PENDING_CREDENTIAL = 'MISSING_MFA_PENDING_CREDENTIAL',\n  MISSING_OOB_CODE = 'MISSING_OOB_CODE',\n  MISSING_OR_INVALID_NONCE = 'MISSING_OR_INVALID_NONCE',\n  MISSING_PASSWORD = 'MISSING_PASSWORD',\n  MISSING_REQ_TYPE = 'MISSING_REQ_TYPE',\n  MISSING_PHONE_NUMBER = 'MISSING_PHONE_NUMBER',\n  MISSING_SESSION_INFO = 'MISSING_SESSION_INFO',\n  OPERATION_NOT_ALLOWED = 'OPERATION_NOT_ALLOWED',\n  PASSWORD_LOGIN_DISABLED = 'PASSWORD_LOGIN_DISABLED',\n  QUOTA_EXCEEDED = 'QUOTA_EXCEEDED',\n  RESET_PASSWORD_EXCEED_LIMIT = 'RESET_PASSWORD_EXCEED_LIMIT',\n  REJECTED_CREDENTIAL = 'REJECTED_CREDENTIAL',\n  SECOND_FACTOR_EXISTS = 'SECOND_FACTOR_EXISTS',\n  SECOND_FACTOR_LIMIT_EXCEEDED = 'SECOND_FACTOR_LIMIT_EXCEEDED',\n  SESSION_EXPIRED = 'SESSION_EXPIRED',\n  TENANT_ID_MISMATCH = 'TENANT_ID_MISMATCH',\n  TOKEN_EXPIRED = 'TOKEN_EXPIRED',\n  TOO_MANY_ATTEMPTS_TRY_LATER = 'TOO_MANY_ATTEMPTS_TRY_LATER',\n  UNSUPPORTED_FIRST_FACTOR = 'UNSUPPORTED_FIRST_FACTOR',\n  UNSUPPORTED_TENANT_OPERATION = 'UNSUPPORTED_TENANT_OPERATION',\n  UNAUTHORIZED_DOMAIN = 'UNAUTHORIZED_DOMAIN',\n  UNVERIFIED_EMAIL = 'UNVERIFIED_EMAIL',\n  USER_CANCELLED = 'USER_CANCELLED',\n  USER_DISABLED = 'USER_DISABLED',\n  USER_NOT_FOUND = 'USER_NOT_FOUND',\n  WEAK_PASSWORD = 'WEAK_PASSWORD'\n}\n\n/**\n * API Response in the event of an error\n */\nexport interface JsonError {\n  error: {\n    code: number;\n    message: string;\n    errors?: [\n      {\n        message: ServerError;\n        domain: string;\n        reason: string;\n      }\n    ];\n  };\n}\n\n/**\n * Type definition for a map from server errors to developer visible errors\n */\nexport declare type ServerErrorMap<ApiError extends string> = {\n  readonly [K in ApiError]: AuthErrorCode;\n};\n\n/**\n * Map from errors returned by the server to errors to developer visible errors\n */\nexport const SERVER_ERROR_MAP: Partial<ServerErrorMap<ServerError>> = {\n  // Custom token errors.\n  [ServerError.CREDENTIAL_MISMATCH]: AuthErrorCode.CREDENTIAL_MISMATCH,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_CUSTOM_TOKEN]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Create Auth URI errors.\n  [ServerError.INVALID_IDENTIFIER]: AuthErrorCode.INVALID_EMAIL,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_CONTINUE_URI]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Sign in with email and password errors (some apply to sign up too).\n  [ServerError.INVALID_PASSWORD]: AuthErrorCode.INVALID_PASSWORD,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_PASSWORD]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Sign up with email and password errors.\n  [ServerError.EMAIL_EXISTS]: AuthErrorCode.EMAIL_EXISTS,\n  [ServerError.PASSWORD_LOGIN_DISABLED]: AuthErrorCode.OPERATION_NOT_ALLOWED,\n\n  // Verify assertion for sign in with credential errors:\n  [ServerError.INVALID_IDP_RESPONSE]: AuthErrorCode.INVALID_IDP_RESPONSE,\n  [ServerError.INVALID_PENDING_TOKEN]: AuthErrorCode.INVALID_IDP_RESPONSE,\n  [ServerError.FEDERATED_USER_ID_ALREADY_LINKED]:\n    AuthErrorCode.CREDENTIAL_ALREADY_IN_USE,\n\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_REQ_TYPE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Send Password reset email errors:\n  [ServerError.EMAIL_NOT_FOUND]: AuthErrorCode.USER_DELETED,\n  [ServerError.RESET_PASSWORD_EXCEED_LIMIT]:\n    AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER,\n\n  [ServerError.EXPIRED_OOB_CODE]: AuthErrorCode.EXPIRED_OOB_CODE,\n  [ServerError.INVALID_OOB_CODE]: AuthErrorCode.INVALID_OOB_CODE,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_OOB_CODE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Operations that require ID token in request:\n  [ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN]:\n    AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN,\n  [ServerError.INVALID_ID_TOKEN]: AuthErrorCode.INVALID_AUTH,\n  [ServerError.TOKEN_EXPIRED]: AuthErrorCode.TOKEN_EXPIRED,\n  [ServerError.USER_NOT_FOUND]: AuthErrorCode.TOKEN_EXPIRED,\n\n  // Other errors.\n  [ServerError.TOO_MANY_ATTEMPTS_TRY_LATER]:\n    AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER,\n\n  // Phone Auth related errors.\n  [ServerError.INVALID_CODE]: AuthErrorCode.INVALID_CODE,\n  [ServerError.INVALID_SESSION_INFO]: AuthErrorCode.INVALID_SESSION_INFO,\n  [ServerError.INVALID_TEMPORARY_PROOF]: AuthErrorCode.INVALID_IDP_RESPONSE,\n  [ServerError.MISSING_SESSION_INFO]: AuthErrorCode.MISSING_SESSION_INFO,\n  [ServerError.SESSION_EXPIRED]: AuthErrorCode.CODE_EXPIRED,\n\n  // Other action code errors when additional settings passed.\n  // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n  // This is OK as this error will be caught by client side validation.\n  [ServerError.MISSING_ANDROID_PACKAGE_NAME]:\n    AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME,\n  [ServerError.UNAUTHORIZED_DOMAIN]: AuthErrorCode.UNAUTHORIZED_DOMAIN,\n\n  // getProjectConfig errors when clientId is passed.\n  [ServerError.INVALID_OAUTH_CLIENT_ID]: AuthErrorCode.INVALID_OAUTH_CLIENT_ID,\n\n  // User actions (sign-up or deletion) disabled errors.\n  [ServerError.ADMIN_ONLY_OPERATION]: AuthErrorCode.ADMIN_ONLY_OPERATION,\n\n  // Multi factor related errors.\n  [ServerError.INVALID_MFA_PENDING_CREDENTIAL]:\n    AuthErrorCode.INVALID_MFA_SESSION,\n  [ServerError.MFA_ENROLLMENT_NOT_FOUND]: AuthErrorCode.MFA_INFO_NOT_FOUND,\n  [ServerError.MISSING_MFA_ENROLLMENT_ID]: AuthErrorCode.MISSING_MFA_INFO,\n  [ServerError.MISSING_MFA_PENDING_CREDENTIAL]:\n    AuthErrorCode.MISSING_MFA_SESSION,\n  [ServerError.SECOND_FACTOR_EXISTS]:\n    AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED,\n  [ServerError.SECOND_FACTOR_LIMIT_EXCEEDED]:\n    AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED,\n\n  // Blocking functions related errors.\n  [ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE]: AuthErrorCode.INTERNAL_ERROR\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError, querystring } from '@firebase/util';\n\nimport { AuthErrorCode, NamedErrorParams } from '../core/errors';\nimport {\n  _createError,\n  _errorWithCustomMessage,\n  _fail\n} from '../core/util/assert';\nimport { Delay } from '../core/util/delay';\nimport { _emulatorUrl } from '../core/util/emulator';\nimport { FetchProvider } from '../core/util/fetch_provider';\nimport { Auth } from '../model/public_types';\nimport { AuthInternal, ConfigInternal } from '../model/auth';\nimport { IdTokenResponse, TaggedWithTokenResponse } from '../model/id_token';\nimport { IdTokenMfaResponse } from './authentication/mfa';\nimport { SERVER_ERROR_MAP, ServerError, ServerErrorMap } from './errors';\n\nexport const enum HttpMethod {\n  POST = 'POST',\n  GET = 'GET'\n}\n\nexport const enum HttpHeader {\n  CONTENT_TYPE = 'Content-Type',\n  X_FIREBASE_LOCALE = 'X-Firebase-Locale',\n  X_CLIENT_VERSION = 'X-Client-Version',\n  X_FIREBASE_GMPID = 'X-Firebase-gmpid',\n  X_FIREBASE_CLIENT = 'X-Firebase-Client'\n}\n\nexport const enum Endpoint {\n  CREATE_AUTH_URI = '/v1/accounts:createAuthUri',\n  DELETE_ACCOUNT = '/v1/accounts:delete',\n  RESET_PASSWORD = '/v1/accounts:resetPassword',\n  SIGN_UP = '/v1/accounts:signUp',\n  SIGN_IN_WITH_CUSTOM_TOKEN = '/v1/accounts:signInWithCustomToken',\n  SIGN_IN_WITH_EMAIL_LINK = '/v1/accounts:signInWithEmailLink',\n  SIGN_IN_WITH_IDP = '/v1/accounts:signInWithIdp',\n  SIGN_IN_WITH_PASSWORD = '/v1/accounts:signInWithPassword',\n  SIGN_IN_WITH_PHONE_NUMBER = '/v1/accounts:signInWithPhoneNumber',\n  SEND_VERIFICATION_CODE = '/v1/accounts:sendVerificationCode',\n  SEND_OOB_CODE = '/v1/accounts:sendOobCode',\n  SET_ACCOUNT_INFO = '/v1/accounts:update',\n  GET_ACCOUNT_INFO = '/v1/accounts:lookup',\n  GET_RECAPTCHA_PARAM = '/v1/recaptchaParams',\n  START_MFA_ENROLLMENT = '/v2/accounts/mfaEnrollment:start',\n  FINALIZE_MFA_ENROLLMENT = '/v2/accounts/mfaEnrollment:finalize',\n  START_MFA_SIGN_IN = '/v2/accounts/mfaSignIn:start',\n  FINALIZE_MFA_SIGN_IN = '/v2/accounts/mfaSignIn:finalize',\n  WITHDRAW_MFA = '/v2/accounts/mfaEnrollment:withdraw',\n  GET_PROJECT_CONFIG = '/v1/projects'\n}\n\nexport const DEFAULT_API_TIMEOUT_MS = new Delay(30_000, 60_000);\n\nexport function _addTidIfNecessary<T extends { tenantId?: string }>(\n  auth: Auth,\n  request: T\n): T {\n  if (auth.tenantId && !request.tenantId) {\n    return {\n      ...request,\n      tenantId: auth.tenantId\n    };\n  }\n  return request;\n}\n\nexport async function _performApiRequest<T, V>(\n  auth: Auth,\n  method: HttpMethod,\n  path: Endpoint,\n  request?: T,\n  customErrorMap: Partial<ServerErrorMap<ServerError>> = {}\n): Promise<V> {\n  return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\n    let body = {};\n    let params = {};\n    if (request) {\n      if (method === HttpMethod.GET) {\n        params = request;\n      } else {\n        body = {\n          body: JSON.stringify(request)\n        };\n      }\n    }\n\n    const query = querystring({\n      key: auth.config.apiKey,\n      ...params\n    }).slice(1);\n\n    const headers = await (auth as AuthInternal)._getAdditionalHeaders();\n    headers[HttpHeader.CONTENT_TYPE] = 'application/json';\n\n    if (auth.languageCode) {\n      headers[HttpHeader.X_FIREBASE_LOCALE] = auth.languageCode;\n    }\n\n    return FetchProvider.fetch()(\n      _getFinalTarget(auth, auth.config.apiHost, path, query),\n      {\n        method,\n        headers,\n        referrerPolicy: 'no-referrer',\n        ...body\n      }\n    );\n  });\n}\n\nexport async function _performFetchWithErrorHandling<V>(\n  auth: Auth,\n  customErrorMap: Partial<ServerErrorMap<ServerError>>,\n  fetchFn: () => Promise<Response>\n): Promise<V> {\n  (auth as AuthInternal)._canInitEmulator = false;\n  const errorMap = { ...SERVER_ERROR_MAP, ...customErrorMap };\n  try {\n    const networkTimeout = new NetworkTimeout<Response>(auth);\n    const response: Response = await Promise.race<Promise<Response>>([\n      fetchFn(),\n      networkTimeout.promise\n    ]);\n\n    // If we've reached this point, the fetch succeeded and the networkTimeout\n    // didn't throw; clear the network timeout delay so that Node won't hang\n    networkTimeout.clearNetworkTimeout();\n\n    const json = await response.json();\n    if ('needConfirmation' in json) {\n      throw _makeTaggedError(auth, AuthErrorCode.NEED_CONFIRMATION, json);\n    }\n\n    if (response.ok && !('errorMessage' in json)) {\n      return json;\n    } else {\n      const errorMessage = response.ok ? json.errorMessage : json.error.message;\n      const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\n      if (serverErrorCode === ServerError.FEDERATED_USER_ID_ALREADY_LINKED) {\n        throw _makeTaggedError(\n          auth,\n          AuthErrorCode.CREDENTIAL_ALREADY_IN_USE,\n          json\n        );\n      } else if (serverErrorCode === ServerError.EMAIL_EXISTS) {\n        throw _makeTaggedError(auth, AuthErrorCode.EMAIL_EXISTS, json);\n      } else if (serverErrorCode === ServerError.USER_DISABLED) {\n        throw _makeTaggedError(auth, AuthErrorCode.USER_DISABLED, json);\n      }\n      const authError =\n        errorMap[serverErrorCode as ServerError] ||\n        (serverErrorCode\n          .toLowerCase()\n          .replace(/[_\\s]+/g, '-') as unknown as AuthErrorCode);\n      if (serverErrorMessage) {\n        throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n      } else {\n        _fail(auth, authError);\n      }\n    }\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      throw e;\n    }\n    _fail(auth, AuthErrorCode.INTERNAL_ERROR, { 'message': String(e) });\n  }\n}\n\nexport async function _performSignInRequest<T, V extends IdTokenResponse>(\n  auth: Auth,\n  method: HttpMethod,\n  path: Endpoint,\n  request?: T,\n  customErrorMap: Partial<ServerErrorMap<ServerError>> = {}\n): Promise<V> {\n  const serverResponse = (await _performApiRequest<T, V | IdTokenMfaResponse>(\n    auth,\n    method,\n    path,\n    request,\n    customErrorMap\n  )) as V;\n  if ('mfaPendingCredential' in serverResponse) {\n    _fail(auth, AuthErrorCode.MFA_REQUIRED, {\n      _serverResponse: serverResponse\n    });\n  }\n\n  return serverResponse;\n}\n\nexport function _getFinalTarget(\n  auth: Auth,\n  host: string,\n  path: string,\n  query: string\n): string {\n  const base = `${host}${path}?${query}`;\n\n  if (!(auth as AuthInternal).config.emulator) {\n    return `${auth.config.apiScheme}://${base}`;\n  }\n\n  return _emulatorUrl(auth.config as ConfigInternal, base);\n}\n\nclass NetworkTimeout<T> {\n  // Node timers and browser timers are fundamentally incompatible, but we\n  // don't care about the value here\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private timer: any | null = null;\n  readonly promise = new Promise<T>((_, reject) => {\n    this.timer = setTimeout(() => {\n      return reject(\n        _createError(this.auth, AuthErrorCode.NETWORK_REQUEST_FAILED)\n      );\n    }, DEFAULT_API_TIMEOUT_MS.get());\n  });\n\n  clearNetworkTimeout(): void {\n    clearTimeout(this.timer);\n  }\n\n  constructor(private readonly auth: Auth) {}\n}\n\ninterface PotentialResponse extends IdTokenResponse {\n  email?: string;\n  phoneNumber?: string;\n}\n\nexport function _makeTaggedError(\n  auth: Auth,\n  code: AuthErrorCode,\n  response: PotentialResponse\n): FirebaseError {\n  const errorParams: NamedErrorParams = {\n    appName: auth.name\n  };\n\n  if (response.email) {\n    errorParams.email = response.email;\n  }\n  if (response.phoneNumber) {\n    errorParams.phoneNumber = response.phoneNumber;\n  }\n\n  const error = _createError(auth, code, errorParams);\n\n  // We know customData is defined on error because errorParams is defined\n  (error.customData! as TaggedWithTokenResponse)._tokenResponse = response;\n  return error;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Endpoint, HttpMethod, _performApiRequest } from '../index';\nimport { MfaEnrollment } from './mfa';\nimport { Auth } from '../../model/public_types';\n\nexport interface DeleteAccountRequest {\n  idToken: string;\n}\n\nexport async function deleteAccount(\n  auth: Auth,\n  request: DeleteAccountRequest\n): Promise<void> {\n  return _performApiRequest<DeleteAccountRequest, void>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.DELETE_ACCOUNT,\n    request\n  );\n}\n\nexport interface ProviderUserInfo {\n  providerId: string;\n  rawId?: string;\n  email?: string;\n  displayName?: string;\n  photoUrl?: string;\n  phoneNumber?: string;\n}\n\nexport interface DeleteLinkedAccountsRequest {\n  idToken: string;\n  deleteProvider: string[];\n}\n\nexport interface DeleteLinkedAccountsResponse {\n  providerUserInfo: ProviderUserInfo[];\n}\n\nexport async function deleteLinkedAccounts(\n  auth: Auth,\n  request: DeleteLinkedAccountsRequest\n): Promise<DeleteLinkedAccountsResponse> {\n  return _performApiRequest<\n    DeleteLinkedAccountsRequest,\n    DeleteLinkedAccountsResponse\n  >(auth, HttpMethod.POST, Endpoint.SET_ACCOUNT_INFO, request);\n}\n\nexport interface APIUserInfo {\n  localId?: string;\n  displayName?: string;\n  photoUrl?: string;\n  email?: string;\n  emailVerified?: boolean;\n  phoneNumber?: string;\n  lastLoginAt?: number;\n  createdAt?: number;\n  tenantId?: string;\n  passwordHash?: string;\n  providerUserInfo?: ProviderUserInfo[];\n  mfaInfo?: MfaEnrollment[];\n}\n\nexport interface GetAccountInfoRequest {\n  idToken: string;\n}\n\nexport interface GetAccountInfoResponse {\n  users: APIUserInfo[];\n}\n\nexport async function getAccountInfo(\n  auth: Auth,\n  request: GetAccountInfoRequest\n): Promise<GetAccountInfoResponse> {\n  return _performApiRequest<GetAccountInfoRequest, GetAccountInfoResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.GET_ACCOUNT_INFO,\n    request\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function utcTimestampToDateString(\n  utcTimestamp?: string | number\n): string | undefined {\n  if (!utcTimestamp) {\n    return undefined;\n  }\n  try {\n    // Convert to date object.\n    const date = new Date(Number(utcTimestamp));\n    // Test date is valid.\n    if (!isNaN(date.getTime())) {\n      // Convert to UTC date string.\n      return date.toUTCString();\n    }\n  } catch (e) {\n    // Do nothing. undefined will be returned.\n  }\n  return undefined;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdTokenResult, ParsedToken, User } from '../../model/public_types';\nimport { base64Decode, getModularInstance } from '@firebase/util';\n\nimport { UserInternal } from '../../model/user';\nimport { _assert } from '../util/assert';\nimport { _logError } from '../util/log';\nimport { utcTimestampToDateString } from '../util/time';\nimport { AuthErrorCode } from '../errors';\n\n/**\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport function getIdToken(user: User, forceRefresh = false): Promise<string> {\n  return getModularInstance(user).getIdToken(forceRefresh);\n}\n\n/**\n * Returns a deserialized JSON Web Token (JWT) used to identitfy the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getIdTokenResult(\n  user: User,\n  forceRefresh = false\n): Promise<IdTokenResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const token = await userInternal.getIdToken(forceRefresh);\n  const claims = _parseToken(token);\n\n  _assert(\n    claims && claims.exp && claims.auth_time && claims.iat,\n    userInternal.auth,\n    AuthErrorCode.INTERNAL_ERROR\n  );\n  const firebase =\n    typeof claims.firebase === 'object' ? claims.firebase : undefined;\n\n  const signInProvider: string | undefined = firebase?.['sign_in_provider'];\n\n  return {\n    claims,\n    token,\n    authTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.auth_time)\n    )!,\n    issuedAtTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.iat)\n    )!,\n    expirationTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.exp)\n    )!,\n    signInProvider: signInProvider || null,\n    signInSecondFactor: firebase?.['sign_in_second_factor'] || null\n  };\n}\n\nfunction secondsStringToMilliseconds(seconds: string): number {\n  return Number(seconds) * 1000;\n}\n\nexport function _parseToken(token: string): ParsedToken | null {\n  const [algorithm, payload, signature] = token.split('.');\n  if (\n    algorithm === undefined ||\n    payload === undefined ||\n    signature === undefined\n  ) {\n    _logError('JWT malformed, contained fewer than 3 sections');\n    return null;\n  }\n\n  try {\n    const decoded = base64Decode(payload);\n    if (!decoded) {\n      _logError('Failed to decode base64 JWT payload');\n      return null;\n    }\n    return JSON.parse(decoded);\n  } catch (e) {\n    _logError(\n      'Caught error parsing JWT payload as JSON',\n      (e as Error)?.toString()\n    );\n    return null;\n  }\n}\n\n/**\n * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\n */\nexport function _tokenExpiresIn(token: string): number {\n  const parsedToken = _parseToken(token);\n  _assert(parsedToken, AuthErrorCode.INTERNAL_ERROR);\n  _assert(typeof parsedToken.exp !== 'undefined', AuthErrorCode.INTERNAL_ERROR);\n  _assert(typeof parsedToken.iat !== 'undefined', AuthErrorCode.INTERNAL_ERROR);\n  return Number(parsedToken.exp) - Number(parsedToken.iat);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\n\nexport async function _logoutIfInvalidated<T>(\n  user: UserInternal,\n  promise: Promise<T>,\n  bypassAuthState = false\n): Promise<T> {\n  if (bypassAuthState) {\n    return promise;\n  }\n  try {\n    return await promise;\n  } catch (e) {\n    if (e instanceof FirebaseError && isUserInvalidated(e)) {\n      if (user.auth.currentUser === user) {\n        await user.auth.signOut();\n      }\n    }\n\n    throw e;\n  }\n}\n\nfunction isUserInvalidated({ code }: FirebaseError): boolean {\n  return (\n    code === `auth/${AuthErrorCode.USER_DISABLED}` ||\n    code === `auth/${AuthErrorCode.TOKEN_EXPIRED}`\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\n\n// Refresh the token five minutes before expiration\nexport const enum Duration {\n  OFFSET = 5 * 1000 * 60,\n  RETRY_BACKOFF_MIN = 30 * 1000,\n  RETRY_BACKOFF_MAX = 16 * 60 * 1000\n}\n\nexport class ProactiveRefresh {\n  private isRunning = false;\n\n  // Node timers and browser timers return fundamentally different types.\n  // We don't actually care what the value is but TS won't accept unknown and\n  // we can't cast properly in both environments.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private timerId: any | null = null;\n  private errorBackoff = Duration.RETRY_BACKOFF_MIN;\n\n  constructor(private readonly user: UserInternal) {}\n\n  _start(): void {\n    if (this.isRunning) {\n      return;\n    }\n\n    this.isRunning = true;\n    this.schedule();\n  }\n\n  _stop(): void {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this.isRunning = false;\n    if (this.timerId !== null) {\n      clearTimeout(this.timerId);\n    }\n  }\n\n  private getInterval(wasError: boolean): number {\n    if (wasError) {\n      const interval = this.errorBackoff;\n      this.errorBackoff = Math.min(\n        this.errorBackoff * 2,\n        Duration.RETRY_BACKOFF_MAX\n      );\n      return interval;\n    } else {\n      // Reset the error backoff\n      this.errorBackoff = Duration.RETRY_BACKOFF_MIN;\n      const expTime = this.user.stsTokenManager.expirationTime ?? 0;\n      const interval = expTime - Date.now() - Duration.OFFSET;\n\n      return Math.max(0, interval);\n    }\n  }\n\n  private schedule(wasError = false): void {\n    if (!this.isRunning) {\n      // Just in case...\n      return;\n    }\n\n    const interval = this.getInterval(wasError);\n    this.timerId = setTimeout(async () => {\n      await this.iteration();\n    }, interval);\n  }\n\n  private async iteration(): Promise<void> {\n    try {\n      await this.user.getIdToken(true);\n    } catch (e) {\n      // Only retry on network errors\n      if (\n        (e as FirebaseError)?.code ===\n        `auth/${AuthErrorCode.NETWORK_REQUEST_FAILED}`\n      ) {\n        this.schedule(/* wasError */ true);\n      }\n\n      return;\n    }\n    this.schedule();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserMetadata as UserMetadataType } from '../../model/public_types';\n\nimport { utcTimestampToDateString } from '../util/time';\n\nexport class UserMetadata implements UserMetadataType {\n  creationTime?: string;\n  lastSignInTime?: string;\n\n  constructor(\n    private createdAt?: string | number,\n    private lastLoginAt?: string | number\n  ) {\n    this._initializeTime();\n  }\n\n  private _initializeTime(): void {\n    this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n    this.creationTime = utcTimestampToDateString(this.createdAt);\n  }\n\n  _copy(metadata: UserMetadata): void {\n    this.createdAt = metadata.createdAt;\n    this.lastLoginAt = metadata.lastLoginAt;\n    this._initializeTime();\n  }\n\n  toJSON(): object {\n    return {\n      createdAt: this.createdAt,\n      lastLoginAt: this.lastLoginAt\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User, UserInfo } from '../../model/public_types';\n\nimport {\n  getAccountInfo,\n  ProviderUserInfo\n} from '../../api/account_management/account';\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { UserMetadata } from './user_metadata';\nimport { getModularInstance } from '@firebase/util';\n\nexport async function _reloadWithoutSaving(user: UserInternal): Promise<void> {\n  const auth = user.auth;\n  const idToken = await user.getIdToken();\n  const response = await _logoutIfInvalidated(\n    user,\n    getAccountInfo(auth, { idToken })\n  );\n\n  _assert(response?.users.length, auth, AuthErrorCode.INTERNAL_ERROR);\n\n  const coreAccount = response.users[0];\n\n  user._notifyReloadListener(coreAccount);\n\n  const newProviderData = coreAccount.providerUserInfo?.length\n    ? extractProviderData(coreAccount.providerUserInfo)\n    : [];\n\n  const providerData = mergeProviderData(user.providerData, newProviderData);\n\n  // Preserves the non-nonymous status of the stored user, even if no more\n  // credentials (federated or email/password) are linked to the user. If\n  // the user was previously anonymous, then use provider data to update.\n  // On the other hand, if it was not anonymous before, it should never be\n  // considered anonymous now.\n  const oldIsAnonymous = user.isAnonymous;\n  const newIsAnonymous =\n    !(user.email && coreAccount.passwordHash) && !providerData?.length;\n  const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n\n  const updates: Partial<UserInternal> = {\n    uid: coreAccount.localId,\n    displayName: coreAccount.displayName || null,\n    photoURL: coreAccount.photoUrl || null,\n    email: coreAccount.email || null,\n    emailVerified: coreAccount.emailVerified || false,\n    phoneNumber: coreAccount.phoneNumber || null,\n    tenantId: coreAccount.tenantId || null,\n    providerData,\n    metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n    isAnonymous\n  };\n\n  Object.assign(user, updates);\n}\n\n/**\n * Reloads user account data, if signed in.\n *\n * @param user - The user.\n *\n * @public\n */\nexport async function reload(user: User): Promise<void> {\n  const userInternal: UserInternal = getModularInstance(user) as UserInternal;\n  await _reloadWithoutSaving(userInternal);\n\n  // Even though the current user hasn't changed, update\n  // current user will trigger a persistence update w/ the\n  // new info.\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  userInternal.auth._notifyListenersIfCurrent(userInternal);\n}\n\nfunction mergeProviderData(\n  original: UserInfo[],\n  newData: UserInfo[]\n): UserInfo[] {\n  const deduped = original.filter(\n    o => !newData.some(n => n.providerId === o.providerId)\n  );\n  return [...deduped, ...newData];\n}\n\nfunction extractProviderData(providers: ProviderUserInfo[]): UserInfo[] {\n  return providers.map(({ providerId, ...provider }) => {\n    return {\n      providerId,\n      uid: provider.rawId || '',\n      displayName: provider.displayName || null,\n      email: provider.email || null,\n      phoneNumber: provider.phoneNumber || null,\n      photoURL: provider.photoUrl || null\n    };\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable camelcase */\n\nimport { querystring } from '@firebase/util';\n\nimport {\n  _getFinalTarget,\n  _performFetchWithErrorHandling,\n  HttpMethod,\n  HttpHeader\n} from '../index';\nimport { FetchProvider } from '../../core/util/fetch_provider';\nimport { Auth } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\n\nexport const enum Endpoint {\n  TOKEN = '/v1/token'\n}\n\n/** The server responses with snake_case; we convert to camelCase */\ninterface RequestStsTokenServerResponse {\n  access_token: string;\n  expires_in: string;\n  refresh_token: string;\n}\n\nexport interface RequestStsTokenResponse {\n  accessToken: string;\n  expiresIn: string;\n  refreshToken: string;\n}\n\nexport async function requestStsToken(\n  auth: Auth,\n  refreshToken: string\n): Promise<RequestStsTokenResponse> {\n  const response =\n    await _performFetchWithErrorHandling<RequestStsTokenServerResponse>(\n      auth,\n      {},\n      async () => {\n        const body = querystring({\n          'grant_type': 'refresh_token',\n          'refresh_token': refreshToken\n        }).slice(1);\n        const { tokenApiHost, apiKey } = auth.config;\n        const url = _getFinalTarget(\n          auth,\n          tokenApiHost,\n          Endpoint.TOKEN,\n          `key=${apiKey}`\n        );\n\n        const headers = await (auth as AuthInternal)._getAdditionalHeaders();\n        headers[HttpHeader.CONTENT_TYPE] = 'application/x-www-form-urlencoded';\n\n        return FetchProvider.fetch()(url, {\n          method: HttpMethod.POST,\n          headers,\n          body\n        });\n      }\n    );\n\n  // The response comes back in snake_case. Convert to camel:\n  return {\n    accessToken: response.access_token,\n    expiresIn: response.expires_in,\n    refreshToken: response.refresh_token\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FinalizeMfaResponse } from '../../api/authentication/mfa';\nimport { requestStsToken } from '../../api/authentication/token';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { PersistedBlob } from '../persistence';\nimport { _assert, debugFail } from '../util/assert';\nimport { _tokenExpiresIn } from './id_token_result';\n\n/**\n * The number of milliseconds before the official expiration time of a token\n * to refresh that token, to provide a buffer for RPCs to complete.\n */\nexport const enum Buffer {\n  TOKEN_REFRESH = 30_000\n}\n\n/**\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\n * it references AuthInternal which has a circular dependency with UserInternal.\n *\n * @internal\n */\nexport class StsTokenManager {\n  refreshToken: string | null = null;\n  accessToken: string | null = null;\n  expirationTime: number | null = null;\n\n  get isExpired(): boolean {\n    return (\n      !this.expirationTime ||\n      Date.now() > this.expirationTime - Buffer.TOKEN_REFRESH\n    );\n  }\n\n  updateFromServerResponse(\n    response: IdTokenResponse | FinalizeMfaResponse\n  ): void {\n    _assert(response.idToken, AuthErrorCode.INTERNAL_ERROR);\n    _assert(\n      typeof response.idToken !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    _assert(\n      typeof response.refreshToken !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    const expiresIn =\n      'expiresIn' in response && typeof response.expiresIn !== 'undefined'\n        ? Number(response.expiresIn)\n        : _tokenExpiresIn(response.idToken);\n    this.updateTokensAndExpiration(\n      response.idToken,\n      response.refreshToken,\n      expiresIn\n    );\n  }\n\n  async getToken(\n    auth: AuthInternal,\n    forceRefresh = false\n  ): Promise<string | null> {\n    _assert(\n      !this.accessToken || this.refreshToken,\n      auth,\n      AuthErrorCode.TOKEN_EXPIRED\n    );\n\n    if (!forceRefresh && this.accessToken && !this.isExpired) {\n      return this.accessToken;\n    }\n\n    if (this.refreshToken) {\n      await this.refresh(auth, this.refreshToken!);\n      return this.accessToken;\n    }\n\n    return null;\n  }\n\n  clearRefreshToken(): void {\n    this.refreshToken = null;\n  }\n\n  private async refresh(auth: AuthInternal, oldToken: string): Promise<void> {\n    const { accessToken, refreshToken, expiresIn } = await requestStsToken(\n      auth,\n      oldToken\n    );\n    this.updateTokensAndExpiration(\n      accessToken,\n      refreshToken,\n      Number(expiresIn)\n    );\n  }\n\n  private updateTokensAndExpiration(\n    accessToken: string,\n    refreshToken: string,\n    expiresInSec: number\n  ): void {\n    this.refreshToken = refreshToken || null;\n    this.accessToken = accessToken || null;\n    this.expirationTime = Date.now() + expiresInSec * 1000;\n  }\n\n  static fromJSON(appName: string, object: PersistedBlob): StsTokenManager {\n    const { refreshToken, accessToken, expirationTime } = object;\n\n    const manager = new StsTokenManager();\n    if (refreshToken) {\n      _assert(typeof refreshToken === 'string', AuthErrorCode.INTERNAL_ERROR, {\n        appName\n      });\n      manager.refreshToken = refreshToken;\n    }\n    if (accessToken) {\n      _assert(typeof accessToken === 'string', AuthErrorCode.INTERNAL_ERROR, {\n        appName\n      });\n      manager.accessToken = accessToken;\n    }\n    if (expirationTime) {\n      _assert(\n        typeof expirationTime === 'number',\n        AuthErrorCode.INTERNAL_ERROR,\n        {\n          appName\n        }\n      );\n      manager.expirationTime = expirationTime;\n    }\n    return manager;\n  }\n\n  toJSON(): object {\n    return {\n      refreshToken: this.refreshToken,\n      accessToken: this.accessToken,\n      expirationTime: this.expirationTime\n    };\n  }\n\n  _assign(stsTokenManager: StsTokenManager): void {\n    this.accessToken = stsTokenManager.accessToken;\n    this.refreshToken = stsTokenManager.refreshToken;\n    this.expirationTime = stsTokenManager.expirationTime;\n  }\n\n  _clone(): StsTokenManager {\n    return Object.assign(new StsTokenManager(), this.toJSON());\n  }\n\n  _performRefresh(): never {\n    return debugFail('not implemented');\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdTokenResult } from '../../model/public_types';\nimport { NextFn } from '@firebase/util';\n\nimport {\n  APIUserInfo,\n  deleteAccount\n} from '../../api/account_management/account';\nimport { FinalizeMfaResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport {\n  MutableUserInfo,\n  UserInternal,\n  UserParameters\n} from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { PersistedBlob } from '../persistence';\nimport { _assert } from '../util/assert';\nimport { getIdTokenResult } from './id_token_result';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { ProactiveRefresh } from './proactive_refresh';\nimport { _reloadWithoutSaving, reload } from './reload';\nimport { StsTokenManager } from './token_manager';\nimport { UserMetadata } from './user_metadata';\nimport { ProviderId } from '../../model/enums';\n\nfunction assertStringOrUndefined(\n  assertion: unknown,\n  appName: string\n): asserts assertion is string | undefined {\n  _assert(\n    typeof assertion === 'string' || typeof assertion === 'undefined',\n    AuthErrorCode.INTERNAL_ERROR,\n    { appName }\n  );\n}\n\nexport class UserImpl implements UserInternal {\n  // For the user object, provider is always Firebase.\n  readonly providerId = ProviderId.FIREBASE;\n  stsTokenManager: StsTokenManager;\n  // Last known accessToken so we know when it changes\n  private accessToken: string | null;\n\n  uid: string;\n  auth: AuthInternal;\n  emailVerified: boolean;\n  isAnonymous: boolean;\n  tenantId: string | null;\n  readonly metadata: UserMetadata;\n  providerData: MutableUserInfo[];\n\n  // Optional fields from UserInfo\n  displayName: string | null;\n  email: string | null;\n  phoneNumber: string | null;\n  photoURL: string | null;\n\n  _redirectEventId?: string;\n  private readonly proactiveRefresh = new ProactiveRefresh(this);\n\n  constructor({ uid, auth, stsTokenManager, ...opt }: UserParameters) {\n    this.uid = uid;\n    this.auth = auth;\n    this.stsTokenManager = stsTokenManager;\n    this.accessToken = stsTokenManager.accessToken;\n    this.displayName = opt.displayName || null;\n    this.email = opt.email || null;\n    this.emailVerified = opt.emailVerified || false;\n    this.phoneNumber = opt.phoneNumber || null;\n    this.photoURL = opt.photoURL || null;\n    this.isAnonymous = opt.isAnonymous || false;\n    this.tenantId = opt.tenantId || null;\n    this.providerData = opt.providerData ? [...opt.providerData] : [];\n    this.metadata = new UserMetadata(\n      opt.createdAt || undefined,\n      opt.lastLoginAt || undefined\n    );\n  }\n\n  async getIdToken(forceRefresh?: boolean): Promise<string> {\n    const accessToken = await _logoutIfInvalidated(\n      this,\n      this.stsTokenManager.getToken(this.auth, forceRefresh)\n    );\n    _assert(accessToken, this.auth, AuthErrorCode.INTERNAL_ERROR);\n\n    if (this.accessToken !== accessToken) {\n      this.accessToken = accessToken;\n      await this.auth._persistUserIfCurrent(this);\n      this.auth._notifyListenersIfCurrent(this);\n    }\n\n    return accessToken;\n  }\n\n  getIdTokenResult(forceRefresh?: boolean): Promise<IdTokenResult> {\n    return getIdTokenResult(this, forceRefresh);\n  }\n\n  reload(): Promise<void> {\n    return reload(this);\n  }\n\n  private reloadUserInfo: APIUserInfo | null = null;\n  private reloadListener: NextFn<APIUserInfo> | null = null;\n\n  _assign(user: UserInternal): void {\n    if (this === user) {\n      return;\n    }\n    _assert(this.uid === user.uid, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.displayName = user.displayName;\n    this.photoURL = user.photoURL;\n    this.email = user.email;\n    this.emailVerified = user.emailVerified;\n    this.phoneNumber = user.phoneNumber;\n    this.isAnonymous = user.isAnonymous;\n    this.tenantId = user.tenantId;\n    this.providerData = user.providerData.map(userInfo => ({ ...userInfo }));\n    this.metadata._copy(user.metadata);\n    this.stsTokenManager._assign(user.stsTokenManager);\n  }\n\n  _clone(auth: AuthInternal): UserInternal {\n    const newUser = new UserImpl({\n      ...this,\n      auth,\n      stsTokenManager: this.stsTokenManager._clone()\n    });\n    newUser.metadata._copy(this.metadata);\n    return newUser;\n  }\n\n  _onReload(callback: NextFn<APIUserInfo>): void {\n    // There should only ever be one listener, and that is a single instance of MultiFactorUser\n    _assert(!this.reloadListener, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.reloadListener = callback;\n    if (this.reloadUserInfo) {\n      this._notifyReloadListener(this.reloadUserInfo);\n      this.reloadUserInfo = null;\n    }\n  }\n\n  _notifyReloadListener(userInfo: APIUserInfo): void {\n    if (this.reloadListener) {\n      this.reloadListener(userInfo);\n    } else {\n      // If no listener is subscribed yet, save the result so it's available when they do subscribe\n      this.reloadUserInfo = userInfo;\n    }\n  }\n\n  _startProactiveRefresh(): void {\n    this.proactiveRefresh._start();\n  }\n\n  _stopProactiveRefresh(): void {\n    this.proactiveRefresh._stop();\n  }\n\n  async _updateTokensIfNecessary(\n    response: IdTokenResponse | FinalizeMfaResponse,\n    reload = false\n  ): Promise<void> {\n    let tokensRefreshed = false;\n    if (\n      response.idToken &&\n      response.idToken !== this.stsTokenManager.accessToken\n    ) {\n      this.stsTokenManager.updateFromServerResponse(response);\n      tokensRefreshed = true;\n    }\n\n    if (reload) {\n      await _reloadWithoutSaving(this);\n    }\n\n    await this.auth._persistUserIfCurrent(this);\n    if (tokensRefreshed) {\n      this.auth._notifyListenersIfCurrent(this);\n    }\n  }\n\n  async delete(): Promise<void> {\n    const idToken = await this.getIdToken();\n    await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));\n    this.stsTokenManager.clearRefreshToken();\n\n    // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n    //       cancels pending actions...\n\n    return this.auth.signOut();\n  }\n\n  toJSON(): PersistedBlob {\n    return {\n      uid: this.uid,\n      email: this.email || undefined,\n      emailVerified: this.emailVerified,\n      displayName: this.displayName || undefined,\n      isAnonymous: this.isAnonymous,\n      photoURL: this.photoURL || undefined,\n      phoneNumber: this.phoneNumber || undefined,\n      tenantId: this.tenantId || undefined,\n      providerData: this.providerData.map(userInfo => ({ ...userInfo })),\n      stsTokenManager: this.stsTokenManager.toJSON(),\n      // Redirect event ID must be maintained in case there is a pending\n      // redirect event.\n      _redirectEventId: this._redirectEventId,\n      ...this.metadata.toJSON(),\n\n      // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n      apiKey: this.auth.config.apiKey,\n      appName: this.auth.name\n      // Missing authDomain will be tolerated by the legacy SDK.\n      // stsTokenManager.apiKey isn't actually required (despite the legacy SDK persisting it).\n    };\n  }\n\n  get refreshToken(): string {\n    return this.stsTokenManager.refreshToken || '';\n  }\n\n  static _fromJSON(auth: AuthInternal, object: PersistedBlob): UserInternal {\n    const displayName = object.displayName ?? undefined;\n    const email = object.email ?? undefined;\n    const phoneNumber = object.phoneNumber ?? undefined;\n    const photoURL = object.photoURL ?? undefined;\n    const tenantId = object.tenantId ?? undefined;\n    const _redirectEventId = object._redirectEventId ?? undefined;\n    const createdAt = object.createdAt ?? undefined;\n    const lastLoginAt = object.lastLoginAt ?? undefined;\n    const {\n      uid,\n      emailVerified,\n      isAnonymous,\n      providerData,\n      stsTokenManager: plainObjectTokenManager\n    } = object;\n\n    _assert(uid && plainObjectTokenManager, auth, AuthErrorCode.INTERNAL_ERROR);\n\n    const stsTokenManager = StsTokenManager.fromJSON(\n      this.name,\n      plainObjectTokenManager as PersistedBlob\n    );\n\n    _assert(typeof uid === 'string', auth, AuthErrorCode.INTERNAL_ERROR);\n    assertStringOrUndefined(displayName, auth.name);\n    assertStringOrUndefined(email, auth.name);\n    _assert(\n      typeof emailVerified === 'boolean',\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    _assert(\n      typeof isAnonymous === 'boolean',\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    assertStringOrUndefined(phoneNumber, auth.name);\n    assertStringOrUndefined(photoURL, auth.name);\n    assertStringOrUndefined(tenantId, auth.name);\n    assertStringOrUndefined(_redirectEventId, auth.name);\n    assertStringOrUndefined(createdAt, auth.name);\n    assertStringOrUndefined(lastLoginAt, auth.name);\n    const user = new UserImpl({\n      uid,\n      auth,\n      email,\n      emailVerified,\n      displayName,\n      isAnonymous,\n      photoURL,\n      phoneNumber,\n      tenantId,\n      stsTokenManager,\n      createdAt,\n      lastLoginAt\n    });\n\n    if (providerData && Array.isArray(providerData)) {\n      user.providerData = providerData.map(userInfo => ({ ...userInfo }));\n    }\n\n    if (_redirectEventId) {\n      user._redirectEventId = _redirectEventId;\n    }\n\n    return user;\n  }\n\n  /**\n   * Initialize a User from an idToken server response\n   * @param auth\n   * @param idTokenResponse\n   */\n  static async _fromIdTokenResponse(\n    auth: AuthInternal,\n    idTokenResponse: IdTokenResponse,\n    isAnonymous: boolean = false\n  ): Promise<UserInternal> {\n    const stsTokenManager = new StsTokenManager();\n    stsTokenManager.updateFromServerResponse(idTokenResponse);\n\n    // Initialize the Firebase Auth user.\n    const user = new UserImpl({\n      uid: idTokenResponse.localId,\n      auth,\n      stsTokenManager,\n      isAnonymous\n    });\n\n    // Updates the user info and data and resolves with a user instance.\n    await _reloadWithoutSaving(user);\n    return user;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport {\n  PersistenceInternal,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener\n} from '../persistence';\n\nexport class InMemoryPersistence implements PersistenceInternal {\n  static type: 'NONE' = 'NONE';\n  readonly type = PersistenceType.NONE;\n  storage: Record<string, PersistenceValue> = {};\n\n  async _isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    this.storage[key] = value;\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const value = this.storage[key];\n    return value === undefined ? null : (value as T);\n  }\n\n  async _remove(key: string): Promise<void> {\n    delete this.storage[key];\n  }\n\n  _addListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  }\n\n  _removeListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type 'NONE'.\n *\n * @public\n */\nexport const inMemoryPersistence: Persistence = InMemoryPersistence;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiKey, AppName, AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { PersistedBlob, PersistenceInternal } from '../persistence';\nimport { UserImpl } from '../user/user_impl';\nimport { _getInstance } from '../util/instantiator';\nimport { inMemoryPersistence } from './in_memory';\n\nexport const enum KeyName {\n  AUTH_USER = 'authUser',\n  AUTH_EVENT = 'authEvent',\n  REDIRECT_USER = 'redirectUser',\n  PERSISTENCE_USER = 'persistence'\n}\nexport const enum Namespace {\n  PERSISTENCE = 'firebase'\n}\n\nexport function _persistenceKeyName(\n  key: string,\n  apiKey: ApiKey,\n  appName: AppName\n): string {\n  return `${Namespace.PERSISTENCE}:${key}:${apiKey}:${appName}`;\n}\n\nexport class PersistenceUserManager {\n  private readonly fullUserKey: string;\n  private readonly fullPersistenceKey: string;\n  private readonly boundEventHandler: () => void;\n\n  private constructor(\n    public persistence: PersistenceInternal,\n    private readonly auth: AuthInternal,\n    private readonly userKey: string\n  ) {\n    const { config, name } = this.auth;\n    this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n    this.fullPersistenceKey = _persistenceKeyName(\n      KeyName.PERSISTENCE_USER,\n      config.apiKey,\n      name\n    );\n    this.boundEventHandler = auth._onStorageEvent.bind(auth);\n    this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n  }\n\n  setCurrentUser(user: UserInternal): Promise<void> {\n    return this.persistence._set(this.fullUserKey, user.toJSON());\n  }\n\n  async getCurrentUser(): Promise<UserInternal | null> {\n    const blob = await this.persistence._get<PersistedBlob>(this.fullUserKey);\n    return blob ? UserImpl._fromJSON(this.auth, blob) : null;\n  }\n\n  removeCurrentUser(): Promise<void> {\n    return this.persistence._remove(this.fullUserKey);\n  }\n\n  savePersistenceForRedirect(): Promise<void> {\n    return this.persistence._set(\n      this.fullPersistenceKey,\n      this.persistence.type\n    );\n  }\n\n  async setPersistence(newPersistence: PersistenceInternal): Promise<void> {\n    if (this.persistence === newPersistence) {\n      return;\n    }\n\n    const currentUser = await this.getCurrentUser();\n    await this.removeCurrentUser();\n\n    this.persistence = newPersistence;\n\n    if (currentUser) {\n      return this.setCurrentUser(currentUser);\n    }\n  }\n\n  delete(): void {\n    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n  }\n\n  static async create(\n    auth: AuthInternal,\n    persistenceHierarchy: PersistenceInternal[],\n    userKey = KeyName.AUTH_USER\n  ): Promise<PersistenceUserManager> {\n    if (!persistenceHierarchy.length) {\n      return new PersistenceUserManager(\n        _getInstance(inMemoryPersistence),\n        auth,\n        userKey\n      );\n    }\n\n    // Eliminate any persistences that are not available\n    const availablePersistences = (\n      await Promise.all(\n        persistenceHierarchy.map(async persistence => {\n          if (await persistence._isAvailable()) {\n            return persistence;\n          }\n          return undefined;\n        })\n      )\n    ).filter(persistence => persistence) as PersistenceInternal[];\n\n    // Fall back to the first persistence listed, or in memory if none available\n    let selectedPersistence =\n      availablePersistences[0] ||\n      _getInstance<PersistenceInternal>(inMemoryPersistence);\n\n    const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n\n    // Pull out the existing user, setting the chosen persistence to that\n    // persistence if the user exists.\n    let userToMigrate: UserInternal | null = null;\n    // Note, here we check for a user in _all_ persistences, not just the\n    // ones deemed available. If we can migrate a user out of a broken\n    // persistence, we will (but only if that persistence supports migration).\n    for (const persistence of persistenceHierarchy) {\n      try {\n        const blob = await persistence._get<PersistedBlob>(key);\n        if (blob) {\n          const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n          if (persistence !== selectedPersistence) {\n            userToMigrate = user;\n          }\n          selectedPersistence = persistence;\n          break;\n        }\n      } catch {}\n    }\n\n    // If we find the user in a persistence that does support migration, use\n    // that migration path (of only persistences that support migration)\n    const migrationHierarchy = availablePersistences.filter(\n      p => p._shouldAllowMigration\n    );\n\n    // If the persistence does _not_ allow migration, just finish off here\n    if (\n      !selectedPersistence._shouldAllowMigration ||\n      !migrationHierarchy.length\n    ) {\n      return new PersistenceUserManager(selectedPersistence, auth, userKey);\n    }\n\n    selectedPersistence = migrationHierarchy[0];\n    if (userToMigrate) {\n      // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n      // we'll just let it bubble to surface the error.\n      await selectedPersistence._set(key, userToMigrate.toJSON());\n    }\n\n    // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n    // such as users getting stuck with a previous account after signing out and refreshing the tab.\n    await Promise.all(\n      persistenceHierarchy.map(async persistence => {\n        if (persistence !== selectedPersistence) {\n          try {\n            await persistence._remove(key);\n          } catch {}\n        }\n      })\n    );\n    return new PersistenceUserManager(selectedPersistence, auth, userKey);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isIE, getUA } from '@firebase/util';\n\ninterface NavigatorStandalone extends Navigator {\n  standalone?: unknown;\n}\n\ninterface Document {\n  documentMode?: number;\n}\n\n/**\n * Enums for Browser name.\n */\nexport const enum BrowserName {\n  ANDROID = 'Android',\n  BLACKBERRY = 'Blackberry',\n  EDGE = 'Edge',\n  FIREFOX = 'Firefox',\n  IE = 'IE',\n  IEMOBILE = 'IEMobile',\n  OPERA = 'Opera',\n  OTHER = 'Other',\n  CHROME = 'Chrome',\n  SAFARI = 'Safari',\n  SILK = 'Silk',\n  WEBOS = 'Webos'\n}\n\n/**\n * Determine the browser for the purposes of reporting usage to the API\n */\nexport function _getBrowserName(userAgent: string): BrowserName | string {\n  const ua = userAgent.toLowerCase();\n  if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n    return BrowserName.OPERA;\n  } else if (_isIEMobile(ua)) {\n    // Windows phone IEMobile browser.\n    return BrowserName.IEMOBILE;\n  } else if (ua.includes('msie') || ua.includes('trident/')) {\n    return BrowserName.IE;\n  } else if (ua.includes('edge/')) {\n    return BrowserName.EDGE;\n  } else if (_isFirefox(ua)) {\n    return BrowserName.FIREFOX;\n  } else if (ua.includes('silk/')) {\n    return BrowserName.SILK;\n  } else if (_isBlackBerry(ua)) {\n    // Blackberry browser.\n    return BrowserName.BLACKBERRY;\n  } else if (_isWebOS(ua)) {\n    // WebOS default browser.\n    return BrowserName.WEBOS;\n  } else if (_isSafari(ua)) {\n    return BrowserName.SAFARI;\n  } else if (\n    (ua.includes('chrome/') || _isChromeIOS(ua)) &&\n    !ua.includes('edge/')\n  ) {\n    return BrowserName.CHROME;\n  } else if (_isAndroid(ua)) {\n    // Android stock browser.\n    return BrowserName.ANDROID;\n  } else {\n    // Most modern browsers have name/version at end of user agent string.\n    const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n    const matches = userAgent.match(re);\n    if (matches?.length === 2) {\n      return matches[1];\n    }\n  }\n  return BrowserName.OTHER;\n}\n\nexport function _isFirefox(ua = getUA()): boolean {\n  return /firefox\\//i.test(ua);\n}\n\nexport function _isSafari(userAgent = getUA()): boolean {\n  const ua = userAgent.toLowerCase();\n  return (\n    ua.includes('safari/') &&\n    !ua.includes('chrome/') &&\n    !ua.includes('crios/') &&\n    !ua.includes('android')\n  );\n}\n\nexport function _isChromeIOS(ua = getUA()): boolean {\n  return /crios\\//i.test(ua);\n}\n\nexport function _isIEMobile(ua = getUA()): boolean {\n  return /iemobile/i.test(ua);\n}\n\nexport function _isAndroid(ua = getUA()): boolean {\n  return /android/i.test(ua);\n}\n\nexport function _isBlackBerry(ua = getUA()): boolean {\n  return /blackberry/i.test(ua);\n}\n\nexport function _isWebOS(ua = getUA()): boolean {\n  return /webos/i.test(ua);\n}\n\nexport function _isIOS(ua = getUA()): boolean {\n  return (\n    /iphone|ipad|ipod/i.test(ua) ||\n    (/macintosh/i.test(ua) && /mobile/i.test(ua))\n  );\n}\n\nexport function _isIOS7Or8(ua = getUA()): boolean {\n  return (\n    /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) ||\n    /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua)\n  );\n}\n\nexport function _isIOSStandalone(ua = getUA()): boolean {\n  return _isIOS(ua) && !!(window.navigator as NavigatorStandalone)?.standalone;\n}\n\nexport function _isIE10(): boolean {\n  return isIE() && (document as Document).documentMode === 10;\n}\n\nexport function _isMobileBrowser(ua: string = getUA()): boolean {\n  // TODO: implement getBrowserName equivalent for OS.\n  return (\n    _isIOS(ua) ||\n    _isAndroid(ua) ||\n    _isWebOS(ua) ||\n    _isBlackBerry(ua) ||\n    /windows phone/i.test(ua) ||\n    _isIEMobile(ua)\n  );\n}\n\nexport function _isIframe(): boolean {\n  try {\n    // Check that the current window is not the top window.\n    // If so, return true.\n    return !!(window && window !== window.top);\n  } catch (e) {\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '@firebase/app';\nimport { _getBrowserName } from './browser';\nimport { getUA } from '@firebase/util';\n\nexport const enum ClientImplementation {\n  CORE = 'JsCore'\n}\n\n/**\n * @internal\n */\nexport const enum ClientPlatform {\n  BROWSER = 'Browser',\n  NODE = 'Node',\n  REACT_NATIVE = 'ReactNative',\n  CORDOVA = 'Cordova',\n  WORKER = 'Worker'\n}\n\n/*\n * Determine the SDK version string\n */\nexport function _getClientVersion(\n  clientPlatform: ClientPlatform,\n  frameworks: readonly string[] = []\n): string {\n  let reportedPlatform: string;\n  switch (clientPlatform) {\n    case ClientPlatform.BROWSER:\n      // In a browser environment, report the browser name.\n      reportedPlatform = _getBrowserName(getUA());\n      break;\n    case ClientPlatform.WORKER:\n      // Technically a worker runs from a browser but we need to differentiate a\n      // worker from a browser.\n      // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n      reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;\n      break;\n    default:\n      reportedPlatform = clientPlatform;\n  }\n  const reportedFrameworks = frameworks.length\n    ? frameworks.join(',')\n    : 'FirebaseCore-web'; /* default value if no other framework is used */\n  return `${reportedPlatform}/${ClientImplementation.CORE}/${SDK_VERSION}/${reportedFrameworks}`;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthInternal } from '../../model/auth';\nimport { Unsubscribe, User } from '../../model/public_types';\nimport { AuthErrorCode } from '../errors';\n\ninterface MiddlewareEntry {\n  (user: User | null): Promise<void>;\n  onAbort?: () => void;\n}\n\nexport class AuthMiddlewareQueue {\n  private readonly queue: MiddlewareEntry[] = [];\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  pushCallback(\n    callback: (user: User | null) => void | Promise<void>,\n    onAbort?: () => void\n  ): Unsubscribe {\n    // The callback could be sync or async. Wrap it into a\n    // function that is always async.\n    const wrappedCallback: MiddlewareEntry = (\n      user: User | null\n    ): Promise<void> =>\n      new Promise((resolve, reject) => {\n        try {\n          const result = callback(user);\n          // Either resolve with existing promise or wrap a non-promise\n          // return value into a promise.\n          resolve(result);\n        } catch (e) {\n          // Sync callback throws.\n          reject(e);\n        }\n      });\n    // Attach the onAbort if present\n    wrappedCallback.onAbort = onAbort;\n    this.queue.push(wrappedCallback);\n\n    const index = this.queue.length - 1;\n    return () => {\n      // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n      // indexing of other elements.\n      this.queue[index] = () => Promise.resolve();\n    };\n  }\n\n  async runMiddleware(nextUser: User | null): Promise<void> {\n    if (this.auth.currentUser === nextUser) {\n      return;\n    }\n\n    // While running the middleware, build a temporary stack of onAbort\n    // callbacks to call if one middleware callback rejects.\n\n    const onAbortStack: Array<() => void> = [];\n    try {\n      for (const beforeStateCallback of this.queue) {\n        await beforeStateCallback(nextUser);\n\n        // Only push the onAbort if the callback succeeds\n        if (beforeStateCallback.onAbort) {\n          onAbortStack.push(beforeStateCallback.onAbort);\n        }\n      }\n    } catch (e) {\n      // Run all onAbort, with separate try/catch to ignore any errors and\n      // continue\n      onAbortStack.reverse();\n      for (const onAbort of onAbortStack) {\n        try {\n          onAbort();\n        } catch (_) {\n          /* swallow error */\n        }\n      }\n\n      throw this.auth._errorFactory.create(AuthErrorCode.LOGIN_BLOCKED, {\n        originalMessage: (e as Error)?.message\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _FirebaseService, FirebaseApp } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport {\n  Auth,\n  AuthErrorMap,\n  AuthSettings,\n  EmulatorConfig,\n  NextOrObserver,\n  Persistence,\n  PopupRedirectResolver,\n  User,\n  UserCredential,\n  CompleteFn,\n  ErrorFn,\n  NextFn,\n  Unsubscribe\n} from '../../model/public_types';\nimport {\n  createSubscribe,\n  ErrorFactory,\n  FirebaseError,\n  getModularInstance,\n  Observer,\n  Subscribe\n} from '@firebase/util';\n\nimport { AuthInternal, ConfigInternal } from '../../model/auth';\nimport { PopupRedirectResolverInternal } from '../../model/popup_redirect';\nimport { UserInternal } from '../../model/user';\nimport {\n  AuthErrorCode,\n  AuthErrorParams,\n  ErrorMapRetriever,\n  _DEFAULT_AUTH_ERROR_FACTORY\n} from '../errors';\nimport { PersistenceInternal } from '../persistence';\nimport {\n  KeyName,\n  PersistenceUserManager\n} from '../persistence/persistence_user_manager';\nimport { _reloadWithoutSaving } from '../user/reload';\nimport { _assert } from '../util/assert';\nimport { _getInstance } from '../util/instantiator';\nimport { _getUserLanguage } from '../util/navigator';\nimport { _getClientVersion } from '../util/version';\nimport { HttpHeader } from '../../api';\nimport { AuthMiddlewareQueue } from './middleware';\n\ninterface AsyncAction {\n  (): Promise<void>;\n}\n\nexport const enum DefaultConfig {\n  TOKEN_API_HOST = 'securetoken.googleapis.com',\n  API_HOST = 'identitytoolkit.googleapis.com',\n  API_SCHEME = 'https'\n}\n\nexport class AuthImpl implements AuthInternal, _FirebaseService {\n  currentUser: User | null = null;\n  emulatorConfig: EmulatorConfig | null = null;\n  private operations = Promise.resolve();\n  private persistenceManager?: PersistenceUserManager;\n  private redirectPersistenceManager?: PersistenceUserManager;\n  private authStateSubscription = new Subscription<User>(this);\n  private idTokenSubscription = new Subscription<User>(this);\n  private readonly beforeStateQueue = new AuthMiddlewareQueue(this);\n  private redirectUser: UserInternal | null = null;\n  private isProactiveRefreshEnabled = false;\n\n  // Any network calls will set this to true and prevent subsequent emulator\n  // initialization\n  _canInitEmulator = true;\n  _isInitialized = false;\n  _deleted = false;\n  _initializationPromise: Promise<void> | null = null;\n  _popupRedirectResolver: PopupRedirectResolverInternal | null = null;\n  _errorFactory: ErrorFactory<AuthErrorCode, AuthErrorParams> =\n    _DEFAULT_AUTH_ERROR_FACTORY;\n  readonly name: string;\n\n  // Tracks the last notified UID for state change listeners to prevent\n  // repeated calls to the callbacks. Undefined means it's never been\n  // called, whereas null means it's been called with a signed out user\n  private lastNotifiedUid: string | null | undefined = undefined;\n\n  languageCode: string | null = null;\n  tenantId: string | null = null;\n  settings: AuthSettings = { appVerificationDisabledForTesting: false };\n\n  constructor(\n    public readonly app: FirebaseApp,\n    private readonly heartbeatServiceProvider: Provider<'heartbeat'>,\n    public readonly config: ConfigInternal\n  ) {\n    this.name = app.name;\n    this.clientVersion = config.sdkClientVersion;\n  }\n\n  _initializeWithPersistence(\n    persistenceHierarchy: PersistenceInternal[],\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    if (popupRedirectResolver) {\n      this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n    }\n\n    // Have to check for app deletion throughout initialization (after each\n    // promise resolution)\n    this._initializationPromise = this.queue(async () => {\n      if (this._deleted) {\n        return;\n      }\n\n      this.persistenceManager = await PersistenceUserManager.create(\n        this,\n        persistenceHierarchy\n      );\n\n      if (this._deleted) {\n        return;\n      }\n\n      // Initialize the resolver early if necessary (only applicable to web:\n      // this will cause the iframe to load immediately in certain cases)\n      if (this._popupRedirectResolver?._shouldInitProactively) {\n        // If this fails, don't halt auth loading\n        try {\n          await this._popupRedirectResolver._initialize(this);\n        } catch (e) {\n          /* Ignore the error */\n        }\n      }\n\n      await this.initializeCurrentUser(popupRedirectResolver);\n      this.lastNotifiedUid = this.currentUser?.uid || null;\n\n      if (this._deleted) {\n        return;\n      }\n\n      this._isInitialized = true;\n    });\n\n    return this._initializationPromise;\n  }\n\n  /**\n   * If the persistence is changed in another window, the user manager will let us know\n   */\n  async _onStorageEvent(): Promise<void> {\n    if (this._deleted) {\n      return;\n    }\n\n    const user = await this.assertedPersistence.getCurrentUser();\n\n    if (!this.currentUser && !user) {\n      // No change, do nothing (was signed out and remained signed out).\n      return;\n    }\n\n    // If the same user is to be synchronized.\n    if (this.currentUser && user && this.currentUser.uid === user.uid) {\n      // Data update, simply copy data changes.\n      this._currentUser._assign(user);\n      // If tokens changed from previous user tokens, this will trigger\n      // notifyAuthListeners_.\n      await this.currentUser.getIdToken();\n      return;\n    }\n\n    // Update current Auth state. Either a new login or logout.\n    // Skip blocking callbacks, they should not apply to a change in another tab.\n    await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);\n  }\n\n  private async initializeCurrentUser(\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    // First check to see if we have a pending redirect event.\n    const previouslyStoredUser =\n      (await this.assertedPersistence.getCurrentUser()) as UserInternal | null;\n    let futureCurrentUser = previouslyStoredUser;\n    let needsTocheckMiddleware = false;\n    if (popupRedirectResolver && this.config.authDomain) {\n      await this.getOrInitRedirectPersistenceManager();\n      const redirectUserEventId = this.redirectUser?._redirectEventId;\n      const storedUserEventId = futureCurrentUser?._redirectEventId;\n      const result = await this.tryRedirectSignIn(popupRedirectResolver);\n\n      // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n      // matches the redirect user, then we want to initially sign in with the\n      // new user object from result.\n      // TODO(samgho): More thoroughly test all of this\n      if (\n        (!redirectUserEventId || redirectUserEventId === storedUserEventId) &&\n        result?.user\n      ) {\n        futureCurrentUser = result.user as UserInternal;\n        needsTocheckMiddleware = true;\n      }\n    }\n\n    // If no user in persistence, there is no current user. Set to null.\n    if (!futureCurrentUser) {\n      return this.directlySetCurrentUser(null);\n    }\n\n    if (!futureCurrentUser._redirectEventId) {\n      // This isn't a redirect link operation, we can reload and bail.\n      // First though, ensure that we check the middleware is happy.\n      if (needsTocheckMiddleware) {\n        try {\n          await this.beforeStateQueue.runMiddleware(futureCurrentUser);\n        } catch (e) {\n          futureCurrentUser = previouslyStoredUser;\n          // We know this is available since the bit is only set when the\n          // resolver is available\n          this._popupRedirectResolver!._overrideRedirectResult(this, () =>\n            Promise.reject(e)\n          );\n        }\n      }\n\n      if (futureCurrentUser) {\n        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n      } else {\n        return this.directlySetCurrentUser(null);\n      }\n    }\n\n    _assert(this._popupRedirectResolver, this, AuthErrorCode.ARGUMENT_ERROR);\n    await this.getOrInitRedirectPersistenceManager();\n\n    // If the redirect user's event ID matches the current user's event ID,\n    // DO NOT reload the current user, otherwise they'll be cleared from storage.\n    // This is important for the reauthenticateWithRedirect() flow.\n    if (\n      this.redirectUser &&\n      this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId\n    ) {\n      return this.directlySetCurrentUser(futureCurrentUser);\n    }\n\n    return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n  }\n\n  private async tryRedirectSignIn(\n    redirectResolver: PopupRedirectResolver\n  ): Promise<UserCredential | null> {\n    // The redirect user needs to be checked (and signed in if available)\n    // during auth initialization. All of the normal sign in and link/reauth\n    // flows call back into auth and push things onto the promise queue. We\n    // need to await the result of the redirect sign in *inside the promise\n    // queue*. This presents a problem: we run into deadlock. See:\n    //    ┌> [Initialization] ─────┐\n    //    ┌> [<other queue tasks>] │\n    //    └─ [getRedirectResult] <─┘\n    //    where [] are tasks on the queue and arrows denote awaits\n    // Initialization will never complete because it's waiting on something\n    // that's waiting for initialization to complete!\n    //\n    // Instead, this method calls getRedirectResult() (stored in\n    // _completeRedirectFn) with an optional parameter that instructs all of\n    // the underlying auth operations to skip anything that mutates auth state.\n\n    let result: UserCredential | null = null;\n    try {\n      // We know this._popupRedirectResolver is set since redirectResolver\n      // is passed in. The _completeRedirectFn expects the unwrapped extern.\n      result = await this._popupRedirectResolver!._completeRedirectFn(\n        this,\n        redirectResolver,\n        true\n      );\n    } catch (e) {\n      // Swallow any errors here; the code can retrieve them in\n      // getRedirectResult().\n      await this._setRedirectUser(null);\n    }\n\n    return result;\n  }\n\n  private async reloadAndSetCurrentUserOrClear(\n    user: UserInternal\n  ): Promise<void> {\n    try {\n      await _reloadWithoutSaving(user);\n    } catch (e) {\n      if (\n        (e as FirebaseError)?.code !==\n        `auth/${AuthErrorCode.NETWORK_REQUEST_FAILED}`\n      ) {\n        // Something's wrong with the user's token. Log them out and remove\n        // them from storage\n        return this.directlySetCurrentUser(null);\n      }\n    }\n\n    return this.directlySetCurrentUser(user);\n  }\n\n  useDeviceLanguage(): void {\n    this.languageCode = _getUserLanguage();\n  }\n\n  async _delete(): Promise<void> {\n    this._deleted = true;\n  }\n\n  async updateCurrentUser(userExtern: User | null): Promise<void> {\n    // The public updateCurrentUser method needs to make a copy of the user,\n    // and also check that the project matches\n    const user = userExtern\n      ? (getModularInstance(userExtern) as UserInternal)\n      : null;\n    if (user) {\n      _assert(\n        user.auth.config.apiKey === this.config.apiKey,\n        this,\n        AuthErrorCode.INVALID_AUTH\n      );\n    }\n    return this._updateCurrentUser(user && user._clone(this));\n  }\n\n  async _updateCurrentUser(\n    user: User | null,\n    skipBeforeStateCallbacks: boolean = false\n  ): Promise<void> {\n    if (this._deleted) {\n      return;\n    }\n    if (user) {\n      _assert(\n        this.tenantId === user.tenantId,\n        this,\n        AuthErrorCode.TENANT_ID_MISMATCH\n      );\n    }\n\n    if (!skipBeforeStateCallbacks) {\n      await this.beforeStateQueue.runMiddleware(user);\n    }\n\n    return this.queue(async () => {\n      await this.directlySetCurrentUser(user as UserInternal | null);\n      this.notifyAuthListeners();\n    });\n  }\n\n  async signOut(): Promise<void> {\n    // Run first, to block _setRedirectUser() if any callbacks fail.\n    await this.beforeStateQueue.runMiddleware(null);\n    // Clear the redirect user when signOut is called\n    if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n      await this._setRedirectUser(null);\n    }\n\n    // Prevent callbacks from being called again in _updateCurrentUser, as\n    // they were already called in the first line.\n    return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);\n  }\n\n  setPersistence(persistence: Persistence): Promise<void> {\n    return this.queue(async () => {\n      await this.assertedPersistence.setPersistence(_getInstance(persistence));\n    });\n  }\n\n  _getPersistence(): string {\n    return this.assertedPersistence.persistence.type;\n  }\n\n  _updateErrorMap(errorMap: AuthErrorMap): void {\n    this._errorFactory = new ErrorFactory<AuthErrorCode, AuthErrorParams>(\n      'auth',\n      'Firebase',\n      (errorMap as ErrorMapRetriever)()\n    );\n  }\n\n  onAuthStateChanged(\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    return this.registerStateListener(\n      this.authStateSubscription,\n      nextOrObserver,\n      error,\n      completed\n    );\n  }\n\n  beforeAuthStateChanged(\n    callback: (user: User | null) => void | Promise<void>,\n    onAbort?: () => void\n  ): Unsubscribe {\n    return this.beforeStateQueue.pushCallback(callback, onAbort);\n  }\n\n  onIdTokenChanged(\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    return this.registerStateListener(\n      this.idTokenSubscription,\n      nextOrObserver,\n      error,\n      completed\n    );\n  }\n\n  toJSON(): object {\n    return {\n      apiKey: this.config.apiKey,\n      authDomain: this.config.authDomain,\n      appName: this.name,\n      currentUser: this._currentUser?.toJSON()\n    };\n  }\n\n  async _setRedirectUser(\n    user: UserInternal | null,\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    const redirectManager = await this.getOrInitRedirectPersistenceManager(\n      popupRedirectResolver\n    );\n    return user === null\n      ? redirectManager.removeCurrentUser()\n      : redirectManager.setCurrentUser(user);\n  }\n\n  private async getOrInitRedirectPersistenceManager(\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<PersistenceUserManager> {\n    if (!this.redirectPersistenceManager) {\n      const resolver: PopupRedirectResolverInternal | null =\n        (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||\n        this._popupRedirectResolver;\n      _assert(resolver, this, AuthErrorCode.ARGUMENT_ERROR);\n      this.redirectPersistenceManager = await PersistenceUserManager.create(\n        this,\n        [_getInstance(resolver._redirectPersistence)],\n        KeyName.REDIRECT_USER\n      );\n      this.redirectUser =\n        await this.redirectPersistenceManager.getCurrentUser();\n    }\n\n    return this.redirectPersistenceManager;\n  }\n\n  async _redirectUserForId(id: string): Promise<UserInternal | null> {\n    // Make sure we've cleared any pending persistence actions if we're not in\n    // the initializer\n    if (this._isInitialized) {\n      await this.queue(async () => {});\n    }\n\n    if (this._currentUser?._redirectEventId === id) {\n      return this._currentUser;\n    }\n\n    if (this.redirectUser?._redirectEventId === id) {\n      return this.redirectUser;\n    }\n\n    return null;\n  }\n\n  async _persistUserIfCurrent(user: UserInternal): Promise<void> {\n    if (user === this.currentUser) {\n      return this.queue(async () => this.directlySetCurrentUser(user));\n    }\n  }\n\n  /** Notifies listeners only if the user is current */\n  _notifyListenersIfCurrent(user: UserInternal): void {\n    if (user === this.currentUser) {\n      this.notifyAuthListeners();\n    }\n  }\n\n  _key(): string {\n    return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n  }\n\n  _startProactiveRefresh(): void {\n    this.isProactiveRefreshEnabled = true;\n    if (this.currentUser) {\n      this._currentUser._startProactiveRefresh();\n    }\n  }\n\n  _stopProactiveRefresh(): void {\n    this.isProactiveRefreshEnabled = false;\n    if (this.currentUser) {\n      this._currentUser._stopProactiveRefresh();\n    }\n  }\n\n  /** Returns the current user cast as the internal type */\n  get _currentUser(): UserInternal {\n    return this.currentUser as UserInternal;\n  }\n\n  private notifyAuthListeners(): void {\n    if (!this._isInitialized) {\n      return;\n    }\n\n    this.idTokenSubscription.next(this.currentUser);\n\n    const currentUid = this.currentUser?.uid ?? null;\n    if (this.lastNotifiedUid !== currentUid) {\n      this.lastNotifiedUid = currentUid;\n      this.authStateSubscription.next(this.currentUser);\n    }\n  }\n\n  private registerStateListener(\n    subscription: Subscription<User>,\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    if (this._deleted) {\n      return () => {};\n    }\n\n    const cb =\n      typeof nextOrObserver === 'function'\n        ? nextOrObserver\n        : nextOrObserver.next.bind(nextOrObserver);\n\n    const promise = this._isInitialized\n      ? Promise.resolve()\n      : this._initializationPromise;\n    _assert(promise, this, AuthErrorCode.INTERNAL_ERROR);\n    // The callback needs to be called asynchronously per the spec.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    promise.then(() => cb(this.currentUser));\n\n    if (typeof nextOrObserver === 'function') {\n      return subscription.addObserver(nextOrObserver, error, completed);\n    } else {\n      return subscription.addObserver(nextOrObserver);\n    }\n  }\n\n  /**\n   * Unprotected (from race conditions) method to set the current user. This\n   * should only be called from within a queued callback. This is necessary\n   * because the queue shouldn't rely on another queued callback.\n   */\n  private async directlySetCurrentUser(\n    user: UserInternal | null\n  ): Promise<void> {\n    if (this.currentUser && this.currentUser !== user) {\n      this._currentUser._stopProactiveRefresh();\n    }\n    if (user && this.isProactiveRefreshEnabled) {\n      user._startProactiveRefresh();\n    }\n\n    this.currentUser = user;\n\n    if (user) {\n      await this.assertedPersistence.setCurrentUser(user);\n    } else {\n      await this.assertedPersistence.removeCurrentUser();\n    }\n  }\n\n  private queue(action: AsyncAction): Promise<void> {\n    // In case something errors, the callback still should be called in order\n    // to keep the promise chain alive\n    this.operations = this.operations.then(action, action);\n    return this.operations;\n  }\n\n  private get assertedPersistence(): PersistenceUserManager {\n    _assert(this.persistenceManager, this, AuthErrorCode.INTERNAL_ERROR);\n    return this.persistenceManager;\n  }\n\n  private frameworks: string[] = [];\n  private clientVersion: string;\n  _logFramework(framework: string): void {\n    if (!framework || this.frameworks.includes(framework)) {\n      return;\n    }\n    this.frameworks.push(framework);\n\n    // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n    // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n    this.frameworks.sort();\n    this.clientVersion = _getClientVersion(\n      this.config.clientPlatform,\n      this._getFrameworks()\n    );\n  }\n  _getFrameworks(): readonly string[] {\n    return this.frameworks;\n  }\n  async _getAdditionalHeaders(): Promise<Record<string, string>> {\n    // Additional headers on every request\n    const headers: Record<string, string> = {\n      [HttpHeader.X_CLIENT_VERSION]: this.clientVersion\n    };\n\n    if (this.app.options.appId) {\n      headers[HttpHeader.X_FIREBASE_GMPID] = this.app.options.appId;\n    }\n\n    // If the heartbeat service exists, add the heartbeat string\n    const heartbeatsHeader = await this.heartbeatServiceProvider\n      .getImmediate({\n        optional: true\n      })\n      ?.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers[HttpHeader.X_FIREBASE_CLIENT] = heartbeatsHeader;\n    }\n    return headers;\n  }\n}\n\n/**\n * Method to be used to cast down to our private implmentation of Auth.\n * It will also handle unwrapping from the compat type if necessary\n *\n * @param auth Auth object passed in from developer\n */\nexport function _castAuth(auth: Auth): AuthInternal {\n  return getModularInstance(auth) as AuthInternal;\n}\n\n/** Helper class to wrap subscriber logic */\nclass Subscription<T> {\n  private observer: Observer<T | null> | null = null;\n  readonly addObserver: Subscribe<T | null> = createSubscribe(\n    observer => (this.observer = observer)\n  );\n\n  constructor(readonly auth: AuthInternal) {}\n\n  get next(): NextFn<T | null> {\n    _assert(this.observer, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    return this.observer.next.bind(this.observer);\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Auth } from '../../model/public_types';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _castAuth } from './auth_impl';\n\n/**\n * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\n * Firebase Auth services.\n *\n * @remarks\n * This must be called synchronously immediately following the first call to\n * {@link initializeAuth}.  Do not use with production credentials as emulator\n * traffic is not encrypted.\n *\n *\n * @example\n * ```javascript\n * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\n * `true` to disable the warning banner attached to the DOM.\n *\n * @public\n */\nexport function connectAuthEmulator(\n  auth: Auth,\n  url: string,\n  options?: { disableWarnings: boolean }\n): void {\n  const authInternal = _castAuth(auth);\n  _assert(\n    authInternal._canInitEmulator,\n    authInternal,\n    AuthErrorCode.EMULATOR_CONFIG_FAILED\n  );\n\n  _assert(\n    /^https?:\\/\\//.test(url),\n    authInternal,\n    AuthErrorCode.INVALID_EMULATOR_SCHEME\n  );\n\n  const disableWarnings = !!options?.disableWarnings;\n\n  const protocol = extractProtocol(url);\n  const { host, port } = extractHostAndPort(url);\n  const portStr = port === null ? '' : `:${port}`;\n\n  // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n  authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };\n  authInternal.settings.appVerificationDisabledForTesting = true;\n  authInternal.emulatorConfig = Object.freeze({\n    host,\n    port,\n    protocol: protocol.replace(':', ''),\n    options: Object.freeze({ disableWarnings })\n  });\n\n  if (!disableWarnings) {\n    emitEmulatorWarning();\n  }\n}\n\nfunction extractProtocol(url: string): string {\n  const protocolEnd = url.indexOf(':');\n  return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n}\n\nfunction extractHostAndPort(url: string): {\n  host: string;\n  port: number | null;\n} {\n  const protocol = extractProtocol(url);\n  const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n  if (!authority) {\n    return { host: '', port: null };\n  }\n  const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n  const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n  if (bracketedIPv6) {\n    const host = bracketedIPv6[1];\n    return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };\n  } else {\n    const [host, port] = hostAndPort.split(':');\n    return { host, port: parsePort(port) };\n  }\n}\n\nfunction parsePort(portStr: string): number | null {\n  if (!portStr) {\n    return null;\n  }\n  const port = Number(portStr);\n  if (isNaN(port)) {\n    return null;\n  }\n  return port;\n}\n\nfunction emitEmulatorWarning(): void {\n  function attachBanner(): void {\n    const el = document.createElement('p');\n    const sty = el.style;\n    el.innerText =\n      'Running in emulator mode. Do not use with production credentials.';\n    sty.position = 'fixed';\n    sty.width = '100%';\n    sty.backgroundColor = '#ffffff';\n    sty.border = '.1em solid #000000';\n    sty.color = '#b50000';\n    sty.bottom = '0px';\n    sty.left = '0px';\n    sty.margin = '0px';\n    sty.zIndex = '10000';\n    sty.textAlign = 'center';\n    el.classList.add('firebase-emulator-warning');\n    document.body.appendChild(el);\n  }\n\n  if (typeof console !== 'undefined' && typeof console.info === 'function') {\n    console.info(\n      'WARNING: You are using the Auth Emulator,' +\n        ' which is intended for local testing only.  Do not use with' +\n        ' production credentials.'\n    );\n  }\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    if (document.readyState === 'loading') {\n      window.addEventListener('DOMContentLoaded', attachBanner);\n    } else {\n      attachBanner();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { debugFail } from '../util/assert';\n\n/**\n * Interface that represents the credentials returned by an {@link AuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nexport class AuthCredential {\n  /** @internal */\n  protected constructor(\n    /**\n     * The authentication provider ID for the credential.\n     *\n     * @remarks\n     * For example, 'facebook.com', or 'google.com'.\n     */\n    readonly providerId: string,\n    /**\n     * The authentication sign in method for the credential.\n     *\n     * @remarks\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\n     */\n    readonly signInMethod: string\n  ) {}\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   *\n   * @returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object {\n    return debugFail('not implemented');\n  }\n\n  /** @internal */\n  _getIdTokenResponse(_auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return debugFail('not implemented');\n  }\n  /** @internal */\n  _linkToIdToken(\n    _auth: AuthInternal,\n    _idToken: string\n  ): Promise<IdTokenResponse> {\n    return debugFail('not implemented');\n  }\n  /** @internal */\n  _getReauthenticationResolver(_auth: AuthInternal): Promise<IdTokenResponse> {\n    return debugFail('not implemented');\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeOperation, Auth } from '../../model/public_types';\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { MfaEnrollment } from './mfa';\n\nexport interface ResetPasswordRequest {\n  oobCode: string;\n  newPassword?: string;\n  tenantId?: string;\n}\n\nexport interface ResetPasswordResponse {\n  email: string;\n  newEmail?: string;\n  requestType?: ActionCodeOperation;\n  mfaInfo?: MfaEnrollment;\n}\n\nexport async function resetPassword(\n  auth: Auth,\n  request: ResetPasswordRequest\n): Promise<ResetPasswordResponse> {\n  return _performApiRequest<ResetPasswordRequest, ResetPasswordResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.RESET_PASSWORD,\n    _addTidIfNecessary(auth, request)\n  );\n}\nexport interface UpdateEmailPasswordRequest {\n  idToken: string;\n  returnSecureToken?: boolean;\n  email?: string;\n  password?: string;\n}\n\nexport interface UpdateEmailPasswordResponse extends IdTokenResponse {}\n\nexport async function updateEmailPassword(\n  auth: Auth,\n  request: UpdateEmailPasswordRequest\n): Promise<UpdateEmailPasswordResponse> {\n  return _performApiRequest<\n    UpdateEmailPasswordRequest,\n    UpdateEmailPasswordResponse\n  >(auth, HttpMethod.POST, Endpoint.SET_ACCOUNT_INFO, request);\n}\n\nexport interface ApplyActionCodeRequest {\n  oobCode: string;\n  tenantId?: string;\n}\n\nexport interface ApplyActionCodeResponse {}\n\nexport async function applyActionCode(\n  auth: Auth,\n  request: ApplyActionCodeRequest\n): Promise<ApplyActionCodeResponse> {\n  return _performApiRequest<ApplyActionCodeRequest, ApplyActionCodeResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SET_ACCOUNT_INFO,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeOperation, Auth } from '../../model/public_types';\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest,\n  _performSignInRequest\n} from '../index';\nimport { IdToken, IdTokenResponse } from '../../model/id_token';\n\nexport interface SignInWithPasswordRequest {\n  returnSecureToken?: boolean;\n  email: string;\n  password: string;\n  tenantId?: string;\n}\n\nexport interface SignInWithPasswordResponse extends IdTokenResponse {\n  email: string;\n  displayName: string;\n}\n\nexport async function signInWithPassword(\n  auth: Auth,\n  request: SignInWithPasswordRequest\n): Promise<SignInWithPasswordResponse> {\n  return _performSignInRequest<\n    SignInWithPasswordRequest,\n    SignInWithPasswordResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PASSWORD,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface GetOobCodeRequest {\n  email?: string; // Everything except VERIFY_AND_CHANGE_EMAIL\n  continueUrl?: string;\n  iOSBundleId?: string;\n  iosAppStoreId?: string;\n  androidPackageName?: string;\n  androidInstallApp?: boolean;\n  androidMinimumVersionCode?: string;\n  canHandleCodeInApp?: boolean;\n  dynamicLinkDomain?: string;\n  tenantId?: string;\n  targetProjectid?: string;\n}\n\nexport interface VerifyEmailRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.VERIFY_EMAIL;\n  idToken: IdToken;\n}\n\nexport interface PasswordResetRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.PASSWORD_RESET;\n  email: string;\n  captchaResp?: string;\n}\n\nexport interface EmailSignInRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.EMAIL_SIGNIN;\n  email: string;\n}\n\nexport interface VerifyAndChangeEmailRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL;\n  idToken: IdToken;\n  newEmail: string;\n}\n\ninterface GetOobCodeResponse {\n  email: string;\n}\n\nexport interface VerifyEmailResponse extends GetOobCodeResponse {}\nexport interface PasswordResetResponse extends GetOobCodeResponse {}\nexport interface EmailSignInResponse extends GetOobCodeResponse {}\nexport interface VerifyAndChangeEmailResponse extends GetOobCodeRequest {}\n\nasync function sendOobCode(\n  auth: Auth,\n  request: GetOobCodeRequest\n): Promise<GetOobCodeResponse> {\n  return _performApiRequest<GetOobCodeRequest, GetOobCodeResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SEND_OOB_CODE,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport async function sendEmailVerification(\n  auth: Auth,\n  request: VerifyEmailRequest\n): Promise<VerifyEmailResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function sendPasswordResetEmail(\n  auth: Auth,\n  request: PasswordResetRequest\n): Promise<PasswordResetResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function sendSignInLinkToEmail(\n  auth: Auth,\n  request: EmailSignInRequest\n): Promise<EmailSignInResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function verifyAndChangeEmail(\n  auth: Auth,\n  request: VerifyAndChangeEmailRequest\n): Promise<VerifyAndChangeEmailResponse> {\n  return sendOobCode(auth, request);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _performSignInRequest,\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithEmailLinkRequest {\n  email: string;\n  oobCode: string;\n  tenantId?: string;\n}\n\nexport interface SignInWithEmailLinkResponse extends IdTokenResponse {\n  email: string;\n  isNewUser: boolean;\n}\n\nexport async function signInWithEmailLink(\n  auth: Auth,\n  request: SignInWithEmailLinkRequest\n): Promise<SignInWithEmailLinkResponse> {\n  return _performSignInRequest<\n    SignInWithEmailLinkRequest,\n    SignInWithEmailLinkResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_EMAIL_LINK,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface SignInWithEmailLinkForLinkingRequest\n  extends SignInWithEmailLinkRequest {\n  idToken: string;\n}\n\nexport async function signInWithEmailLinkForLinking(\n  auth: Auth,\n  request: SignInWithEmailLinkForLinkingRequest\n): Promise<SignInWithEmailLinkResponse> {\n  return _performSignInRequest<\n    SignInWithEmailLinkForLinkingRequest,\n    SignInWithEmailLinkResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_EMAIL_LINK,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\nimport { updateEmailPassword } from '../../api/account_management/email_and_password';\nimport { signInWithPassword } from '../../api/authentication/email_and_password';\nimport {\n  signInWithEmailLink,\n  signInWithEmailLinkForLinking\n} from '../../api/authentication/email_link';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from '../util/assert';\nimport { AuthCredential } from './auth_credential';\n\n/**\n * Interface that represents the credentials returned by {@link EmailAuthProvider} for\n * {@link ProviderId}.PASSWORD\n *\n * @remarks\n * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\n * {@link SignInMethod}.EMAIL_LINK.\n *\n * @public\n */\nexport class EmailAuthCredential extends AuthCredential {\n  /** @internal */\n  private constructor(\n    /** @internal */\n    readonly _email: string,\n    /** @internal */\n    readonly _password: string,\n    signInMethod: SignInMethod,\n    /** @internal */\n    readonly _tenantId: string | null = null\n  ) {\n    super(ProviderId.PASSWORD, signInMethod);\n  }\n\n  /** @internal */\n  static _fromEmailAndPassword(\n    email: string,\n    password: string\n  ): EmailAuthCredential {\n    return new EmailAuthCredential(\n      email,\n      password,\n      SignInMethod.EMAIL_PASSWORD\n    );\n  }\n\n  /** @internal */\n  static _fromEmailAndCode(\n    email: string,\n    oobCode: string,\n    tenantId: string | null = null\n  ): EmailAuthCredential {\n    return new EmailAuthCredential(\n      email,\n      oobCode,\n      SignInMethod.EMAIL_LINK,\n      tenantId\n    );\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON(): object {\n    return {\n      email: this._email,\n      password: this._password,\n      signInMethod: this.signInMethod,\n      tenantId: this._tenantId\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n   *\n   * @param json - Either `object` or the stringified representation of the object. When string is\n   * provided, `JSON.parse` would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n   */\n  static fromJSON(json: object | string): EmailAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    if (obj?.email && obj?.password) {\n      if (obj.signInMethod === SignInMethod.EMAIL_PASSWORD) {\n        return this._fromEmailAndPassword(obj.email, obj.password);\n      } else if (obj.signInMethod === SignInMethod.EMAIL_LINK) {\n        return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n      }\n    }\n    return null;\n  }\n\n  /** @internal */\n  async _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    switch (this.signInMethod) {\n      case SignInMethod.EMAIL_PASSWORD:\n        return signInWithPassword(auth, {\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password\n        });\n      case SignInMethod.EMAIL_LINK:\n        return signInWithEmailLink(auth, {\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  /** @internal */\n  async _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    switch (this.signInMethod) {\n      case SignInMethod.EMAIL_PASSWORD:\n        return updateEmailPassword(auth, {\n          idToken,\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password\n        });\n      case SignInMethod.EMAIL_LINK:\n        return signInWithEmailLinkForLinking(auth, {\n          idToken,\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return this._getIdTokenResponse(auth);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdToken, IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithIdpRequest {\n  requestUri: string;\n  postBody?: string;\n  sessionId?: string;\n  tenantId?: string;\n  returnSecureToken: boolean;\n  returnIdpCredential?: boolean;\n  idToken?: IdToken;\n  autoCreate?: boolean;\n  pendingToken?: string;\n}\n\n/**\n * @internal\n */\nexport interface SignInWithIdpResponse extends IdTokenResponse {\n  oauthAccessToken?: string;\n  oauthTokenSecret?: string;\n  nonce?: string;\n  oauthIdToken?: string;\n  pendingToken?: string;\n}\n\nexport async function signInWithIdp(\n  auth: Auth,\n  request: SignInWithIdpRequest\n): Promise<SignInWithIdpResponse> {\n  return _performSignInRequest<SignInWithIdpRequest, SignInWithIdpResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_IDP,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystring } from '@firebase/util';\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from '../util/assert';\nimport { AuthCredential } from './auth_credential';\n\nconst IDP_REQUEST_URI = 'http://localhost';\n\nexport interface OAuthCredentialParams {\n  // OAuth 2 uses either id token or access token\n  idToken?: string | null;\n  accessToken?: string | null;\n\n  // These fields are used with OAuth 1\n  oauthToken?: string;\n  secret?: string;\n  oauthTokenSecret?: string;\n\n  // Nonce is only set if pendingToken is not present\n  nonce?: string;\n  pendingToken?: string;\n\n  // Utilities\n  providerId: string;\n  signInMethod: string;\n}\n\n/**\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nexport class OAuthCredential extends AuthCredential {\n  /**\n   * The OAuth ID token associated with the credential if it belongs to an OIDC provider,\n   * such as `google.com`.\n   * @readonly\n   */\n  idToken?: string;\n  /**\n   * The OAuth access token associated with the credential if it belongs to an\n   * {@link OAuthProvider}, such as `facebook.com`, `twitter.com`, etc.\n   * @readonly\n   */\n  accessToken?: string;\n  /**\n   * The OAuth access token secret associated with the credential if it belongs to an OAuth 1.0\n   * provider, such as `twitter.com`.\n   * @readonly\n   */\n  secret?: string;\n\n  private nonce?: string;\n  private pendingToken: string | null = null;\n\n  /** @internal */\n  static _fromParams(params: OAuthCredentialParams): OAuthCredential {\n    const cred = new OAuthCredential(params.providerId, params.signInMethod);\n\n    if (params.idToken || params.accessToken) {\n      // OAuth 2 and either ID token or access token.\n      if (params.idToken) {\n        cred.idToken = params.idToken;\n      }\n\n      if (params.accessToken) {\n        cred.accessToken = params.accessToken;\n      }\n\n      // Add nonce if available and no pendingToken is present.\n      if (params.nonce && !params.pendingToken) {\n        cred.nonce = params.nonce;\n      }\n\n      if (params.pendingToken) {\n        cred.pendingToken = params.pendingToken;\n      }\n    } else if (params.oauthToken && params.oauthTokenSecret) {\n      // OAuth 1 and OAuth token with token secret\n      cred.accessToken = params.oauthToken;\n      cred.secret = params.oauthTokenSecret;\n    } else {\n      _fail(AuthErrorCode.ARGUMENT_ERROR);\n    }\n\n    return cred;\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON(): object {\n    return {\n      idToken: this.idToken,\n      accessToken: this.accessToken,\n      secret: this.secret,\n      nonce: this.nonce,\n      pendingToken: this.pendingToken,\n      providerId: this.providerId,\n      signInMethod: this.signInMethod\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json: string | object): OAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    const { providerId, signInMethod, ...rest }: OAuthCredentialParams = obj;\n    if (!providerId || !signInMethod) {\n      return null;\n    }\n\n    const cred = new OAuthCredential(providerId, signInMethod);\n    cred.idToken = rest.idToken || undefined;\n    cred.accessToken = rest.accessToken || undefined;\n    cred.secret = rest.secret;\n    cred.nonce = rest.nonce;\n    cred.pendingToken = rest.pendingToken || null;\n    return cred;\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n\n  private buildRequest(): SignInWithIdpRequest {\n    const request: SignInWithIdpRequest = {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true\n    };\n\n    if (this.pendingToken) {\n      request.pendingToken = this.pendingToken;\n    } else {\n      const postBody: Record<string, string> = {};\n      if (this.idToken) {\n        postBody['id_token'] = this.idToken;\n      }\n      if (this.accessToken) {\n        postBody['access_token'] = this.accessToken;\n      }\n      if (this.secret) {\n        postBody['oauth_token_secret'] = this.secret;\n      }\n\n      postBody['providerId'] = this.providerId;\n      if (this.nonce && !this.pendingToken) {\n        postBody['nonce'] = this.nonce;\n      }\n\n      request.postBody = querystring(postBody);\n    }\n\n    return request;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _makeTaggedError,\n  _performApiRequest,\n  _performSignInRequest\n} from '../index';\nimport { AuthErrorCode } from '../../core/errors';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { ServerError, ServerErrorMap } from '../errors';\nimport { Auth } from '../../model/public_types';\n\nexport interface SendPhoneVerificationCodeRequest {\n  phoneNumber: string;\n  recaptchaToken: string;\n  tenantId?: string;\n}\n\nexport interface SendPhoneVerificationCodeResponse {\n  sessionInfo: string;\n}\n\nexport async function sendPhoneVerificationCode(\n  auth: Auth,\n  request: SendPhoneVerificationCodeRequest\n): Promise<SendPhoneVerificationCodeResponse> {\n  return _performApiRequest<\n    SendPhoneVerificationCodeRequest,\n    SendPhoneVerificationCodeResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SEND_VERIFICATION_CODE,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\n/**\n * @internal\n */\nexport interface SignInWithPhoneNumberRequest {\n  temporaryProof?: string;\n  phoneNumber?: string;\n  sessionInfo?: string;\n  code?: string;\n  tenantId?: string;\n}\n\nexport interface LinkWithPhoneNumberRequest\n  extends SignInWithPhoneNumberRequest {\n  idToken: string;\n}\n\n/**\n * @internal\n */\nexport interface SignInWithPhoneNumberResponse extends IdTokenResponse {\n  temporaryProof?: string;\n  phoneNumber?: string;\n}\n\nexport async function signInWithPhoneNumber(\n  auth: Auth,\n  request: SignInWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  return _performSignInRequest<\n    SignInWithPhoneNumberRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport async function linkWithPhoneNumber(\n  auth: Auth,\n  request: LinkWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  const response = await _performSignInRequest<\n    LinkWithPhoneNumberRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, request)\n  );\n  if (response.temporaryProof) {\n    throw _makeTaggedError(auth, AuthErrorCode.NEED_CONFIRMATION, response);\n  }\n  return response;\n}\n\ninterface VerifyPhoneNumberForExistingRequest\n  extends SignInWithPhoneNumberRequest {\n  operation: 'REAUTH';\n}\n\nconst VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_: Partial<\n  ServerErrorMap<ServerError>\n> = {\n  [ServerError.USER_NOT_FOUND]: AuthErrorCode.USER_DELETED\n};\n\nexport async function verifyPhoneNumberForExisting(\n  auth: Auth,\n  request: SignInWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  const apiRequest: VerifyPhoneNumberForExistingRequest = {\n    ...request,\n    operation: 'REAUTH'\n  };\n  return _performSignInRequest<\n    VerifyPhoneNumberForExistingRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, apiRequest),\n    VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport {\n  linkWithPhoneNumber,\n  signInWithPhoneNumber,\n  SignInWithPhoneNumberRequest,\n  verifyPhoneNumberForExisting\n} from '../../api/authentication/sms';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthCredential } from './auth_credential';\n\nexport interface PhoneAuthCredentialParameters {\n  verificationId?: string;\n  verificationCode?: string;\n  phoneNumber?: string;\n  temporaryProof?: string;\n}\n\n/**\n * Represents the credentials returned by {@link PhoneAuthProvider}.\n *\n * @public\n */\nexport class PhoneAuthCredential extends AuthCredential {\n  private constructor(private readonly params: PhoneAuthCredentialParameters) {\n    super(ProviderId.PHONE, SignInMethod.PHONE);\n  }\n\n  /** @internal */\n  static _fromVerification(\n    verificationId: string,\n    verificationCode: string\n  ): PhoneAuthCredential {\n    return new PhoneAuthCredential({ verificationId, verificationCode });\n  }\n\n  /** @internal */\n  static _fromTokenResponse(\n    phoneNumber: string,\n    temporaryProof: string\n  ): PhoneAuthCredential {\n    return new PhoneAuthCredential({ phoneNumber, temporaryProof });\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return signInWithPhoneNumber(auth, this._makeVerificationRequest());\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    return linkWithPhoneNumber(auth, {\n      idToken,\n      ...this._makeVerificationRequest()\n    });\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n  }\n\n  /** @internal */\n  _makeVerificationRequest(): SignInWithPhoneNumberRequest {\n    const { temporaryProof, phoneNumber, verificationId, verificationCode } =\n      this.params;\n    if (temporaryProof && phoneNumber) {\n      return { temporaryProof, phoneNumber };\n    }\n\n    return {\n      sessionInfo: verificationId,\n      code: verificationCode\n    };\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON(): object {\n    const obj: Record<string, string> = {\n      providerId: this.providerId\n    };\n    if (this.params.phoneNumber) {\n      obj.phoneNumber = this.params.phoneNumber;\n    }\n    if (this.params.temporaryProof) {\n      obj.temporaryProof = this.params.temporaryProof;\n    }\n    if (this.params.verificationCode) {\n      obj.verificationCode = this.params.verificationCode;\n    }\n    if (this.params.verificationId) {\n      obj.verificationId = this.params.verificationId;\n    }\n\n    return obj;\n  }\n\n  /** Generates a phone credential based on a plain object or a JSON string. */\n  static fromJSON(json: object | string): PhoneAuthCredential | null {\n    if (typeof json === 'string') {\n      json = JSON.parse(json);\n    }\n\n    const { verificationId, verificationCode, phoneNumber, temporaryProof } =\n      json as { [key: string]: string };\n    if (\n      !verificationCode &&\n      !verificationId &&\n      !phoneNumber &&\n      !temporaryProof\n    ) {\n      return null;\n    }\n\n    return new PhoneAuthCredential({\n      verificationId,\n      verificationCode,\n      phoneNumber,\n      temporaryProof\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { extractQuerystring, querystringDecode } from '@firebase/util';\nimport { ActionCodeOperation } from '../model/public_types';\nimport { AuthErrorCode } from './errors';\nimport { _assert } from './util/assert';\n\n/**\n * Enums for fields in URL query string.\n *\n * @enum {string}\n */\nconst enum QueryField {\n  API_KEY = 'apiKey',\n  CODE = 'oobCode',\n  CONTINUE_URL = 'continueUrl',\n  LANGUAGE_CODE = 'languageCode',\n  MODE = 'mode',\n  TENANT_ID = 'tenantId'\n}\n\n/**\n * Maps the mode string in action code URL to Action Code Info operation.\n *\n * @param mode\n */\nfunction parseMode(mode: string | null): ActionCodeOperation | null {\n  switch (mode) {\n    case 'recoverEmail':\n      return ActionCodeOperation.RECOVER_EMAIL;\n    case 'resetPassword':\n      return ActionCodeOperation.PASSWORD_RESET;\n    case 'signIn':\n      return ActionCodeOperation.EMAIL_SIGNIN;\n    case 'verifyEmail':\n      return ActionCodeOperation.VERIFY_EMAIL;\n    case 'verifyAndChangeEmail':\n      return ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL;\n    case 'revertSecondFactorAddition':\n      return ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION;\n    default:\n      return null;\n  }\n}\n\n/**\n * Helper to parse FDL links\n *\n * @param url\n */\nfunction parseDeepLink(url: string): string {\n  const link = querystringDecode(extractQuerystring(url))['link'];\n\n  // Double link case (automatic redirect).\n  const doubleDeepLink = link\n    ? querystringDecode(extractQuerystring(link))['deep_link_id']\n    : null;\n  // iOS custom scheme links.\n  const iOSDeepLink = querystringDecode(extractQuerystring(url))[\n    'deep_link_id'\n  ];\n  const iOSDoubleDeepLink = iOSDeepLink\n    ? querystringDecode(extractQuerystring(iOSDeepLink))['link']\n    : null;\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n\n/**\n * A utility class to parse email action URLs such as password reset, email verification,\n * email link sign in, etc.\n *\n * @public\n */\nexport class ActionCodeURL {\n  /**\n   * The API key of the email action link.\n   */\n  readonly apiKey: string;\n  /**\n   * The action code of the email action link.\n   */\n  readonly code: string;\n  /**\n   * The continue URL of the email action link. Null if not provided.\n   */\n  readonly continueUrl: string | null;\n  /**\n   * The language code of the email action link. Null if not provided.\n   */\n  readonly languageCode: string | null;\n  /**\n   * The action performed by the email action link. It returns from one of the types from\n   * {@link ActionCodeInfo}\n   */\n  readonly operation: string;\n  /**\n   * The tenant ID of the email action link. Null if the email action is from the parent project.\n   */\n  readonly tenantId: string | null;\n\n  /**\n   * @param actionLink - The link from which to extract the URL.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @internal\n   */\n  constructor(actionLink: string) {\n    const searchParams = querystringDecode(extractQuerystring(actionLink));\n    const apiKey = searchParams[QueryField.API_KEY] ?? null;\n    const code = searchParams[QueryField.CODE] ?? null;\n    const operation = parseMode(searchParams[QueryField.MODE] ?? null);\n    // Validate API key, code and mode.\n    _assert(apiKey && code && operation, AuthErrorCode.ARGUMENT_ERROR);\n    this.apiKey = apiKey;\n    this.operation = operation;\n    this.code = code;\n    this.continueUrl = searchParams[QueryField.CONTINUE_URL] ?? null;\n    this.languageCode = searchParams[QueryField.LANGUAGE_CODE] ?? null;\n    this.tenantId = searchParams[QueryField.TENANT_ID] ?? null;\n  }\n\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n   * otherwise returns null.\n   *\n   * @param link  - The email action link string.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @public\n   */\n  static parseLink(link: string): ActionCodeURL | null {\n    const actionLink = parseDeepLink(link);\n    try {\n      return new ActionCodeURL(actionLink);\n    } catch {\n      return null;\n    }\n  }\n}\n\n/**\n * Parses the email action link string and returns an {@link ActionCodeURL} if\n * the link is valid, otherwise returns null.\n *\n * @public\n */\nexport function parseActionCodeURL(link: string): ActionCodeURL | null {\n  return ActionCodeURL.parseLink(link);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\nimport { AuthProvider } from '../../model/public_types';\n\nimport { ActionCodeURL } from '../action_code_url';\nimport { EmailAuthCredential } from '../credentials/email';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\n\n/**\n * Provider for generating {@link EmailAuthCredential}.\n *\n * @public\n */\nexport class EmailAuthProvider implements AuthProvider {\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  static readonly PROVIDER_ID: 'password' = ProviderId.PASSWORD;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n   */\n  static readonly EMAIL_PASSWORD_SIGN_IN_METHOD: 'password' =\n    SignInMethod.EMAIL_PASSWORD;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_LINK.\n   */\n  static readonly EMAIL_LINK_SIGN_IN_METHOD: 'emailLink' =\n    SignInMethod.EMAIL_LINK;\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  readonly providerId = EmailAuthProvider.PROVIDER_ID;\n\n  /**\n   * Initialize an {@link AuthCredential} using an email and password.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credential(email, password);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n   * ```\n   *\n   * @param email - Email address.\n   * @param password - User account password.\n   * @returns The auth provider credential.\n   */\n  static credential(email: string, password: string): EmailAuthCredential {\n    return EmailAuthCredential._fromEmailAndPassword(email, password);\n  }\n\n  /**\n   * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n   * email link operation.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * await sendSignInLinkToEmail(auth, email);\n   * // Obtain emailLink from user.\n   * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance used to verify the link.\n   * @param email - Email address.\n   * @param emailLink - Sign-in email link.\n   * @returns - The auth provider credential.\n   */\n  static credentialWithLink(\n    email: string,\n    emailLink: string\n  ): EmailAuthCredential {\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    _assert(actionCodeUrl, AuthErrorCode.ARGUMENT_ERROR);\n\n    return EmailAuthCredential._fromEmailAndCode(\n      email,\n      actionCodeUrl.code,\n      actionCodeUrl.tenantId\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider } from '../../model/public_types';\n\n/**\n * Map of OAuth Custom Parameters.\n *\n * @public\n */\nexport type CustomParameters = Record<string, string>;\n\n/**\n * The base class for all Federated providers (OAuth (including OIDC), SAML).\n *\n * This class is not meant to be instantiated directly.\n *\n * @public\n */\nexport abstract class FederatedAuthProvider implements AuthProvider {\n  /** @internal */\n  defaultLanguageCode: string | null = null;\n  /** @internal */\n  private customParameters: CustomParameters = {};\n\n  /**\n   * Constructor for generic OAuth providers.\n   *\n   * @param providerId - Provider for which credentials should be generated.\n   */\n  constructor(readonly providerId: string) {}\n\n  /**\n   * Set the language gode.\n   *\n   * @param languageCode - language code\n   */\n  setDefaultLanguage(languageCode: string | null): void {\n    this.defaultLanguageCode = languageCode;\n  }\n\n  /**\n   * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n   * operations.\n   *\n   * @remarks\n   * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n   * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n   *\n   * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n   */\n  setCustomParameters(customOAuthParameters: CustomParameters): AuthProvider {\n    this.customParameters = customOAuthParameters;\n    return this;\n  }\n\n  /**\n   * Retrieve the current list of {@link CustomParameters}.\n   */\n  getCustomParameters(): CustomParameters {\n    return this.customParameters;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, UserCredential } from '../../model/public_types';\n\nimport { _assert } from '../util/assert';\nimport { AuthErrorCode } from '../errors';\n\nimport { OAuthCredential, OAuthCredentialParams } from '../credentials/oauth';\nimport { UserCredentialInternal } from '../../model/user';\nimport { FirebaseError } from '@firebase/util';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { SignInWithIdpResponse } from '../../../internal';\nimport { FederatedAuthProvider } from './federated';\n\n/**\n * Defines the options for initializing an {@link OAuthCredential}.\n *\n * @remarks\n * For ID tokens with nonce claim, the raw nonce has to also be provided.\n *\n * @public\n */\nexport interface OAuthCredentialOptions {\n  /**\n   * The OAuth ID token used to initialize the {@link OAuthCredential}.\n   */\n  idToken?: string;\n  /**\n   * The OAuth access token used to initialize the {@link OAuthCredential}.\n   */\n  accessToken?: string;\n  /**\n   * The raw nonce associated with the ID token.\n   *\n   * @remarks\n   * It is required when an ID token with a nonce field is provided. The SHA-256 hash of the\n   * raw nonce must match the nonce field in the ID token.\n   */\n  rawNonce?: string;\n}\n\n/**\n * Common code to all OAuth providers. This is separate from the\n * {@link OAuthProvider} so that child providers (like\n * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\n * Instead, they rely on a static `credential` method.\n */\nexport abstract class BaseOAuthProvider\n  extends FederatedAuthProvider\n  implements AuthProvider\n{\n  /** @internal */\n  private scopes: string[] = [];\n\n  /**\n   * Add an OAuth scope to the credential.\n   *\n   * @param scope - Provider OAuth scope to add.\n   */\n  addScope(scope: string): AuthProvider {\n    // If not already added, add scope to list.\n    if (!this.scopes.includes(scope)) {\n      this.scopes.push(scope);\n    }\n    return this;\n  }\n\n  /**\n   * Retrieve the current list of OAuth scopes.\n   */\n  getScopes(): string[] {\n    return [...this.scopes];\n  }\n}\n\n/**\n * Provider for generating generic {@link OAuthCredential}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new OAuthProvider('google.com');\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a OAuth Access Token for the provider.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new OAuthProvider('google.com');\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a OAuth Access Token for the provider.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nexport class OAuthProvider extends BaseOAuthProvider {\n  /**\n   * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json: object | string): OAuthCredential {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    _assert(\n      'providerId' in obj && 'signInMethod' in obj,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    return OAuthCredential._fromParams(obj);\n  }\n\n  /**\n   * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n   *\n   * @remarks\n   * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n   * the raw nonce must match the nonce field in the ID token.\n   *\n   * @example\n   * ```javascript\n   * // `googleUser` from the onsuccess Google Sign In callback.\n   * // Initialize a generate OAuth provider with a `google.com` providerId.\n   * const provider = new OAuthProvider('google.com');\n   * const credential = provider.credential({\n   *   idToken: googleUser.getAuthResponse().id_token,\n   * });\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param params - Either the options object containing the ID token, access token and raw nonce\n   * or the ID token string.\n   */\n  credential(params: OAuthCredentialOptions): OAuthCredential {\n    return this._credential({ ...params, nonce: params.rawNonce });\n  }\n\n  /** An internal credential method that accepts more permissive options */\n  private _credential(\n    params: Omit<OAuthCredentialParams, 'signInMethod' | 'providerId'>\n  ): OAuthCredential {\n    _assert(params.idToken || params.accessToken, AuthErrorCode.ARGUMENT_ERROR);\n    // For OAuthCredential, sign in method is same as providerId.\n    return OAuthCredential._fromParams({\n      ...params,\n      providerId: this.providerId,\n      signInMethod: this.providerId\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return OAuthProvider.oauthCredentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return OAuthProvider.oauthCredentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static oauthCredentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const {\n      oauthIdToken,\n      oauthAccessToken,\n      oauthTokenSecret,\n      pendingToken,\n      nonce,\n      providerId\n    } = tokenResponse as SignInWithIdpResponse;\n    if (\n      !oauthAccessToken &&\n      !oauthTokenSecret &&\n      !oauthIdToken &&\n      !pendingToken\n    ) {\n      return null;\n    }\n\n    if (!providerId) {\n      return null;\n    }\n\n    try {\n      return new OAuthProvider(providerId)._credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        nonce,\n        pendingToken\n      });\n    } catch (e) {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('user_birthday');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = FacebookAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * provider.addScope('user_birthday');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = FacebookAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nexport class FacebookAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.FACEBOOK. */\n  static readonly FACEBOOK_SIGN_IN_METHOD: 'facebook.com' =\n    SignInMethod.FACEBOOK;\n  /** Always set to {@link ProviderId}.FACEBOOK. */\n  static readonly PROVIDER_ID: 'facebook.com' = ProviderId.FACEBOOK;\n\n  constructor() {\n    super(ProviderId.FACEBOOK);\n  }\n\n  /**\n   * Creates a credential for Facebook.\n   *\n   * @example\n   * ```javascript\n   * // `event` from the Facebook auth.authResponseChange callback.\n   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param accessToken - Facebook access token.\n   */\n  static credential(accessToken: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: FacebookAuthProvider.PROVIDER_ID,\n      signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return FacebookAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return FacebookAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n\n    try {\n      return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GoogleAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Google Access Token.\n *   const credential = GoogleAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GoogleAuthProvider();\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Google Access Token.\n * const credential = GoogleAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nexport class GoogleAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.GOOGLE. */\n  static readonly GOOGLE_SIGN_IN_METHOD: 'google.com' = SignInMethod.GOOGLE;\n  /** Always set to {@link ProviderId}.GOOGLE. */\n  static readonly PROVIDER_ID: 'google.com' = ProviderId.GOOGLE;\n\n  constructor() {\n    super(ProviderId.GOOGLE);\n    this.addScope('profile');\n  }\n\n  /**\n   * Creates a credential for Google. At least one of ID token and access token is required.\n   *\n   * @example\n   * ```javascript\n   * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param idToken - Google ID token.\n   * @param accessToken - Google access token.\n   */\n  static credential(\n    idToken?: string | null,\n    accessToken?: string | null\n  ): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: GoogleAuthProvider.PROVIDER_ID,\n      signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n      idToken,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return GoogleAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return GoogleAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const { oauthIdToken, oauthAccessToken } =\n      tokenResponse as SignInWithIdpResponse;\n    if (!oauthIdToken && !oauthAccessToken) {\n      // This could be an oauth 1 credential or a phone credential\n      return null;\n    }\n\n    try {\n      return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n *\n * @remarks\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\n * the {@link signInWithPopup} handler:\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GithubAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('repo');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Github Access Token.\n *   const credential = GithubAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GithubAuthProvider();\n * provider.addScope('repo');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Github Access Token.\n * const credential = GithubAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nexport class GithubAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.GITHUB. */\n  static readonly GITHUB_SIGN_IN_METHOD: 'github.com' = SignInMethod.GITHUB;\n  /** Always set to {@link ProviderId}.GITHUB. */\n  static readonly PROVIDER_ID: 'github.com' = ProviderId.GITHUB;\n\n  constructor() {\n    super(ProviderId.GITHUB);\n  }\n\n  /**\n   * Creates a credential for Github.\n   *\n   * @param accessToken - Github access token.\n   */\n  static credential(accessToken: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: GithubAuthProvider.PROVIDER_ID,\n      signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return GithubAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return GithubAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n\n    try {\n      return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents the SAML credentials returned by an {@link SAMLAuthProvider}.\n *\n * @public\n */\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthCredential } from './auth_credential';\n\nconst IDP_REQUEST_URI = 'http://localhost';\n\n/**\n * @public\n */\nexport class SAMLAuthCredential extends AuthCredential {\n  /** @internal */\n  private constructor(\n    providerId: string,\n    private readonly pendingToken: string\n  ) {\n    super(providerId, providerId);\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON(): object {\n    return {\n      signInMethod: this.signInMethod,\n      providerId: this.providerId,\n      pendingToken: this.pendingToken\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json: string | object): SAMLAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    const { providerId, signInMethod, pendingToken }: Record<string, string> =\n      obj;\n    if (\n      !providerId ||\n      !signInMethod ||\n      !pendingToken ||\n      providerId !== signInMethod\n    ) {\n      return null;\n    }\n\n    return new SAMLAuthCredential(providerId, pendingToken);\n  }\n\n  /**\n   * Helper static method to avoid exposing the constructor to end users.\n   *\n   * @internal\n   */\n  static _create(providerId: string, pendingToken: string): SAMLAuthCredential {\n    return new SAMLAuthCredential(providerId, pendingToken);\n  }\n\n  private buildRequest(): SignInWithIdpRequest {\n    return {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true,\n      pendingToken: this.pendingToken\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredential } from '../../model/public_types';\nimport { UserCredentialInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { SAMLAuthCredential } from '../credentials/saml';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { FederatedAuthProvider } from './federated';\n\nconst SAML_PROVIDER_PREFIX = 'saml.';\n\n/**\n * An {@link AuthProvider} for SAML.\n *\n * @public\n */\nexport class SAMLAuthProvider extends FederatedAuthProvider {\n  /**\n   * Constructor. The providerId must start with \"saml.\"\n   * @param providerId - SAML provider ID.\n   */\n  constructor(providerId: string) {\n    _assert(\n      providerId.startsWith(SAML_PROVIDER_PREFIX),\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    super(providerId);\n  }\n\n  /**\n   * Generates an {@link AuthCredential} from a {@link UserCredential} after a\n   * successful SAML flow completes.\n   *\n   * @remarks\n   *\n   * For example, to get an {@link AuthCredential}, you could write the\n   * following code:\n   *\n   * ```js\n   * const userCredential = await signInWithPopup(auth, samlProvider);\n   * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n   * ```\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): AuthCredential | null {\n    return SAMLAuthProvider.samlCredentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): AuthCredential | null {\n    return SAMLAuthProvider.samlCredentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  /**\n   * Creates an {@link AuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json: string | object): AuthCredential {\n    const credential = SAMLAuthCredential.fromJSON(json);\n    _assert(credential, AuthErrorCode.ARGUMENT_ERROR);\n    return credential;\n  }\n\n  private static samlCredentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): SAMLAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const { pendingToken, providerId } = tokenResponse as SignInWithIdpResponse;\n\n    if (!pendingToken || !providerId) {\n      return null;\n    }\n\n    try {\n      return SAMLAuthCredential._create(providerId, pendingToken);\n    } catch (e) {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @license\n * Copyright 2020 Twitter LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new TwitterAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Twitter Access Token and Secret.\n *   const credential = TwitterAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n *   const secret = credential.secret;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new TwitterAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Twitter Access Token and Secret.\n * const credential = TwitterAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * const secret = credential.secret;\n * ```\n *\n * @public\n */\nexport class TwitterAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.TWITTER. */\n  static readonly TWITTER_SIGN_IN_METHOD: 'twitter.com' = SignInMethod.TWITTER;\n  /** Always set to {@link ProviderId}.TWITTER. */\n  static readonly PROVIDER_ID: 'twitter.com' = ProviderId.TWITTER;\n\n  constructor() {\n    super(ProviderId.TWITTER);\n  }\n\n  /**\n   * Creates a credential for Twitter.\n   *\n   * @param token - Twitter access token.\n   * @param secret - Twitter secret.\n   */\n  static credential(token: string, secret: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: TwitterAuthProvider.PROVIDER_ID,\n      signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n      oauthToken: token,\n      oauthTokenSecret: secret\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return TwitterAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return TwitterAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { oauthAccessToken, oauthTokenSecret } =\n      tokenResponse as SignInWithIdpResponse;\n    if (!oauthAccessToken || !oauthTokenSecret) {\n      return null;\n    }\n\n    try {\n      return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignUpRequest {\n  returnSecureToken?: boolean;\n  email?: string;\n  password?: string;\n  tenantId?: string;\n}\n\nexport interface SignUpResponse extends IdTokenResponse {\n  displayName?: string;\n  email?: string;\n}\n\nexport async function signUp(\n  auth: Auth,\n  request: SignUpRequest\n): Promise<SignUpResponse> {\n  return _performSignInRequest<SignUpRequest, SignUpResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_UP,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { UserImpl } from './user_impl';\nimport { AuthInternal } from '../../model/auth';\nimport { OperationType, ProviderId } from '../../model/enums';\n\ninterface UserCredentialParams {\n  readonly user: UserInternal;\n  readonly providerId: ProviderId | string | null;\n  readonly _tokenResponse?: PhoneOrOauthTokenResponse;\n  readonly operationType: OperationType;\n}\n\nexport class UserCredentialImpl\n  implements UserCredentialInternal, UserCredentialParams\n{\n  readonly user: UserInternal;\n  readonly providerId: ProviderId | string | null;\n  readonly _tokenResponse: PhoneOrOauthTokenResponse | undefined;\n  readonly operationType: OperationType;\n\n  constructor(params: UserCredentialParams) {\n    this.user = params.user;\n    this.providerId = params.providerId;\n    this._tokenResponse = params._tokenResponse;\n    this.operationType = params.operationType;\n  }\n\n  static async _fromIdTokenResponse(\n    auth: AuthInternal,\n    operationType: OperationType,\n    idTokenResponse: IdTokenResponse,\n    isAnonymous: boolean = false\n  ): Promise<UserCredentialInternal> {\n    const user = await UserImpl._fromIdTokenResponse(\n      auth,\n      idTokenResponse,\n      isAnonymous\n    );\n    const providerId = providerIdForResponse(idTokenResponse);\n    const userCred = new UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: idTokenResponse,\n      operationType\n    });\n    return userCred;\n  }\n\n  static async _forOperation(\n    user: UserInternal,\n    operationType: OperationType,\n    response: PhoneOrOauthTokenResponse\n  ): Promise<UserCredentialImpl> {\n    await user._updateTokensIfNecessary(response, /* reload */ true);\n    const providerId = providerIdForResponse(response);\n    return new UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: response,\n      operationType\n    });\n  }\n}\n\nfunction providerIdForResponse(\n  response: IdTokenResponse\n): ProviderId | string | null {\n  if (response.providerId) {\n    return response.providerId;\n  }\n\n  if ('phoneNumber' in response) {\n    return ProviderId.PHONE;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth, UserCredential } from '../../model/public_types';\nimport { signUp } from '../../api/authentication/sign_up';\nimport { UserInternal } from '../../model/user';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { OperationType } from '../../model/enums';\n\n/**\n * Asynchronously signs in as an anonymous user.\n *\n * @remarks\n * If there is already an anonymous user signed in, that user will be returned; otherwise, a\n * new anonymous user identity will be created and returned.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport async function signInAnonymously(auth: Auth): Promise<UserCredential> {\n  const authInternal = _castAuth(auth);\n  await authInternal._initializationPromise;\n  if (authInternal.currentUser?.isAnonymous) {\n    // If an anonymous user is already signed in, no need to sign them in again.\n    return new UserCredentialImpl({\n      user: authInternal.currentUser as UserInternal,\n      providerId: null,\n      operationType: OperationType.SIGN_IN\n    });\n  }\n  const response = await signUp(authInternal, {\n    returnSecureToken: true\n  });\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    authInternal,\n    OperationType.SIGN_IN,\n    response,\n    true\n  );\n  await authInternal._updateCurrentUser(userCredential.user);\n  return userCredential;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MultiFactorError as MultiFactorErrorPublic } from '../model/public_types';\nimport { FirebaseError } from '@firebase/util';\nimport { AuthInternal } from '../model/auth';\nimport { IdTokenResponse } from '../model/id_token';\nimport { AuthErrorCode } from '../core/errors';\nimport { UserInternal } from '../model/user';\nimport { AuthCredential } from '../core/credentials';\nimport { IdTokenMfaResponse } from '../api/authentication/mfa';\nimport { OperationType } from '../model/enums';\n\nexport type MultiFactorErrorData = MultiFactorErrorPublic['customData'] & {\n  _serverResponse: IdTokenMfaResponse;\n};\n\nexport class MultiFactorError\n  extends FirebaseError\n  implements MultiFactorErrorPublic\n{\n  readonly customData: MultiFactorErrorData;\n\n  private constructor(\n    auth: AuthInternal,\n    error: FirebaseError,\n    readonly operationType: OperationType,\n    readonly user?: UserInternal\n  ) {\n    super(error.code, error.message);\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, MultiFactorError.prototype);\n    this.customData = {\n      appName: auth.name,\n      tenantId: auth.tenantId ?? undefined,\n      _serverResponse: error.customData!._serverResponse as IdTokenMfaResponse,\n      operationType\n    };\n  }\n\n  static _fromErrorAndOperation(\n    auth: AuthInternal,\n    error: FirebaseError,\n    operationType: OperationType,\n    user?: UserInternal\n  ): MultiFactorError {\n    return new MultiFactorError(auth, error, operationType, user);\n  }\n}\n\nexport function _processCredentialSavingMfaContextIfNecessary(\n  auth: AuthInternal,\n  operationType: OperationType,\n  credential: AuthCredential,\n  user?: UserInternal\n): Promise<IdTokenResponse> {\n  const idTokenProvider =\n    operationType === OperationType.REAUTHENTICATE\n      ? credential._getReauthenticationResolver(auth)\n      : credential._getIdTokenResponse(auth);\n\n  return idTokenProvider.catch(error => {\n    if (error.code === `auth/${AuthErrorCode.MFA_REQUIRED}`) {\n      throw MultiFactorError._fromErrorAndOperation(\n        auth,\n        error,\n        operationType,\n        user\n      );\n    }\n\n    throw error;\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface ProviderAssociatedObject {\n  providerId?: string;\n}\n\n/**\n * Takes a set of UserInfo provider data and converts it to a set of names\n */\nexport function providerDataAsNames<T extends ProviderAssociatedObject>(\n  providerData: T[]\n): Set<string> {\n  return new Set(\n    providerData\n      .map(({ providerId }) => providerId)\n      .filter(pid => !!pid) as string[]\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../../model/public_types';\n\nimport { deleteLinkedAccounts } from '../../api/account_management/account';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { providerDataAsNames } from '../util/providers';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { _reloadWithoutSaving } from './reload';\nimport { UserCredentialImpl } from './user_credential_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType, ProviderId } from '../../model/enums';\n\n/**\n * Unlinks a provider from a user account.\n *\n * @param user - The user.\n * @param providerId - The provider to unlink.\n *\n * @public\n */\nexport async function unlink(user: User, providerId: string): Promise<User> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  await _assertLinkedStatus(true, userInternal, providerId);\n  const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {\n    idToken: await userInternal.getIdToken(),\n    deleteProvider: [providerId]\n  });\n\n  const providersLeft = providerDataAsNames(providerUserInfo || []);\n\n  userInternal.providerData = userInternal.providerData.filter(pd =>\n    providersLeft.has(pd.providerId)\n  );\n  if (!providersLeft.has(ProviderId.PHONE)) {\n    userInternal.phoneNumber = null;\n  }\n\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  return userInternal;\n}\n\nexport async function _link(\n  user: UserInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredentialInternal> {\n  const response = await _logoutIfInvalidated(\n    user,\n    credential._linkToIdToken(user.auth, await user.getIdToken()),\n    bypassAuthState\n  );\n  return UserCredentialImpl._forOperation(user, OperationType.LINK, response);\n}\n\nexport async function _assertLinkedStatus(\n  expected: boolean,\n  user: UserInternal,\n  provider: string\n): Promise<void> {\n  await _reloadWithoutSaving(user);\n  const providerIds = providerDataAsNames(user.providerData);\n\n  const code =\n    expected === false\n      ? AuthErrorCode.PROVIDER_ALREADY_LINKED\n      : AuthErrorCode.NO_SUCH_PROVIDER;\n  _assert(providerIds.has(provider) === expected, user.auth, code);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { _processCredentialSavingMfaContextIfNecessary } from '../../mfa/mfa_error';\nimport { OperationType } from '../../model/enums';\nimport { UserInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { AuthErrorCode } from '../errors';\nimport { _assert, _fail } from '../util/assert';\nimport { _parseToken } from './id_token_result';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { UserCredentialImpl } from './user_credential_impl';\n\nexport async function _reauthenticate(\n  user: UserInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredentialImpl> {\n  const { auth } = user;\n  const operationType = OperationType.REAUTHENTICATE;\n\n  try {\n    const response = await _logoutIfInvalidated(\n      user,\n      _processCredentialSavingMfaContextIfNecessary(\n        auth,\n        operationType,\n        credential,\n        user\n      ),\n      bypassAuthState\n    );\n    _assert(response.idToken, auth, AuthErrorCode.INTERNAL_ERROR);\n    const parsed = _parseToken(response.idToken);\n    _assert(parsed, auth, AuthErrorCode.INTERNAL_ERROR);\n\n    const { sub: localId } = parsed;\n    _assert(user.uid === localId, auth, AuthErrorCode.USER_MISMATCH);\n\n    return UserCredentialImpl._forOperation(user, operationType, response);\n  } catch (e) {\n    // Convert user deleted error into user mismatch\n    if ((e as FirebaseError)?.code === `auth/${AuthErrorCode.USER_DELETED}`) {\n      _fail(auth, AuthErrorCode.USER_MISMATCH);\n    }\n    throw e;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential, Auth, User } from '../../model/public_types';\n\nimport { _processCredentialSavingMfaContextIfNecessary } from '../../mfa/mfa_error';\nimport { AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { _assertLinkedStatus, _link } from '../user/link_unlink';\nimport { _reauthenticate } from '../user/reauthenticate';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType } from '../../model/enums';\n\nexport async function _signInWithCredential(\n  auth: AuthInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredential> {\n  const operationType = OperationType.SIGN_IN;\n  const response = await _processCredentialSavingMfaContextIfNecessary(\n    auth,\n    operationType,\n    credential\n  );\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    auth,\n    operationType,\n    response\n  );\n\n  if (!bypassAuthState) {\n    await auth._updateCurrentUser(userCredential.user);\n  }\n  return userCredential;\n}\n\n/**\n * Asynchronously signs in with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * @param auth - The {@link Auth} instance.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function signInWithCredential(\n  auth: Auth,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  return _signInWithCredential(_castAuth(auth), credential);\n}\n\n/**\n * Links the user account with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function linkWithCredential(\n  user: User,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  const userInternal = getModularInstance(user) as UserInternal;\n\n  await _assertLinkedStatus(false, userInternal, credential.providerId);\n\n  return _link(userInternal, credential);\n}\n\n/**\n * Re-authenticates a user using a fresh credential.\n *\n * @remarks\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\n * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\n * or a `TOKEN_EXPIRED` error.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function reauthenticateWithCredential(\n  user: User,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  return _reauthenticate(getModularInstance(user) as UserInternal, credential);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithCustomTokenRequest {\n  token: string;\n  returnSecureToken: boolean;\n  tenantId?: string;\n}\n\nexport interface SignInWithCustomTokenResponse extends IdTokenResponse {}\n\nexport async function signInWithCustomToken(\n  auth: Auth,\n  request: SignInWithCustomTokenRequest\n): Promise<SignInWithCustomTokenResponse> {\n  return _performSignInRequest<\n    SignInWithCustomTokenRequest,\n    SignInWithCustomTokenResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth, UserCredential } from '../../model/public_types';\n\nimport { signInWithCustomToken as getIdTokenResponse } from '../../api/authentication/custom_token';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { OperationType } from '../../model/enums';\n\n/**\n * Asynchronously signs in using a custom token.\n *\n * @remarks\n * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\n * be generated by an auth backend using the\n * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\n * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\n *\n * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\n *\n * @param auth - The {@link Auth} instance.\n * @param customToken - The custom token to sign in with.\n *\n * @public\n */\nexport async function signInWithCustomToken(\n  auth: Auth,\n  customToken: string\n): Promise<UserCredential> {\n  const authInternal = _castAuth(auth);\n  const response: IdTokenResponse = await getIdTokenResponse(authInternal, {\n    token: customToken,\n    returnSecureToken: true\n  });\n  const cred = await UserCredentialImpl._fromIdTokenResponse(\n    authInternal,\n    OperationType.SIGN_IN,\n    response\n  );\n  await authInternal._updateCurrentUser(cred.user);\n  return cred;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FactorId,\n  MultiFactorInfo,\n  PhoneMultiFactorInfo\n} from '../model/public_types';\nimport {\n  PhoneMfaEnrollment,\n  MfaEnrollment\n} from '../api/account_management/mfa';\nimport { AuthErrorCode } from '../core/errors';\nimport { _fail } from '../core/util/assert';\nimport { AuthInternal } from '../model/auth';\n\nexport abstract class MultiFactorInfoImpl implements MultiFactorInfo {\n  readonly uid: string;\n  readonly displayName?: string | null;\n  readonly enrollmentTime: string;\n\n  protected constructor(readonly factorId: FactorId, response: MfaEnrollment) {\n    this.uid = response.mfaEnrollmentId;\n    this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n    this.displayName = response.displayName;\n  }\n\n  static _fromServerResponse(\n    auth: AuthInternal,\n    enrollment: MfaEnrollment\n  ): MultiFactorInfoImpl {\n    if ('phoneInfo' in enrollment) {\n      return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n    }\n    return _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n  }\n}\n\nexport class PhoneMultiFactorInfoImpl\n  extends MultiFactorInfoImpl\n  implements PhoneMultiFactorInfo\n{\n  readonly phoneNumber: string;\n\n  private constructor(response: PhoneMfaEnrollment) {\n    super(FactorId.PHONE, response);\n    this.phoneNumber = response.phoneInfo;\n  }\n\n  static _fromServerResponse(\n    _auth: AuthInternal,\n    enrollment: MfaEnrollment\n  ): PhoneMultiFactorInfoImpl {\n    return new PhoneMultiFactorInfoImpl(enrollment);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeSettings, Auth } from '../../model/public_types';\n\nimport { GetOobCodeRequest } from '../../api/authentication/email_and_password';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\n\nexport function _setActionCodeSettingsOnRequest(\n  auth: Auth,\n  request: GetOobCodeRequest,\n  actionCodeSettings: ActionCodeSettings\n): void {\n  _assert(\n    actionCodeSettings.url?.length > 0,\n    auth,\n    AuthErrorCode.INVALID_CONTINUE_URI\n  );\n  _assert(\n    typeof actionCodeSettings.dynamicLinkDomain === 'undefined' ||\n      actionCodeSettings.dynamicLinkDomain.length > 0,\n    auth,\n    AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN\n  );\n\n  request.continueUrl = actionCodeSettings.url;\n  request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n  request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n\n  if (actionCodeSettings.iOS) {\n    _assert(\n      actionCodeSettings.iOS.bundleId.length > 0,\n      auth,\n      AuthErrorCode.MISSING_IOS_BUNDLE_ID\n    );\n    request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n  }\n\n  if (actionCodeSettings.android) {\n    _assert(\n      actionCodeSettings.android.packageName.length > 0,\n      auth,\n      AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME\n    );\n    request.androidInstallApp = actionCodeSettings.android.installApp;\n    request.androidMinimumVersionCode =\n      actionCodeSettings.android.minimumVersion;\n    request.androidPackageName = actionCodeSettings.android.packageName;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionCodeInfo,\n  ActionCodeOperation,\n  ActionCodeSettings,\n  Auth,\n  UserCredential\n} from '../../model/public_types';\n\nimport * as account from '../../api/account_management/email_and_password';\nimport * as authentication from '../../api/authentication/email_and_password';\nimport { signUp } from '../../api/authentication/sign_up';\nimport { MultiFactorInfoImpl } from '../../mfa/mfa_info';\nimport { EmailAuthProvider } from '../providers/email';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _assert } from '../util/assert';\nimport { _setActionCodeSettingsOnRequest } from './action_code_settings';\nimport { signInWithCredential } from './credential';\nimport { _castAuth } from '../auth/auth_impl';\nimport { AuthErrorCode } from '../errors';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType } from '../../model/enums';\n\n/**\n * Sends a password reset email to the given email address.\n *\n * @remarks\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\n * the email sent to the user, along with the new password specified by the user.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain code from user.\n * await confirmPasswordReset('user@example.com', code);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function sendPasswordResetEmail(\n  auth: Auth,\n  email: string,\n  actionCodeSettings?: ActionCodeSettings\n): Promise<void> {\n  const authModular = getModularInstance(auth);\n  const request: authentication.PasswordResetRequest = {\n    requestType: ActionCodeOperation.PASSWORD_RESET,\n    email\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);\n  }\n\n  await authentication.sendPasswordResetEmail(authModular, request);\n}\n\n/**\n * Completes the password reset process, given a confirmation code and new password.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A confirmation code sent to the user.\n * @param newPassword - The new password.\n *\n * @public\n */\nexport async function confirmPasswordReset(\n  auth: Auth,\n  oobCode: string,\n  newPassword: string\n): Promise<void> {\n  await account.resetPassword(getModularInstance(auth), {\n    oobCode,\n    newPassword\n  });\n  // Do not return the email.\n}\n\n/**\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A verification code sent to the user.\n *\n * @public\n */\nexport async function applyActionCode(\n  auth: Auth,\n  oobCode: string\n): Promise<void> {\n  await account.applyActionCode(getModularInstance(auth), { oobCode });\n}\n\n/**\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @returns metadata about the code.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A verification code sent to the user.\n *\n * @public\n */\nexport async function checkActionCode(\n  auth: Auth,\n  oobCode: string\n): Promise<ActionCodeInfo> {\n  const authModular = getModularInstance(auth);\n  const response = await account.resetPassword(authModular, { oobCode });\n\n  // Email could be empty only if the request type is EMAIL_SIGNIN or\n  // VERIFY_AND_CHANGE_EMAIL.\n  // New email should not be empty if the request type is\n  // VERIFY_AND_CHANGE_EMAIL.\n  // Multi-factor info could not be empty if the request type is\n  // REVERT_SECOND_FACTOR_ADDITION.\n  const operation = response.requestType;\n  _assert(operation, authModular, AuthErrorCode.INTERNAL_ERROR);\n  switch (operation) {\n    case ActionCodeOperation.EMAIL_SIGNIN:\n      break;\n    case ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL:\n      _assert(response.newEmail, authModular, AuthErrorCode.INTERNAL_ERROR);\n      break;\n    case ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION:\n      _assert(response.mfaInfo, authModular, AuthErrorCode.INTERNAL_ERROR);\n    // fall through\n    default:\n      _assert(response.email, authModular, AuthErrorCode.INTERNAL_ERROR);\n  }\n\n  // The multi-factor info for revert second factor addition\n  let multiFactorInfo: MultiFactorInfoImpl | null = null;\n  if (response.mfaInfo) {\n    multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(\n      _castAuth(authModular),\n      response.mfaInfo\n    );\n  }\n\n  return {\n    data: {\n      email:\n        (response.requestType === ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL\n          ? response.newEmail\n          : response.email) || null,\n      previousEmail:\n        (response.requestType === ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL\n          ? response.email\n          : response.newEmail) || null,\n      multiFactorInfo\n    },\n    operation\n  };\n}\n\n/**\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\n *\n * @returns the user's email address if valid.\n *\n * @param auth - The {@link Auth} instance.\n * @param code - A verification code sent to the user.\n *\n * @public\n */\nexport async function verifyPasswordResetCode(\n  auth: Auth,\n  code: string\n): Promise<string> {\n  const { data } = await checkActionCode(getModularInstance(auth), code);\n  // Email should always be present since a code was sent to it\n  return data.email!;\n}\n\n/**\n * Creates a new user account associated with the specified email address and password.\n *\n * @remarks\n * On successful creation of the user account, this user will also be signed in to your application.\n *\n * User account creation can fail if the account already exists or the password is invalid.\n *\n * Note: The email address acts as a unique identifier for the user and enables an email-based\n * password reset. This function will create a new user account and set the initial user password.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param password - The user's chosen password.\n *\n * @public\n */\nexport async function createUserWithEmailAndPassword(\n  auth: Auth,\n  email: string,\n  password: string\n): Promise<UserCredential> {\n  const authInternal = _castAuth(auth);\n  const response = await signUp(authInternal, {\n    returnSecureToken: true,\n    email,\n    password\n  });\n\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    authInternal,\n    OperationType.SIGN_IN,\n    response\n  );\n  await authInternal._updateCurrentUser(userCredential.user);\n\n  return userCredential;\n}\n\n/**\n * Asynchronously signs in using an email and password.\n *\n * @remarks\n * Fails with an error if the email address and password do not match.\n *\n * Note: The user's password is NOT the password used to access the user's email account. The\n * email address serves as a unique identifier for the user, and the password is used to access\n * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The users email address.\n * @param password - The users password.\n *\n * @public\n */\nexport function signInWithEmailAndPassword(\n  auth: Auth,\n  email: string,\n  password: string\n): Promise<UserCredential> {\n  return signInWithCredential(\n    getModularInstance(auth),\n    EmailAuthProvider.credential(email, password)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionCodeOperation,\n  ActionCodeSettings,\n  Auth,\n  UserCredential\n} from '../../model/public_types';\n\nimport * as api from '../../api/authentication/email_and_password';\nimport { ActionCodeURL } from '../action_code_url';\nimport { EmailAuthProvider } from '../providers/email';\nimport { _getCurrentUrl } from '../util/location';\nimport { _setActionCodeSettingsOnRequest } from './action_code_settings';\nimport { signInWithCredential } from './credential';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Sends a sign-in email link to the user with the specified email.\n *\n * @remarks\n * The sign-in operation has to always be completed in the app unlike other out of band email\n * actions (password reset and email verifications). This is because, at the end of the flow,\n * the user is expected to be signed in and their Auth state persisted within the app.\n *\n * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\n * address and the email link supplied in the email sent to the user.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain emailLink from the user.\n * if(isSignInWithEmailLink(auth, emailLink)) {\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n * }\n * ```\n *\n * @param authInternal - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function sendSignInLinkToEmail(\n  auth: Auth,\n  email: string,\n  actionCodeSettings: ActionCodeSettings\n): Promise<void> {\n  const authModular = getModularInstance(auth);\n  const request: api.EmailSignInRequest = {\n    requestType: ActionCodeOperation.EMAIL_SIGNIN,\n    email\n  };\n  _assert(\n    actionCodeSettings.handleCodeInApp,\n    authModular,\n    AuthErrorCode.ARGUMENT_ERROR\n  );\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);\n  }\n\n  await api.sendSignInLinkToEmail(authModular, request);\n}\n\n/**\n * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\n *\n * @param auth - The {@link Auth} instance.\n * @param emailLink - The link sent to the user's email address.\n *\n * @public\n */\nexport function isSignInWithEmailLink(auth: Auth, emailLink: string): boolean {\n  const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n  return actionCodeUrl?.operation === ActionCodeOperation.EMAIL_SIGNIN;\n}\n\n/**\n * Asynchronously signs in using an email and sign-in email link.\n *\n * @remarks\n * If no link is passed, the link is inferred from the current URL.\n *\n * Fails with an error if the email address is invalid or OTP in email link expires.\n *\n * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain emailLink from the user.\n * if(isSignInWithEmailLink(auth, emailLink)) {\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n * }\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param emailLink - The link sent to the user's email address.\n *\n * @public\n */\nexport async function signInWithEmailLink(\n  auth: Auth,\n  email: string,\n  emailLink?: string\n): Promise<UserCredential> {\n  const authModular = getModularInstance(auth);\n  const credential = EmailAuthProvider.credentialWithLink(\n    email,\n    emailLink || _getCurrentUrl()\n  );\n  // Check if the tenant ID in the email link matches the tenant ID on Auth\n  // instance.\n  _assert(\n    credential._tenantId === (authModular.tenantId || null),\n    authModular,\n    AuthErrorCode.TENANT_ID_MISMATCH\n  );\n  return signInWithCredential(authModular, credential);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { Auth } from '../../model/public_types';\n\nexport interface CreateAuthUriRequest {\n  identifier: string;\n  continueUri: string;\n  tenantId?: string;\n}\n\nexport interface CreateAuthUriResponse {\n  signinMethods: string[];\n}\n\nexport async function createAuthUri(\n  auth: Auth,\n  request: CreateAuthUriRequest\n): Promise<CreateAuthUriResponse> {\n  return _performApiRequest<CreateAuthUriRequest, CreateAuthUriResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.CREATE_AUTH_URI,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionCodeOperation,\n  ActionCodeSettings,\n  Auth,\n  User\n} from '../../model/public_types';\n\nimport {\n  createAuthUri,\n  CreateAuthUriRequest\n} from '../../api/authentication/create_auth_uri';\nimport * as api from '../../api/authentication/email_and_password';\nimport { UserInternal } from '../../model/user';\nimport { _getCurrentUrl, _isHttpOrHttps } from '../util/location';\nimport { _setActionCodeSettingsOnRequest } from './action_code_settings';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Gets the list of possible sign in methods for the given email address.\n *\n * @remarks\n * This is useful to differentiate methods of sign-in for the same provider, eg.\n * {@link EmailAuthProvider} which has 2 methods of sign-in,\n * {@link SignInMethod}.EMAIL_PASSWORD and\n * {@link SignInMethod}.EMAIL_LINK.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n *\n * @public\n */\nexport async function fetchSignInMethodsForEmail(\n  auth: Auth,\n  email: string\n): Promise<string[]> {\n  // createAuthUri returns an error if continue URI is not http or https.\n  // For environments like Cordova, Chrome extensions, native frameworks, file\n  // systems, etc, use http://localhost as continue URL.\n  const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\n  const request: CreateAuthUriRequest = {\n    identifier: email,\n    continueUri\n  };\n\n  const { signinMethods } = await createAuthUri(\n    getModularInstance(auth),\n    request\n  );\n\n  return signinMethods || [];\n}\n\n/**\n * Sends a verification email to a user.\n *\n * @remarks\n * The verification process is completed by calling {@link applyActionCode}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendEmailVerification(user, actionCodeSettings);\n * // Obtain code from the user.\n * await applyActionCode(auth, code);\n * ```\n *\n * @param user - The user.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function sendEmailVerification(\n  user: User,\n  actionCodeSettings?: ActionCodeSettings | null\n): Promise<void> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const idToken = await user.getIdToken();\n  const request: api.VerifyEmailRequest = {\n    requestType: ActionCodeOperation.VERIFY_EMAIL,\n    idToken\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(\n      userInternal.auth,\n      request,\n      actionCodeSettings\n    );\n  }\n\n  const { email } = await api.sendEmailVerification(userInternal.auth, request);\n\n  if (email !== user.email) {\n    await user.reload();\n  }\n}\n\n/**\n * Sends a verification email to a new email address.\n *\n * @remarks\n * The user's email will be updated to the new one after being verified.\n *\n * If you have a custom email action handler, you can complete the verification process by calling\n * {@link applyActionCode}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\n * // Obtain code from the user.\n * await applyActionCode(auth, code);\n * ```\n *\n * @param user - The user.\n * @param newEmail - The new email address to be verified before update.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function verifyBeforeUpdateEmail(\n  user: User,\n  newEmail: string,\n  actionCodeSettings?: ActionCodeSettings | null\n): Promise<void> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const idToken = await user.getIdToken();\n  const request: api.VerifyAndChangeEmailRequest = {\n    requestType: ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\n    idToken,\n    newEmail\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(\n      userInternal.auth,\n      request,\n      actionCodeSettings\n    );\n  }\n\n  const { email } = await api.verifyAndChangeEmail(userInternal.auth, request);\n\n  if (email !== user.email) {\n    // If the local copy of the email on user is outdated, reload the\n    // user.\n    await user.reload();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Endpoint, HttpMethod, _performApiRequest } from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface UpdateProfileRequest {\n  idToken: string;\n  displayName?: string | null;\n  photoUrl?: string | null;\n  returnSecureToken: boolean;\n}\n\nexport interface UpdateProfileResponse extends IdTokenResponse {\n  displayName?: string | null;\n  photoUrl?: string | null;\n}\n\nexport async function updateProfile(\n  auth: Auth,\n  request: UpdateProfileRequest\n): Promise<UpdateProfileResponse> {\n  return _performApiRequest<UpdateProfileRequest, UpdateProfileResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SET_ACCOUNT_INFO,\n    request\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../../model/public_types';\n\nimport {\n  updateEmailPassword as apiUpdateEmailPassword,\n  UpdateEmailPasswordRequest\n} from '../../api/account_management/email_and_password';\nimport { updateProfile as apiUpdateProfile } from '../../api/account_management/profile';\nimport { UserInternal } from '../../model/user';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { getModularInstance } from '@firebase/util';\nimport { ProviderId } from '../../model/enums';\n\n/**\n * Updates a user's profile data.\n *\n * @param user - The user.\n * @param profile - The profile's `displayName` and `photoURL` to update.\n *\n * @public\n */\nexport async function updateProfile(\n  user: User,\n  {\n    displayName,\n    photoURL: photoUrl\n  }: { displayName?: string | null; photoURL?: string | null }\n): Promise<void> {\n  if (displayName === undefined && photoUrl === undefined) {\n    return;\n  }\n\n  const userInternal = getModularInstance(user) as UserInternal;\n  const idToken = await userInternal.getIdToken();\n  const profileRequest = {\n    idToken,\n    displayName,\n    photoUrl,\n    returnSecureToken: true\n  };\n  const response = await _logoutIfInvalidated(\n    userInternal,\n    apiUpdateProfile(userInternal.auth, profileRequest)\n  );\n\n  userInternal.displayName = response.displayName || null;\n  userInternal.photoURL = response.photoUrl || null;\n\n  // Update the password provider as well\n  const passwordProvider = userInternal.providerData.find(\n    ({ providerId }) => providerId === ProviderId.PASSWORD\n  );\n  if (passwordProvider) {\n    passwordProvider.displayName = userInternal.displayName;\n    passwordProvider.photoURL = userInternal.photoURL;\n  }\n\n  await userInternal._updateTokensIfNecessary(response);\n}\n\n/**\n * Updates the user's email address.\n *\n * @remarks\n * An email will be sent to the original email address (if it was set) that allows to revoke the\n * email address change, in order to protect them from account hijacking.\n *\n * Important: this is a security sensitive operation that requires the user to have recently signed\n * in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n * @param newEmail - The new email address.\n *\n * @public\n */\nexport function updateEmail(user: User, newEmail: string): Promise<void> {\n  return updateEmailOrPassword(\n    getModularInstance(user) as UserInternal,\n    newEmail,\n    null\n  );\n}\n\n/**\n * Updates the user's password.\n *\n * @remarks\n * Important: this is a security sensitive operation that requires the user to have recently signed\n * in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n * @param newPassword - The new password.\n *\n * @public\n */\nexport function updatePassword(user: User, newPassword: string): Promise<void> {\n  return updateEmailOrPassword(\n    getModularInstance(user) as UserInternal,\n    null,\n    newPassword\n  );\n}\n\nasync function updateEmailOrPassword(\n  user: UserInternal,\n  email: string | null,\n  password: string | null\n): Promise<void> {\n  const { auth } = user;\n  const idToken = await user.getIdToken();\n  const request: UpdateEmailPasswordRequest = {\n    idToken,\n    returnSecureToken: true\n  };\n\n  if (email) {\n    request.email = email;\n  }\n\n  if (password) {\n    request.password = password;\n  }\n\n  const response = await _logoutIfInvalidated(\n    user,\n    apiUpdateEmailPassword(auth, request)\n  );\n  await user._updateTokensIfNecessary(response, /* reload */ true);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AdditionalUserInfo, UserCredential } from '../../model/public_types';\nimport { IdTokenResponse, IdTokenResponseKind } from '../../model/id_token';\nimport { _parseToken } from './id_token_result';\nimport { UserCredentialInternal } from '../../model/user';\nimport { ProviderId } from '../../model/enums';\n\n/**\n * Parse the `AdditionalUserInfo` from the ID token response.\n *\n */\nexport function _fromIdTokenResponse(\n  idTokenResponse?: IdTokenResponse\n): AdditionalUserInfo | null {\n  if (!idTokenResponse) {\n    return null;\n  }\n  const { providerId } = idTokenResponse;\n  const profile = idTokenResponse.rawUserInfo\n    ? JSON.parse(idTokenResponse.rawUserInfo)\n    : {};\n  const isNewUser =\n    idTokenResponse.isNewUser ||\n    idTokenResponse.kind === IdTokenResponseKind.SignupNewUser;\n  if (!providerId && idTokenResponse?.idToken) {\n    const signInProvider = _parseToken(idTokenResponse.idToken)?.firebase?.[\n      'sign_in_provider'\n    ];\n    if (signInProvider) {\n      const filteredProviderId =\n        signInProvider !== ProviderId.ANONYMOUS &&\n        signInProvider !== ProviderId.CUSTOM\n          ? (signInProvider as ProviderId)\n          : null;\n      // Uses generic class in accordance with the legacy SDK.\n      return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n    }\n  }\n  if (!providerId) {\n    return null;\n  }\n  switch (providerId) {\n    case ProviderId.FACEBOOK:\n      return new FacebookAdditionalUserInfo(isNewUser, profile);\n    case ProviderId.GITHUB:\n      return new GithubAdditionalUserInfo(isNewUser, profile);\n    case ProviderId.GOOGLE:\n      return new GoogleAdditionalUserInfo(isNewUser, profile);\n    case ProviderId.TWITTER:\n      return new TwitterAdditionalUserInfo(\n        isNewUser,\n        profile,\n        idTokenResponse.screenName || null\n      );\n    case ProviderId.CUSTOM:\n    case ProviderId.ANONYMOUS:\n      return new GenericAdditionalUserInfo(isNewUser, null);\n    default:\n      return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n  }\n}\n\nclass GenericAdditionalUserInfo implements AdditionalUserInfo {\n  constructor(\n    readonly isNewUser: boolean,\n    readonly providerId: ProviderId | string | null,\n    readonly profile: Record<string, unknown> = {}\n  ) {}\n}\n\nclass FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {\n  constructor(\n    isNewUser: boolean,\n    providerId: ProviderId,\n    profile: Record<string, unknown>,\n    readonly username: string | null\n  ) {\n    super(isNewUser, providerId, profile);\n  }\n}\n\nclass FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {\n  constructor(isNewUser: boolean, profile: Record<string, unknown>) {\n    super(isNewUser, ProviderId.FACEBOOK, profile);\n  }\n}\n\nclass GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n  constructor(isNewUser: boolean, profile: Record<string, unknown>) {\n    super(\n      isNewUser,\n      ProviderId.GITHUB,\n      profile,\n      typeof profile?.login === 'string' ? profile?.login : null\n    );\n  }\n}\n\nclass GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {\n  constructor(isNewUser: boolean, profile: Record<string, unknown>) {\n    super(isNewUser, ProviderId.GOOGLE, profile);\n  }\n}\n\nclass TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n  constructor(\n    isNewUser: boolean,\n    profile: Record<string, unknown>,\n    screenName: string | null\n  ) {\n    super(isNewUser, ProviderId.TWITTER, profile, screenName);\n  }\n}\n\n/**\n * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\n *\n * @param userCredential - The user credential.\n *\n * @public\n */\nexport function getAdditionalUserInfo(\n  userCredential: UserCredential\n): AdditionalUserInfo | null {\n  const { user, _tokenResponse } = userCredential as UserCredentialInternal;\n  if (user.isAnonymous && !_tokenResponse) {\n    // Handle the special case where signInAnonymously() gets called twice.\n    // No network call is made so there's nothing to actually fill this in\n    return {\n      providerId: null,\n      isNewUser: false,\n      profile: null\n    };\n  }\n\n  return _fromIdTokenResponse(_tokenResponse);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance } from '@firebase/util';\nimport {\n  Auth,\n  NextOrObserver,\n  Persistence,\n  User,\n  CompleteFn,\n  ErrorFn,\n  Unsubscribe\n} from '../model/public_types';\n\nexport {\n  debugErrorMap,\n  prodErrorMap,\n  AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY as AuthErrorCodes\n} from './errors';\n\n// Non-optional auth methods.\n/**\n * Changes the type of persistence on the {@link Auth} instance for the currently saved\n * `Auth` session and applies this type of persistence for future sign-in requests, including\n * sign-in with redirect requests.\n *\n * @remarks\n * This makes it easy for a user signing in to specify whether their session should be\n * remembered or not. It also makes it easier to never persist the `Auth` state for applications\n * that are shared by other users or have sensitive data.\n *\n * @example\n * ```javascript\n * setPersistence(auth, browserSessionPersistence);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param persistence - The {@link Persistence} to use.\n * @returns A `Promise` that resolves once the persistence change has completed\n *\n * @public\n */\nexport function setPersistence(\n  auth: Auth,\n  persistence: Persistence\n): Promise<void> {\n  return getModularInstance(auth).setPersistence(persistence);\n}\n/**\n * Adds an observer for changes to the signed-in user's ID token.\n *\n * @remarks\n * This includes sign-in, sign-out, and token refresh events.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nexport function onIdTokenChanged(\n  auth: Auth,\n  nextOrObserver: NextOrObserver<User>,\n  error?: ErrorFn,\n  completed?: CompleteFn\n): Unsubscribe {\n  return getModularInstance(auth).onIdTokenChanged(\n    nextOrObserver,\n    error,\n    completed\n  );\n}\n/**\n * Adds a blocking callback that runs before an auth state change\n * sets a new user.\n *\n * @param auth - The {@link Auth} instance.\n * @param callback - callback triggered before new user value is set.\n *   If this throws, it blocks the user from being set.\n * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\n *   callback throws, allowing you to undo any side effects.\n */\nexport function beforeAuthStateChanged(\n  auth: Auth,\n  callback: (user: User | null) => void | Promise<void>,\n  onAbort?: () => void\n): Unsubscribe {\n  return getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);\n}\n/**\n * Adds an observer for changes to the user's sign-in state.\n *\n * @remarks\n * To keep the old behavior, see {@link onIdTokenChanged}.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nexport function onAuthStateChanged(\n  auth: Auth,\n  nextOrObserver: NextOrObserver<User>,\n  error?: ErrorFn,\n  completed?: CompleteFn\n): Unsubscribe {\n  return getModularInstance(auth).onAuthStateChanged(\n    nextOrObserver,\n    error,\n    completed\n  );\n}\n/**\n * Sets the current language to the default device/browser preference.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function useDeviceLanguage(auth: Auth): void {\n  getModularInstance(auth).useDeviceLanguage();\n}\n/**\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the\n * {@link Auth} instance.\n *\n * @remarks\n * A new instance copy of the user provided will be made and set as currentUser.\n *\n * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\n * like other sign in methods.\n *\n * The operation fails with an error if the user to be updated belongs to a different Firebase\n * project.\n *\n * @param auth - The {@link Auth} instance.\n * @param user - The new {@link User}.\n *\n * @public\n */\nexport function updateCurrentUser(\n  auth: Auth,\n  user: User | null\n): Promise<void> {\n  return getModularInstance(auth).updateCurrentUser(user);\n}\n/**\n * Signs out the current user.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function signOut(auth: Auth): Promise<void> {\n  return getModularInstance(auth).signOut();\n}\n\nexport { initializeAuth } from './auth/initialize';\nexport { connectAuthEmulator } from './auth/emulator';\n\n// credentials\nexport { AuthCredential } from './credentials';\nexport { EmailAuthCredential } from './credentials/email';\nexport { OAuthCredential } from './credentials/oauth';\nexport { PhoneAuthCredential } from './credentials/phone';\n\n// persistence\nexport { inMemoryPersistence } from './persistence/in_memory';\n\n// providers\nexport { EmailAuthProvider } from './providers/email';\nexport { FacebookAuthProvider } from './providers/facebook';\nexport { CustomParameters } from './providers/federated';\nexport { GoogleAuthProvider } from './providers/google';\nexport { GithubAuthProvider } from './providers/github';\nexport { OAuthProvider, OAuthCredentialOptions } from './providers/oauth';\nexport { SAMLAuthProvider } from './providers/saml';\nexport { TwitterAuthProvider } from './providers/twitter';\n\n// strategies\nexport { signInAnonymously } from './strategies/anonymous';\nexport {\n  signInWithCredential,\n  linkWithCredential,\n  reauthenticateWithCredential\n} from './strategies/credential';\nexport { signInWithCustomToken } from './strategies/custom_token';\nexport {\n  sendPasswordResetEmail,\n  confirmPasswordReset,\n  applyActionCode,\n  checkActionCode,\n  verifyPasswordResetCode,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword\n} from './strategies/email_and_password';\nexport {\n  sendSignInLinkToEmail,\n  isSignInWithEmailLink,\n  signInWithEmailLink\n} from './strategies/email_link';\nexport {\n  fetchSignInMethodsForEmail,\n  sendEmailVerification,\n  verifyBeforeUpdateEmail\n} from './strategies/email';\n\n// core\nexport { ActionCodeURL, parseActionCodeURL } from './action_code_url';\n\n// user\nexport {\n  updateProfile,\n  updateEmail,\n  updatePassword\n} from './user/account_info';\nexport { getIdToken, getIdTokenResult } from './user/id_token_result';\nexport { unlink } from './user/link_unlink';\nexport { getAdditionalUserInfo } from './user/additional_user_info';\n\n// Non-optional user methods.\nexport { reload } from './user/reload';\n/**\n * Deletes and signs out the user.\n *\n * @remarks\n * Important: this is a security-sensitive operation that requires the user to have recently\n * signed in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n *\n * @public\n */\nexport async function deleteUser(user: User): Promise<void> {\n  return getModularInstance(user).delete();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AuthInternal } from '../model/auth';\nimport { MultiFactorSession } from '../model/public_types';\n\nexport const enum MultiFactorSessionType {\n  ENROLL = 'enroll',\n  SIGN_IN = 'signin'\n}\n\ninterface SerializedMultiFactorSession {\n  multiFactorSession: {\n    idToken?: string;\n    pendingCredential?: string;\n  };\n}\n\nexport class MultiFactorSessionImpl implements MultiFactorSession {\n  private constructor(\n    readonly type: MultiFactorSessionType,\n    readonly credential: string,\n    readonly auth?: AuthInternal\n  ) {}\n\n  static _fromIdtoken(\n    idToken: string,\n    auth?: AuthInternal\n  ): MultiFactorSessionImpl {\n    return new MultiFactorSessionImpl(\n      MultiFactorSessionType.ENROLL,\n      idToken,\n      auth\n    );\n  }\n\n  static _fromMfaPendingCredential(\n    mfaPendingCredential: string\n  ): MultiFactorSessionImpl {\n    return new MultiFactorSessionImpl(\n      MultiFactorSessionType.SIGN_IN,\n      mfaPendingCredential\n    );\n  }\n\n  toJSON(): SerializedMultiFactorSession {\n    const key =\n      this.type === MultiFactorSessionType.ENROLL\n        ? 'idToken'\n        : 'pendingCredential';\n    return {\n      multiFactorSession: {\n        [key]: this.credential\n      }\n    };\n  }\n\n  static fromJSON(\n    obj: Partial<SerializedMultiFactorSession>\n  ): MultiFactorSessionImpl | null {\n    if (obj?.multiFactorSession) {\n      if (obj.multiFactorSession?.pendingCredential) {\n        return MultiFactorSessionImpl._fromMfaPendingCredential(\n          obj.multiFactorSession.pendingCredential\n        );\n      } else if (obj.multiFactorSession?.idToken) {\n        return MultiFactorSessionImpl._fromIdtoken(\n          obj.multiFactorSession.idToken\n        );\n      }\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  MultiFactorResolver,\n  UserCredential,\n  MultiFactorError\n} from '../model/public_types';\n\nimport { _castAuth } from '../core/auth/auth_impl';\nimport { AuthErrorCode } from '../core/errors';\nimport { UserCredentialImpl } from '../core/user/user_credential_impl';\nimport { _assert, _fail } from '../core/util/assert';\nimport { UserCredentialInternal } from '../model/user';\nimport { MultiFactorAssertionImpl } from './mfa_assertion';\nimport { MultiFactorError as MultiFactorErrorInternal } from './mfa_error';\nimport { MultiFactorInfoImpl } from './mfa_info';\nimport { MultiFactorSessionImpl } from './mfa_session';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType } from '../model/enums';\n\nexport class MultiFactorResolverImpl implements MultiFactorResolver {\n  private constructor(\n    readonly session: MultiFactorSessionImpl,\n    readonly hints: MultiFactorInfoImpl[],\n    private readonly signInResolver: (\n      assertion: MultiFactorAssertionImpl\n    ) => Promise<UserCredentialInternal>\n  ) {}\n\n  /** @internal */\n  static _fromError(\n    authExtern: Auth,\n    error: MultiFactorErrorInternal\n  ): MultiFactorResolverImpl {\n    const auth = _castAuth(authExtern);\n    const serverResponse = error.customData._serverResponse;\n    const hints = (serverResponse.mfaInfo || []).map(enrollment =>\n      MultiFactorInfoImpl._fromServerResponse(auth, enrollment)\n    );\n\n    _assert(\n      serverResponse.mfaPendingCredential,\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    const session = MultiFactorSessionImpl._fromMfaPendingCredential(\n      serverResponse.mfaPendingCredential\n    );\n\n    return new MultiFactorResolverImpl(\n      session,\n      hints,\n      async (\n        assertion: MultiFactorAssertionImpl\n      ): Promise<UserCredentialInternal> => {\n        const mfaResponse = await assertion._process(auth, session);\n        // Clear out the unneeded fields from the old login response\n        delete serverResponse.mfaInfo;\n        delete serverResponse.mfaPendingCredential;\n\n        // Use in the new token & refresh token in the old response\n        const idTokenResponse = {\n          ...serverResponse,\n          idToken: mfaResponse.idToken,\n          refreshToken: mfaResponse.refreshToken\n        };\n\n        // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\n        switch (error.operationType) {\n          case OperationType.SIGN_IN:\n            const userCredential =\n              await UserCredentialImpl._fromIdTokenResponse(\n                auth,\n                error.operationType,\n                idTokenResponse\n              );\n            await auth._updateCurrentUser(userCredential.user);\n            return userCredential;\n          case OperationType.REAUTHENTICATE:\n            _assert(error.user, auth, AuthErrorCode.INTERNAL_ERROR);\n            return UserCredentialImpl._forOperation(\n              error.user,\n              error.operationType,\n              idTokenResponse\n            );\n          default:\n            _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n        }\n      }\n    );\n  }\n\n  async resolveSignIn(\n    assertionExtern: MultiFactorAssertionImpl\n  ): Promise<UserCredential> {\n    const assertion = assertionExtern as MultiFactorAssertionImpl;\n    return this.signInResolver(assertion);\n  }\n}\n\n/**\n * Provides a {@link MultiFactorResolver} suitable for completion of a\n * multi-factor flow.\n *\n * @param auth - The {@link Auth} instance.\n * @param error - The {@link MultiFactorError} raised during a sign-in, or\n * reauthentication operation.\n *\n * @public\n */\nexport function getMultiFactorResolver(\n  auth: Auth,\n  error: MultiFactorError\n): MultiFactorResolver {\n  const authModular = getModularInstance(auth);\n  const errorInternal = error as MultiFactorErrorInternal;\n  _assert(\n    error.customData.operationType,\n    authModular,\n    AuthErrorCode.ARGUMENT_ERROR\n  );\n  _assert(\n    errorInternal.customData._serverResponse?.mfaPendingCredential,\n    authModular,\n    AuthErrorCode.ARGUMENT_ERROR\n  );\n\n  return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { SignInWithPhoneNumberRequest } from '../authentication/sms';\nimport { FinalizeMfaResponse } from '../authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\n\n/**\n * MFA Info as returned by the API\n */\ninterface BaseMfaEnrollment {\n  mfaEnrollmentId: string;\n  enrolledAt: number;\n  displayName?: string;\n}\n\n/**\n * An MFA provided by SMS verification\n */\nexport interface PhoneMfaEnrollment extends BaseMfaEnrollment {\n  phoneInfo: string;\n}\n\n/**\n * MfaEnrollment can be any subtype of BaseMfaEnrollment, currently only PhoneMfaEnrollment is supported\n */\nexport type MfaEnrollment = PhoneMfaEnrollment;\n\nexport interface StartPhoneMfaEnrollmentRequest {\n  idToken: string;\n  phoneEnrollmentInfo: {\n    phoneNumber: string;\n    recaptchaToken: string;\n  };\n  tenantId?: string;\n}\n\nexport interface StartPhoneMfaEnrollmentResponse {\n  phoneSessionInfo: {\n    sessionInfo: string;\n  };\n}\n\nexport function startEnrollPhoneMfa(\n  auth: AuthInternal,\n  request: StartPhoneMfaEnrollmentRequest\n): Promise<StartPhoneMfaEnrollmentResponse> {\n  return _performApiRequest<\n    StartPhoneMfaEnrollmentRequest,\n    StartPhoneMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface FinalizePhoneMfaEnrollmentRequest {\n  idToken: string;\n  phoneVerificationInfo: SignInWithPhoneNumberRequest;\n  displayName?: string | null;\n  tenantId?: string;\n}\n\nexport interface FinalizePhoneMfaEnrollmentResponse\n  extends FinalizeMfaResponse {}\n\nexport function finalizeEnrollPhoneMfa(\n  auth: AuthInternal,\n  request: FinalizePhoneMfaEnrollmentRequest\n): Promise<FinalizePhoneMfaEnrollmentResponse> {\n  return _performApiRequest<\n    FinalizePhoneMfaEnrollmentRequest,\n    FinalizePhoneMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface WithdrawMfaRequest {\n  idToken: string;\n  mfaEnrollmentId: string;\n  tenantId?: string;\n}\n\nexport interface WithdrawMfaResponse extends FinalizeMfaResponse {}\n\nexport function withdrawMfa(\n  auth: AuthInternal,\n  request: WithdrawMfaRequest\n): Promise<WithdrawMfaResponse> {\n  return _performApiRequest<WithdrawMfaRequest, WithdrawMfaResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.WITHDRAW_MFA,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  MultiFactorAssertion,\n  MultiFactorInfo,\n  MultiFactorSession,\n  MultiFactorUser,\n  User\n} from '../model/public_types';\n\nimport { withdrawMfa } from '../api/account_management/mfa';\nimport { _logoutIfInvalidated } from '../core/user/invalidation';\nimport { UserInternal } from '../model/user';\nimport { MultiFactorAssertionImpl } from './mfa_assertion';\nimport { MultiFactorInfoImpl } from './mfa_info';\nimport { MultiFactorSessionImpl } from './mfa_session';\nimport { getModularInstance } from '@firebase/util';\n\nexport class MultiFactorUserImpl implements MultiFactorUser {\n  enrolledFactors: MultiFactorInfo[] = [];\n\n  private constructor(readonly user: UserInternal) {\n    user._onReload(userInfo => {\n      if (userInfo.mfaInfo) {\n        this.enrolledFactors = userInfo.mfaInfo.map(enrollment =>\n          MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment)\n        );\n      }\n    });\n  }\n\n  static _fromUser(user: UserInternal): MultiFactorUserImpl {\n    return new MultiFactorUserImpl(user);\n  }\n\n  async getSession(): Promise<MultiFactorSession> {\n    return MultiFactorSessionImpl._fromIdtoken(\n      await this.user.getIdToken(),\n      this.user.auth\n    );\n  }\n\n  async enroll(\n    assertionExtern: MultiFactorAssertion,\n    displayName?: string | null\n  ): Promise<void> {\n    const assertion = assertionExtern as MultiFactorAssertionImpl;\n    const session = (await this.getSession()) as MultiFactorSessionImpl;\n    const finalizeMfaResponse = await _logoutIfInvalidated(\n      this.user,\n      assertion._process(this.user.auth, session, displayName)\n    );\n    // New tokens will be issued after enrollment of the new second factors.\n    // They need to be updated on the user.\n    await this.user._updateTokensIfNecessary(finalizeMfaResponse);\n    // The user needs to be reloaded to get the new multi-factor information\n    // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n    // will be updated.\n    return this.user.reload();\n  }\n\n  async unenroll(infoOrUid: MultiFactorInfo | string): Promise<void> {\n    const mfaEnrollmentId =\n      typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n    const idToken = await this.user.getIdToken();\n    try {\n      const idTokenResponse = await _logoutIfInvalidated(\n        this.user,\n        withdrawMfa(this.user.auth, {\n          idToken,\n          mfaEnrollmentId\n        })\n      );\n      // Remove the second factor from the user's list.\n      this.enrolledFactors = this.enrolledFactors.filter(\n        ({ uid }) => uid !== mfaEnrollmentId\n      );\n      // Depending on whether the backend decided to revoke the user's session,\n      // the tokenResponse may be empty. If the tokens were not updated (and they\n      // are now invalid), reloading the user will discover this and invalidate\n      // the user's state accordingly.\n      await this.user._updateTokensIfNecessary(idTokenResponse);\n      await this.user.reload();\n    } catch (e) {\n      throw e;\n    }\n  }\n}\n\nconst multiFactorUserCache = new WeakMap<User, MultiFactorUser>();\n\n/**\n * The {@link MultiFactorUser} corresponding to the user.\n *\n * @remarks\n * This is used to access all multi-factor properties and operations related to the user.\n *\n * @param user - The user.\n *\n * @public\n */\nexport function multiFactor(user: User): MultiFactorUser {\n  const userModular = getModularInstance(user);\n  if (!multiFactorUserCache.has(userModular)) {\n    multiFactorUserCache.set(\n      userModular,\n      MultiFactorUserImpl._fromUser(userModular as UserInternal)\n    );\n  }\n  return multiFactorUserCache.get(userModular)!;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Unsubscribe } from '@firebase/util';\nimport { FirebaseAuthInternal } from '@firebase/auth-interop-types';\n\nimport { AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { _assert } from '../util/assert';\nimport { AuthErrorCode } from '../errors';\n\ninterface TokenListener {\n  (tok: string | null): unknown;\n}\n\nexport class AuthInterop implements FirebaseAuthInternal {\n  private readonly internalListeners: Map<TokenListener, Unsubscribe> =\n    new Map();\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  getUid(): string | null {\n    this.assertAuthConfigured();\n    return this.auth.currentUser?.uid || null;\n  }\n\n  async getToken(\n    forceRefresh?: boolean\n  ): Promise<{ accessToken: string } | null> {\n    this.assertAuthConfigured();\n    await this.auth._initializationPromise;\n    if (!this.auth.currentUser) {\n      return null;\n    }\n\n    const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\n    return { accessToken };\n  }\n\n  addAuthTokenListener(listener: TokenListener): void {\n    this.assertAuthConfigured();\n    if (this.internalListeners.has(listener)) {\n      return;\n    }\n\n    const unsubscribe = this.auth.onIdTokenChanged(user => {\n      listener(\n        (user as UserInternal | null)?.stsTokenManager.accessToken || null\n      );\n    });\n    this.internalListeners.set(listener, unsubscribe);\n    this.updateProactiveRefresh();\n  }\n\n  removeAuthTokenListener(listener: TokenListener): void {\n    this.assertAuthConfigured();\n    const unsubscribe = this.internalListeners.get(listener);\n    if (!unsubscribe) {\n      return;\n    }\n\n    this.internalListeners.delete(listener);\n    unsubscribe();\n    this.updateProactiveRefresh();\n  }\n\n  private assertAuthConfigured(): void {\n    _assert(\n      this.auth._initializationPromise,\n      AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH\n    );\n  }\n\n  private updateProactiveRefresh(): void {\n    if (this.internalListeners.size > 0) {\n      this.auth._startProactiveRefresh();\n    } else {\n      this.auth._stopProactiveRefresh();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\n\nimport { name, version } from '../../../package.json';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _getClientVersion, ClientPlatform } from '../util/version';\nimport { _castAuth, AuthImpl, DefaultConfig } from './auth_impl';\nimport { AuthInterop } from './firebase_internal';\nimport { ConfigInternal } from '../../model/auth';\nimport { Dependencies } from '../../model/public_types';\nimport { _initializeAuthInstance } from './initialize';\n\nexport const enum _ComponentName {\n  AUTH = 'auth',\n  AUTH_INTERNAL = 'auth-internal'\n}\n\nfunction getVersionForPlatform(\n  clientPlatform: ClientPlatform\n): string | undefined {\n  switch (clientPlatform) {\n    case ClientPlatform.NODE:\n      return 'node';\n    case ClientPlatform.REACT_NATIVE:\n      return 'rn';\n    case ClientPlatform.WORKER:\n      return 'webworker';\n    case ClientPlatform.CORDOVA:\n      return 'cordova';\n    default:\n      return undefined;\n  }\n}\n\n/** @internal */\nexport function registerAuth(clientPlatform: ClientPlatform): void {\n  _registerComponent(\n    new Component(\n      _ComponentName.AUTH,\n      (container, { options: deps }: { options?: Dependencies }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const heartbeatServiceProvider =\n          container.getProvider<'heartbeat'>('heartbeat');\n        const { apiKey, authDomain } = app.options;\n        return ((app, heartbeatServiceProvider) => {\n          _assert(\n            apiKey && !apiKey.includes(':'),\n            AuthErrorCode.INVALID_API_KEY,\n            { appName: app.name }\n          );\n          // Auth domain is optional if IdP sign in isn't being used\n          _assert(!authDomain?.includes(':'), AuthErrorCode.ARGUMENT_ERROR, {\n            appName: app.name\n          });\n          const config: ConfigInternal = {\n            apiKey,\n            authDomain,\n            clientPlatform,\n            apiHost: DefaultConfig.API_HOST,\n            tokenApiHost: DefaultConfig.TOKEN_API_HOST,\n            apiScheme: DefaultConfig.API_SCHEME,\n            sdkClientVersion: _getClientVersion(clientPlatform)\n          };\n\n          const authInstance = new AuthImpl(\n            app,\n            heartbeatServiceProvider,\n            config\n          );\n          _initializeAuthInstance(authInstance, deps);\n\n          return authInstance;\n        })(app, heartbeatServiceProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      /**\n       * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\n       * For why we do this, See go/firebase-next-auth-init\n       */\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Because all firebase products that depend on auth depend on auth-internal directly,\n       * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\n       */\n      .setInstanceCreatedCallback(\n        (container, _instanceIdentifier, _instance) => {\n          const authInternalProvider = container.getProvider(\n            _ComponentName.AUTH_INTERNAL\n          );\n          authInternalProvider.initialize();\n        }\n      )\n  );\n\n  _registerComponent(\n    new Component(\n      _ComponentName.AUTH_INTERNAL,\n      container => {\n        const auth = _castAuth(\n          container.getProvider(_ComponentName.AUTH).getImmediate()!\n        );\n        return (auth => new AuthInterop(auth))(auth);\n      },\n      ComponentType.PRIVATE\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version, getVersionForPlatform(clientPlatform));\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Persistence } from '../../model/public_types';\n\nexport const enum PersistenceType {\n  SESSION = 'SESSION',\n  LOCAL = 'LOCAL',\n  NONE = 'NONE'\n}\n\nexport type PersistedBlob = Record<string, unknown>;\n\nexport interface Instantiator<T> {\n  (blob: PersistedBlob): T;\n}\n\nexport type PersistenceValue = PersistedBlob | string;\n\nexport const STORAGE_AVAILABLE_KEY = '__sak';\n\nexport interface StorageEventListener {\n  (value: PersistenceValue | null): void;\n}\n\nexport interface PersistenceInternal extends Persistence {\n  type: PersistenceType;\n  _isAvailable(): Promise<boolean>;\n  _set(key: string, value: PersistenceValue): Promise<void>;\n  _get<T extends PersistenceValue>(key: string): Promise<T | null>;\n  _remove(key: string): Promise<void>;\n  _addListener(key: string, listener: StorageEventListener): void;\n  _removeListener(key: string, listener: StorageEventListener): void;\n  // Should this persistence allow migration up the chosen hierarchy?\n  _shouldAllowMigration?: boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An enum of factors that may be used for multifactor authentication.\n *\n * @public\n */\nexport const FactorId = {\n  /** Phone as second factor */\n  PHONE: 'phone'\n} as const;\n\n/**\n * Enumeration of supported providers.\n *\n * @public\n */\nexport const ProviderId = {\n  /** Facebook provider ID */\n  FACEBOOK: 'facebook.com',\n  /** GitHub provider ID */\n  GITHUB: 'github.com',\n  /** Google provider ID */\n  GOOGLE: 'google.com',\n  /** Password provider */\n  PASSWORD: 'password',\n  /** Phone provider */\n  PHONE: 'phone',\n  /** Twitter provider ID */\n  TWITTER: 'twitter.com'\n} as const;\n\n/**\n * Enumeration of supported sign-in methods.\n *\n * @public\n */\nexport const SignInMethod = {\n  /** Email link sign in method */\n  EMAIL_LINK: 'emailLink',\n  /** Email/password sign in method */\n  EMAIL_PASSWORD: 'password',\n  /** Facebook sign in method */\n  FACEBOOK: 'facebook.com',\n  /** GitHub sign in method */\n  GITHUB: 'github.com',\n  /** Google sign in method */\n  GOOGLE: 'google.com',\n  /** Phone sign in method */\n  PHONE: 'phone',\n  /** Twitter sign in method */\n  TWITTER: 'twitter.com'\n} as const;\n\n/**\n * Enumeration of supported operation types.\n *\n * @public\n */\nexport const OperationType = {\n  /** Operation involving linking an additional provider to an already signed-in user. */\n  LINK: 'link',\n  /** Operation involving using a provider to reauthenticate an already signed-in user. */\n  REAUTHENTICATE: 'reauthenticate',\n  /** Operation involving signing in a user. */\n  SIGN_IN: 'signIn'\n} as const;\n\n/**\n * An enumeration of the possible email action types.\n *\n * @public\n */\nexport const ActionCodeOperation = {\n  /** The email link sign-in action. */\n  EMAIL_SIGNIN: 'EMAIL_SIGNIN',\n  /** The password reset action. */\n  PASSWORD_RESET: 'PASSWORD_RESET',\n  /** The email revocation action. */\n  RECOVER_EMAIL: 'RECOVER_EMAIL',\n  /** The revert second factor addition email action. */\n  REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\n  /** The revert second factor addition email action. */\n  VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\n  /** The email verification action. */\n  VERIFY_EMAIL: 'VERIFY_EMAIL'\n} as const;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _performApiRequest,\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary\n} from '../index';\nimport { Auth } from '../../model/public_types';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { MfaEnrollment } from '../account_management/mfa';\nimport { SignInWithIdpResponse } from './idp';\nimport {\n  SignInWithPhoneNumberRequest,\n  SignInWithPhoneNumberResponse\n} from './sms';\n\nexport interface FinalizeMfaResponse {\n  idToken: string;\n  refreshToken: string;\n}\n\n/**\n * @internal\n */\nexport interface IdTokenMfaResponse extends IdTokenResponse {\n  mfaPendingCredential?: string;\n  mfaInfo?: MfaEnrollment[];\n}\n\nexport interface StartPhoneMfaSignInRequest {\n  mfaPendingCredential: string;\n  mfaEnrollmentId: string;\n  phoneSignInInfo: {\n    recaptchaToken: string;\n  };\n  tenantId?: string;\n}\n\nexport interface StartPhoneMfaSignInResponse {\n  phoneResponseInfo: {\n    sessionInfo: string;\n  };\n}\n\nexport function startSignInPhoneMfa(\n  auth: Auth,\n  request: StartPhoneMfaSignInRequest\n): Promise<StartPhoneMfaSignInResponse> {\n  return _performApiRequest<\n    StartPhoneMfaSignInRequest,\n    StartPhoneMfaSignInResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_SIGN_IN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface FinalizePhoneMfaSignInRequest {\n  mfaPendingCredential: string;\n  phoneVerificationInfo: SignInWithPhoneNumberRequest;\n  tenantId?: string;\n}\n\nexport interface FinalizePhoneMfaSignInResponse extends FinalizeMfaResponse {}\n\nexport function finalizeSignInPhoneMfa(\n  auth: Auth,\n  request: FinalizePhoneMfaSignInRequest\n): Promise<FinalizePhoneMfaSignInResponse> {\n  return _performApiRequest<\n    FinalizePhoneMfaSignInRequest,\n    FinalizePhoneMfaSignInResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_SIGN_IN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\n/**\n * @internal\n */\nexport type PhoneOrOauthTokenResponse =\n  | SignInWithPhoneNumberResponse\n  | SignInWithIdpResponse\n  | IdTokenResponse;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Endpoint, HttpMethod, _performApiRequest } from '../index';\nimport { Auth } from '../../model/public_types';\n\ninterface GetRecaptchaParamResponse {\n  recaptchaSiteKey?: string;\n}\n\nexport async function getRecaptchaParams(auth: Auth): Promise<string> {\n  return (\n    (\n      await _performApiRequest<void, GetRecaptchaParamResponse>(\n        auth,\n        HttpMethod.GET,\n        Endpoint.GET_RECAPTCHA_PARAM\n      )\n    ).recaptchaSiteKey || ''\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Recaptcha } from './recaptcha/recaptcha';\n\n/**\n * A specialized window type that melds the normal window type plus the\n * various bits we need. The three different blocks that are &'d together\n * cant be defined in the same block together.\n */\nexport type AuthWindow = {\n  // Standard window types\n  [T in keyof Window]: Window[T];\n} & {\n  // Any known / named properties we want to add\n  grecaptcha?: Recaptcha;\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  ___jsl?: Record<string, any>;\n  gapi?: typeof gapi;\n} & {\n  // A final catch-all for callbacks (which will have random names) that\n  // we will stick on the window.\n  [callback: string]: (...args: unknown[]) => void;\n};\n\n/**\n * Lazy accessor for window, since the compat layer won't tree shake this out,\n * we need to make sure not to mess with window unless we have to\n */\nexport function _window(): AuthWindow {\n  return window as unknown as AuthWindow;\n}\n\nexport function _setWindowLocation(url: string): void {\n  _window().location.href = url;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _window } from '../auth_window';\n\nexport function _isWorker(): boolean {\n  return (\n    typeof _window()['WorkerGlobalScope'] !== 'undefined' &&\n    typeof _window()['importScripts'] === 'function'\n  );\n}\n\nexport async function _getActiveServiceWorker(): Promise<ServiceWorker | null> {\n  if (!navigator?.serviceWorker) {\n    return null;\n  }\n  try {\n    const registration = await navigator.serviceWorker.ready;\n    return registration.active;\n  } catch {\n    return null;\n  }\n}\n\nexport function _getServiceWorkerController(): ServiceWorker | null {\n  return navigator?.serviceWorker?.controller || null;\n}\n\nexport function _getWorkerGlobalScope(): ServiceWorker | null {\n  return _isWorker() ? (self as unknown as ServiceWorker) : null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../core/errors';\nimport { _createError } from '../core/util/assert';\n\nfunction getScriptParentElement(): HTMLDocument | HTMLHeadElement {\n  return document.getElementsByTagName('head')?.[0] ?? document;\n}\n\nexport function _loadJS(url: string): Promise<Event> {\n  // TODO: consider adding timeout support & cancellation\n  return new Promise((resolve, reject) => {\n    const el = document.createElement('script');\n    el.setAttribute('src', url);\n    el.onload = resolve;\n    el.onerror = e => {\n      const error = _createError(AuthErrorCode.INTERNAL_ERROR);\n      error.customData = e as unknown as Record<string, unknown>;\n      reject(error);\n    };\n    el.type = 'text/javascript';\n    el.charset = 'UTF-8';\n    getScriptParentElement().appendChild(el);\n  });\n}\n\nexport function _generateCallbackName(prefix: string): string {\n  return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\nimport { AuthInternal } from '../../model/auth';\nimport { RecaptchaParameters } from '../../model/public_types';\nimport { Recaptcha } from './recaptcha';\n\nexport const _SOLVE_TIME_MS = 500;\nexport const _EXPIRATION_TIME_MS = 60_000;\nexport const _WIDGET_ID_START = 1_000_000_000_000;\n\nexport interface Widget {\n  getResponse: () => string | null;\n  delete: () => void;\n  execute: () => void;\n}\n\nexport class MockReCaptcha implements Recaptcha {\n  private counter = _WIDGET_ID_START;\n  _widgets = new Map<number, Widget>();\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  render(\n    container: string | HTMLElement,\n    parameters?: RecaptchaParameters\n  ): number {\n    const id = this.counter;\n    this._widgets.set(\n      id,\n      new MockWidget(container, this.auth.name, parameters || {})\n    );\n    this.counter++;\n    return id;\n  }\n\n  reset(optWidgetId?: number): void {\n    const id = optWidgetId || _WIDGET_ID_START;\n    void this._widgets.get(id)?.delete();\n    this._widgets.delete(id);\n  }\n\n  getResponse(optWidgetId?: number): string {\n    const id = optWidgetId || _WIDGET_ID_START;\n    return this._widgets.get(id)?.getResponse() || '';\n  }\n\n  async execute(optWidgetId?: number | string): Promise<string> {\n    const id: number = (optWidgetId as number) || _WIDGET_ID_START;\n    void this._widgets.get(id)?.execute();\n    return '';\n  }\n}\n\nexport class MockWidget {\n  private readonly container: HTMLElement;\n  private readonly isVisible: boolean;\n  private timerId: number | null = null;\n  private deleted = false;\n  private responseToken: string | null = null;\n  private readonly clickHandler = (): void => {\n    this.execute();\n  };\n\n  constructor(\n    containerOrId: string | HTMLElement,\n    appName: string,\n    private readonly params: RecaptchaParameters\n  ) {\n    const container =\n      typeof containerOrId === 'string'\n        ? document.getElementById(containerOrId)\n        : containerOrId;\n    _assert(container, AuthErrorCode.ARGUMENT_ERROR, { appName });\n\n    this.container = container;\n    this.isVisible = this.params.size !== 'invisible';\n    if (this.isVisible) {\n      this.execute();\n    } else {\n      this.container.addEventListener('click', this.clickHandler);\n    }\n  }\n\n  getResponse(): string | null {\n    this.checkIfDeleted();\n    return this.responseToken;\n  }\n\n  delete(): void {\n    this.checkIfDeleted();\n    this.deleted = true;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n      this.timerId = null;\n    }\n    this.container.removeEventListener('click', this.clickHandler);\n  }\n\n  execute(): void {\n    this.checkIfDeleted();\n    if (this.timerId) {\n      return;\n    }\n\n    this.timerId = window.setTimeout(() => {\n      this.responseToken = generateRandomAlphaNumericString(50);\n      const { callback, 'expired-callback': expiredCallback } = this.params;\n      if (callback) {\n        try {\n          callback(this.responseToken);\n        } catch (e) {}\n      }\n\n      this.timerId = window.setTimeout(() => {\n        this.timerId = null;\n        this.responseToken = null;\n        if (expiredCallback) {\n          try {\n            expiredCallback();\n          } catch (e) {}\n        }\n\n        if (this.isVisible) {\n          this.execute();\n        }\n      }, _EXPIRATION_TIME_MS);\n    }, _SOLVE_TIME_MS);\n  }\n\n  private checkIfDeleted(): void {\n    if (this.deleted) {\n      throw new Error('reCAPTCHA mock was already deleted!');\n    }\n  }\n}\n\nfunction generateRandomAlphaNumericString(len: number): string {\n  const chars = [];\n  const allowedChars =\n    '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  for (let i = 0; i < len; i++) {\n    chars.push(\n      allowedChars.charAt(Math.floor(Math.random() * allowedChars.length))\n    );\n  }\n  return chars.join('');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystring } from '@firebase/util';\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert, _createError } from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport * as jsHelpers from '../load_js';\nimport { Recaptcha } from './recaptcha';\nimport { MockReCaptcha } from './recaptcha_mock';\n\n// ReCaptcha will load using the same callback, so the callback function needs\n// to be kept around\nexport const _JSLOAD_CALLBACK = jsHelpers._generateCallbackName('rcb');\nconst NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\nconst RECAPTCHA_BASE = 'https://www.google.com/recaptcha/api.js?';\n\n/**\n * We need to mark this interface as internal explicitly to exclude it in the public typings, because\n * it references AuthInternal which has a circular dependency with UserInternal.\n *\n * @internal\n */\nexport interface ReCaptchaLoader {\n  load(auth: AuthInternal, hl?: string): Promise<Recaptcha>;\n  clearedOneInstance(): void;\n}\n\n/**\n * Loader for the GReCaptcha library. There should only ever be one of this.\n */\nexport class ReCaptchaLoaderImpl implements ReCaptchaLoader {\n  private hostLanguage = '';\n  private counter = 0;\n  /**\n   * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\n   * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\n   * `window.grecaptcha.render()` will not. Another load will add it.\n   */\n  private readonly librarySeparatelyLoaded = !!_window().grecaptcha?.render;\n\n  load(auth: AuthInternal, hl = ''): Promise<Recaptcha> {\n    _assert(isHostLanguageValid(hl), auth, AuthErrorCode.ARGUMENT_ERROR);\n\n    if (this.shouldResolveImmediately(hl)) {\n      return Promise.resolve(_window().grecaptcha!);\n    }\n    return new Promise<Recaptcha>((resolve, reject) => {\n      const networkTimeout = _window().setTimeout(() => {\n        reject(_createError(auth, AuthErrorCode.NETWORK_REQUEST_FAILED));\n      }, NETWORK_TIMEOUT_DELAY.get());\n\n      _window()[_JSLOAD_CALLBACK] = () => {\n        _window().clearTimeout(networkTimeout);\n        delete _window()[_JSLOAD_CALLBACK];\n\n        const recaptcha = _window().grecaptcha;\n\n        if (!recaptcha) {\n          reject(_createError(auth, AuthErrorCode.INTERNAL_ERROR));\n          return;\n        }\n\n        // Wrap the greptcha render function so that we know if the developer has\n        // called it separately\n        const render = recaptcha.render;\n        recaptcha.render = (container, params) => {\n          const widgetId = render(container, params);\n          this.counter++;\n          return widgetId;\n        };\n\n        this.hostLanguage = hl;\n        resolve(recaptcha);\n      };\n\n      const url = `${RECAPTCHA_BASE}?${querystring({\n        onload: _JSLOAD_CALLBACK,\n        render: 'explicit',\n        hl\n      })}`;\n\n      jsHelpers._loadJS(url).catch(() => {\n        clearTimeout(networkTimeout);\n        reject(_createError(auth, AuthErrorCode.INTERNAL_ERROR));\n      });\n    });\n  }\n\n  clearedOneInstance(): void {\n    this.counter--;\n  }\n\n  private shouldResolveImmediately(hl: string): boolean {\n    // We can resolve immediately if:\n    //   • grecaptcha is already defined AND (\n    //     1. the requested language codes are the same OR\n    //     2. there exists already a ReCaptcha on the page\n    //     3. the library was already loaded by the app\n    // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\n    // that are already in the page\n    return (\n      !!_window().grecaptcha?.render &&\n      (hl === this.hostLanguage ||\n        this.counter > 0 ||\n        this.librarySeparatelyLoaded)\n    );\n  }\n}\n\nfunction isHostLanguageValid(hl: string): boolean {\n  return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n}\n\nexport class MockReCaptchaLoaderImpl implements ReCaptchaLoader {\n  async load(auth: AuthInternal): Promise<Recaptcha> {\n    return new MockReCaptcha(auth);\n  }\n\n  clearedOneInstance(): void {}\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth, RecaptchaParameters } from '../../model/public_types';\nimport { getRecaptchaParams } from '../../api/authentication/recaptcha';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\nimport { _isHttpOrHttps } from '../../core/util/location';\nimport { ApplicationVerifierInternal } from '../../model/application_verifier';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport { _isWorker } from '../util/worker';\nimport { Recaptcha } from './recaptcha';\nimport {\n  MockReCaptchaLoaderImpl,\n  ReCaptchaLoader,\n  ReCaptchaLoaderImpl\n} from './recaptcha_loader';\n\nexport const RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\n\nconst DEFAULT_PARAMS: RecaptchaParameters = {\n  theme: 'light',\n  type: 'image'\n};\n\ntype TokenCallback = (token: string) => void;\n\n/**\n * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\n *\n * @public\n */\nexport class RecaptchaVerifier implements ApplicationVerifierInternal {\n  /**\n   * The application verifier type.\n   *\n   * @remarks\n   * For a reCAPTCHA verifier, this is 'recaptcha'.\n   */\n  readonly type = RECAPTCHA_VERIFIER_TYPE;\n  private destroyed = false;\n  private widgetId: number | null = null;\n  private readonly container: HTMLElement;\n  private readonly isInvisible: boolean;\n  private readonly tokenChangeListeners = new Set<TokenCallback>();\n  private renderPromise: Promise<number> | null = null;\n  private readonly auth: AuthInternal;\n\n  /** @internal */\n  readonly _recaptchaLoader: ReCaptchaLoader;\n  private recaptcha: Recaptcha | null = null;\n\n  /**\n   *\n   * @param containerOrId - The reCAPTCHA container parameter.\n   *\n   * @remarks\n   * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\n   * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\n   * an element ID. The corresponding element must also must be in the DOM at the time of\n   * initialization.\n   *\n   * @param parameters - The optional reCAPTCHA parameters.\n   *\n   * @remarks\n   * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\n   * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\n   * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\n   * 'invisible'.\n   *\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   */\n  constructor(\n    containerOrId: HTMLElement | string,\n    private readonly parameters: RecaptchaParameters = {\n      ...DEFAULT_PARAMS\n    },\n    authExtern: Auth\n  ) {\n    this.auth = _castAuth(authExtern);\n    this.isInvisible = this.parameters.size === 'invisible';\n    _assert(\n      typeof document !== 'undefined',\n      this.auth,\n      AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    const container =\n      typeof containerOrId === 'string'\n        ? document.getElementById(containerOrId)\n        : containerOrId;\n    _assert(container, this.auth, AuthErrorCode.ARGUMENT_ERROR);\n\n    this.container = container;\n    this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n\n    this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting\n      ? new MockReCaptchaLoaderImpl()\n      : new ReCaptchaLoaderImpl();\n\n    this.validateStartingState();\n    // TODO: Figure out if sdk version is needed\n  }\n\n  /**\n   * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\n   *\n   * @returns A Promise for the reCAPTCHA token.\n   */\n  async verify(): Promise<string> {\n    this.assertNotDestroyed();\n    const id = await this.render();\n    const recaptcha = this.getAssertedRecaptcha();\n\n    const response = recaptcha.getResponse(id);\n    if (response) {\n      return response;\n    }\n\n    return new Promise<string>(resolve => {\n      const tokenChange = (token: string): void => {\n        if (!token) {\n          return; // Ignore token expirations.\n        }\n        this.tokenChangeListeners.delete(tokenChange);\n        resolve(token);\n      };\n\n      this.tokenChangeListeners.add(tokenChange);\n      if (this.isInvisible) {\n        recaptcha.execute(id);\n      }\n    });\n  }\n\n  /**\n   * Renders the reCAPTCHA widget on the page.\n   *\n   * @returns A Promise that resolves with the reCAPTCHA widget ID.\n   */\n  render(): Promise<number> {\n    try {\n      this.assertNotDestroyed();\n    } catch (e) {\n      // This method returns a promise. Since it's not async (we want to return the\n      // _same_ promise if rendering is still occurring), the API surface should\n      // reject with the error rather than just throw\n      return Promise.reject(e);\n    }\n\n    if (this.renderPromise) {\n      return this.renderPromise;\n    }\n\n    this.renderPromise = this.makeRenderPromise().catch(e => {\n      this.renderPromise = null;\n      throw e;\n    });\n\n    return this.renderPromise;\n  }\n\n  /** @internal */\n  _reset(): void {\n    this.assertNotDestroyed();\n    if (this.widgetId !== null) {\n      this.getAssertedRecaptcha().reset(this.widgetId);\n    }\n  }\n\n  /**\n   * Clears the reCAPTCHA widget from the page and destroys the instance.\n   */\n  clear(): void {\n    this.assertNotDestroyed();\n    this.destroyed = true;\n    this._recaptchaLoader.clearedOneInstance();\n    if (!this.isInvisible) {\n      this.container.childNodes.forEach(node => {\n        this.container.removeChild(node);\n      });\n    }\n  }\n\n  private validateStartingState(): void {\n    _assert(!this.parameters.sitekey, this.auth, AuthErrorCode.ARGUMENT_ERROR);\n    _assert(\n      this.isInvisible || !this.container.hasChildNodes(),\n      this.auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    _assert(\n      typeof document !== 'undefined',\n      this.auth,\n      AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n  }\n\n  private makeTokenCallback(\n    existing: TokenCallback | string | undefined\n  ): TokenCallback {\n    return token => {\n      this.tokenChangeListeners.forEach(listener => listener(token));\n      if (typeof existing === 'function') {\n        existing(token);\n      } else if (typeof existing === 'string') {\n        const globalFunc = _window()[existing];\n        if (typeof globalFunc === 'function') {\n          globalFunc(token);\n        }\n      }\n    };\n  }\n\n  private assertNotDestroyed(): void {\n    _assert(!this.destroyed, this.auth, AuthErrorCode.INTERNAL_ERROR);\n  }\n\n  private async makeRenderPromise(): Promise<number> {\n    await this.init();\n    if (!this.widgetId) {\n      let container = this.container;\n      if (!this.isInvisible) {\n        const guaranteedEmpty = document.createElement('div');\n        container.appendChild(guaranteedEmpty);\n        container = guaranteedEmpty;\n      }\n\n      this.widgetId = this.getAssertedRecaptcha().render(\n        container,\n        this.parameters\n      );\n    }\n\n    return this.widgetId;\n  }\n\n  private async init(): Promise<void> {\n    _assert(\n      _isHttpOrHttps() && !_isWorker(),\n      this.auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n\n    await domReady();\n    this.recaptcha = await this._recaptchaLoader.load(\n      this.auth,\n      this.auth.languageCode || undefined\n    );\n\n    const siteKey = await getRecaptchaParams(this.auth);\n    _assert(siteKey, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.parameters.sitekey = siteKey;\n  }\n\n  private getAssertedRecaptcha(): Recaptcha {\n    _assert(this.recaptcha, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    return this.recaptcha;\n  }\n}\n\nfunction domReady(): Promise<void> {\n  let resolver: (() => void) | null = null;\n  return new Promise<void>(resolve => {\n    if (document.readyState === 'complete') {\n      resolve();\n      return;\n    }\n\n    // Document not ready, wait for load before resolving.\n    // Save resolver, so we can remove listener in case it was externally\n    // cancelled.\n    resolver = () => resolve();\n    window.addEventListener('load', resolver);\n  }).catch(e => {\n    if (resolver) {\n      window.removeEventListener('load', resolver);\n    }\n\n    throw e;\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ApplicationVerifier,\n  Auth,\n  ConfirmationResult,\n  PhoneInfoOptions,\n  User,\n  UserCredential\n} from '../../model/public_types';\n\nimport { startEnrollPhoneMfa } from '../../api/account_management/mfa';\nimport { startSignInPhoneMfa } from '../../api/authentication/mfa';\nimport { sendPhoneVerificationCode } from '../../api/authentication/sms';\nimport { ApplicationVerifierInternal } from '../../model/application_verifier';\nimport { PhoneAuthCredential } from '../../core/credentials/phone';\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assertLinkedStatus, _link } from '../../core/user/link_unlink';\nimport { _assert } from '../../core/util/assert';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  linkWithCredential,\n  reauthenticateWithCredential,\n  signInWithCredential\n} from '../../core/strategies/credential';\nimport {\n  MultiFactorSessionImpl,\n  MultiFactorSessionType\n} from '../../mfa/mfa_session';\nimport { UserInternal } from '../../model/user';\nimport { RECAPTCHA_VERIFIER_TYPE } from '../recaptcha/recaptcha_verifier';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { ProviderId } from '../../model/enums';\n\ninterface OnConfirmationCallback {\n  (credential: PhoneAuthCredential): Promise<UserCredential>;\n}\n\nclass ConfirmationResultImpl implements ConfirmationResult {\n  constructor(\n    readonly verificationId: string,\n    private readonly onConfirmation: OnConfirmationCallback\n  ) {}\n\n  confirm(verificationCode: string): Promise<UserCredential> {\n    const authCredential = PhoneAuthCredential._fromVerification(\n      this.verificationId,\n      verificationCode\n    );\n    return this.onConfirmation(authCredential);\n  }\n}\n\n/**\n * Asynchronously signs in using a phone number.\n *\n * @remarks\n * This method sends a code via SMS to the given\n * phone number, and returns a {@link ConfirmationResult}. After the user\n * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\n * with the code to sign the user in.\n *\n * For abuse prevention, this method also requires a {@link ApplicationVerifier}.\n * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.\n * This function can work on other platforms that do not support the\n * {@link RecaptchaVerifier} (like React Native), but you need to use a\n * third-party {@link ApplicationVerifier} implementation.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n * // Obtain a verificationCode from the user.\n * const credential = await confirmationResult.confirm(verificationCode);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nexport async function signInWithPhoneNumber(\n  auth: Auth,\n  phoneNumber: string,\n  appVerifier: ApplicationVerifier\n): Promise<ConfirmationResult> {\n  const authInternal = _castAuth(auth);\n  const verificationId = await _verifyPhoneNumber(\n    authInternal,\n    phoneNumber,\n    getModularInstance(appVerifier as ApplicationVerifierInternal)\n  );\n  return new ConfirmationResultImpl(verificationId, cred =>\n    signInWithCredential(authInternal, cred)\n  );\n}\n\n/**\n * Links the user account with the given phone number.\n *\n * @param user - The user.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nexport async function linkWithPhoneNumber(\n  user: User,\n  phoneNumber: string,\n  appVerifier: ApplicationVerifier\n): Promise<ConfirmationResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  await _assertLinkedStatus(false, userInternal, ProviderId.PHONE);\n  const verificationId = await _verifyPhoneNumber(\n    userInternal.auth,\n    phoneNumber,\n    getModularInstance(appVerifier as ApplicationVerifierInternal)\n  );\n  return new ConfirmationResultImpl(verificationId, cred =>\n    linkWithCredential(userInternal, cred)\n  );\n}\n\n/**\n * Re-authenticates a user using a fresh phone credential.\n *\n * @remarks Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\n *\n * @param user - The user.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nexport async function reauthenticateWithPhoneNumber(\n  user: User,\n  phoneNumber: string,\n  appVerifier: ApplicationVerifier\n): Promise<ConfirmationResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const verificationId = await _verifyPhoneNumber(\n    userInternal.auth,\n    phoneNumber,\n    getModularInstance(appVerifier as ApplicationVerifierInternal)\n  );\n  return new ConfirmationResultImpl(verificationId, cred =>\n    reauthenticateWithCredential(userInternal, cred)\n  );\n}\n\n/**\n * Returns a verification ID to be used in conjunction with the SMS code that is sent.\n *\n */\nexport async function _verifyPhoneNumber(\n  auth: AuthInternal,\n  options: PhoneInfoOptions | string,\n  verifier: ApplicationVerifierInternal\n): Promise<string> {\n  const recaptchaToken = await verifier.verify();\n\n  try {\n    _assert(\n      typeof recaptchaToken === 'string',\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    _assert(\n      verifier.type === RECAPTCHA_VERIFIER_TYPE,\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n\n    let phoneInfoOptions: PhoneInfoOptions;\n\n    if (typeof options === 'string') {\n      phoneInfoOptions = {\n        phoneNumber: options\n      };\n    } else {\n      phoneInfoOptions = options;\n    }\n\n    if ('session' in phoneInfoOptions) {\n      const session = phoneInfoOptions.session as MultiFactorSessionImpl;\n\n      if ('phoneNumber' in phoneInfoOptions) {\n        _assert(\n          session.type === MultiFactorSessionType.ENROLL,\n          auth,\n          AuthErrorCode.INTERNAL_ERROR\n        );\n        const response = await startEnrollPhoneMfa(auth, {\n          idToken: session.credential,\n          phoneEnrollmentInfo: {\n            phoneNumber: phoneInfoOptions.phoneNumber,\n            recaptchaToken\n          }\n        });\n        return response.phoneSessionInfo.sessionInfo;\n      } else {\n        _assert(\n          session.type === MultiFactorSessionType.SIGN_IN,\n          auth,\n          AuthErrorCode.INTERNAL_ERROR\n        );\n        const mfaEnrollmentId =\n          phoneInfoOptions.multiFactorHint?.uid ||\n          phoneInfoOptions.multiFactorUid;\n        _assert(mfaEnrollmentId, auth, AuthErrorCode.MISSING_MFA_INFO);\n        const response = await startSignInPhoneMfa(auth, {\n          mfaPendingCredential: session.credential,\n          mfaEnrollmentId,\n          phoneSignInInfo: {\n            recaptchaToken\n          }\n        });\n        return response.phoneResponseInfo.sessionInfo;\n      }\n    } else {\n      const { sessionInfo } = await sendPhoneVerificationCode(auth, {\n        phoneNumber: phoneInfoOptions.phoneNumber,\n        recaptchaToken\n      });\n      return sessionInfo;\n    }\n  } finally {\n    verifier._reset();\n  }\n}\n\n/**\n * Updates the user's phone number.\n *\n * @example\n * ```\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * await updatePhoneNumber(user, phoneCredential);\n * ```\n *\n * @param user - The user.\n * @param credential - A credential authenticating the new phone number.\n *\n * @public\n */\nexport async function updatePhoneNumber(\n  user: User,\n  credential: PhoneAuthCredential\n): Promise<void> {\n  await _link(getModularInstance(user) as UserInternal, credential);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  PhoneInfoOptions,\n  ApplicationVerifier,\n  UserCredential\n} from '../../model/public_types';\n\nimport { SignInWithPhoneNumberResponse } from '../../api/authentication/sms';\nimport { ApplicationVerifierInternal as ApplicationVerifierInternal } from '../../model/application_verifier';\nimport { AuthInternal as AuthInternal } from '../../model/auth';\nimport { UserCredentialInternal as UserCredentialInternal } from '../../model/user';\nimport { PhoneAuthCredential } from '../../core/credentials/phone';\nimport { _verifyPhoneNumber } from '../strategies/phone';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { AuthCredential } from '../../core';\nimport { FirebaseError, getModularInstance } from '@firebase/util';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link PhoneAuthCredential}.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * const userCredential = await signInWithCredential(auth, phoneCredential);\n * ```\n *\n * @public\n */\nexport class PhoneAuthProvider {\n  /** Always set to {@link ProviderId}.PHONE. */\n  static readonly PROVIDER_ID: 'phone' = ProviderId.PHONE;\n  /** Always set to {@link SignInMethod}.PHONE. */\n  static readonly PHONE_SIGN_IN_METHOD: 'phone' = SignInMethod.PHONE;\n\n  /** Always set to {@link ProviderId}.PHONE. */\n  readonly providerId = PhoneAuthProvider.PROVIDER_ID;\n  private readonly auth: AuthInternal;\n\n  /**\n   * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\n   *\n   */\n  constructor(auth: Auth) {\n    this.auth = _castAuth(auth);\n  }\n\n  /**\n   *\n   * Starts a phone number authentication flow by sending a verification code to the given phone\n   * number.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\n   * E.164 format (e.g. +16505550101).\n   * @param applicationVerifier - For abuse prevention, this method also requires a\n   * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,\n   * {@link RecaptchaVerifier}.\n   *\n   * @returns A Promise for a verification ID that can be passed to\n   * {@link PhoneAuthProvider.credential} to identify this flow..\n   */\n  verifyPhoneNumber(\n    phoneOptions: PhoneInfoOptions | string,\n    applicationVerifier: ApplicationVerifier\n  ): Promise<string> {\n    return _verifyPhoneNumber(\n      this.auth,\n      phoneOptions,\n      getModularInstance(applicationVerifier as ApplicationVerifierInternal)\n    );\n  }\n\n  /**\n   * Creates a phone auth credential, given the verification ID from\n   * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\n   * mobile device.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = await confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\n   * @param verificationCode - The verification code sent to the user's mobile device.\n   *\n   * @returns The auth provider credential.\n   */\n  static credential(\n    verificationId: string,\n    verificationCode: string\n  ): PhoneAuthCredential {\n    return PhoneAuthCredential._fromVerification(\n      verificationId,\n      verificationCode\n    );\n  }\n\n  /**\n   * Generates an {@link AuthCredential} from a {@link UserCredential}.\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): AuthCredential | null {\n    const credential = userCredential as UserCredentialInternal;\n    return PhoneAuthProvider.credentialFromTaggedObject(credential);\n  }\n\n  /**\n   * Returns an {@link AuthCredential} when passed an error.\n   *\n   * @remarks\n   *\n   * This method works for errors like\n   * `auth/account-exists-with-different-credentials`. This is useful for\n   * recovering when attempting to set a user's phone number but the number\n   * in question is already tied to another account. For example, the following\n   * code tries to update the current user's phone number, and if that\n   * fails, links the user with the account associated with that number:\n   *\n   * ```js\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(number, verifier);\n   * try {\n   *   const code = ''; // Prompt the user for the verification code\n   *   await updatePhoneNumber(\n   *       auth.currentUser,\n   *       PhoneAuthProvider.credential(verificationId, code));\n   * } catch (e) {\n   *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n   *     const cred = PhoneAuthProvider.credentialFromError(e);\n   *     await linkWithCredential(auth.currentUser, cred);\n   *   }\n   * }\n   *\n   * // At this point, auth.currentUser.phoneNumber === number.\n   * ```\n   *\n   * @param error - The error to generate a credential from.\n   */\n  static credentialFromError(error: FirebaseError): AuthCredential | null {\n    return PhoneAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): AuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { phoneNumber, temporaryProof } =\n      tokenResponse as SignInWithPhoneNumberResponse;\n    if (phoneNumber && temporaryProof) {\n      return PhoneAuthCredential._fromTokenResponse(\n        phoneNumber,\n        temporaryProof\n      );\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FactorId, MultiFactorAssertion } from '../model/public_types';\nimport { debugFail } from '../core/util/assert';\nimport { MultiFactorSessionImpl, MultiFactorSessionType } from './mfa_session';\nimport { FinalizeMfaResponse } from '../api/authentication/mfa';\nimport { AuthInternal } from '../model/auth';\n\nexport abstract class MultiFactorAssertionImpl implements MultiFactorAssertion {\n  protected constructor(readonly factorId: FactorId) {}\n\n  _process(\n    auth: AuthInternal,\n    session: MultiFactorSessionImpl,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse> {\n    switch (session.type) {\n      case MultiFactorSessionType.ENROLL:\n        return this._finalizeEnroll(auth, session.credential, displayName);\n      case MultiFactorSessionType.SIGN_IN:\n        return this._finalizeSignIn(auth, session.credential);\n      default:\n        return debugFail('unexpected MultiFactorSessionType');\n    }\n  }\n\n  abstract _finalizeEnroll(\n    auth: AuthInternal,\n    idToken: string,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse>;\n  abstract _finalizeSignIn(\n    auth: AuthInternal,\n    mfaPendingCredential: string\n  ): Promise<FinalizeMfaResponse>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  FactorId,\n  PhoneMultiFactorAssertion\n} from '../../../model/public_types';\n\nimport { MultiFactorAssertionImpl } from '../../../mfa/mfa_assertion';\nimport { AuthInternal } from '../../../model/auth';\nimport { finalizeEnrollPhoneMfa } from '../../../api/account_management/mfa';\nimport { PhoneAuthCredential } from '../../../core/credentials/phone';\nimport {\n  finalizeSignInPhoneMfa,\n  FinalizeMfaResponse\n} from '../../../api/authentication/mfa';\n\n/**\n * {@inheritdoc PhoneMultiFactorAssertion}\n *\n * @public\n */\nexport class PhoneMultiFactorAssertionImpl\n  extends MultiFactorAssertionImpl\n  implements PhoneMultiFactorAssertion\n{\n  private constructor(private readonly credential: PhoneAuthCredential) {\n    super(FactorId.PHONE);\n  }\n\n  /** @internal */\n  static _fromCredential(\n    credential: PhoneAuthCredential\n  ): PhoneMultiFactorAssertionImpl {\n    return new PhoneMultiFactorAssertionImpl(credential);\n  }\n\n  /** @internal */\n  _finalizeEnroll(\n    auth: AuthInternal,\n    idToken: string,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse> {\n    return finalizeEnrollPhoneMfa(auth, {\n      idToken,\n      displayName,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n\n  /** @internal */\n  _finalizeSignIn(\n    auth: AuthInternal,\n    mfaPendingCredential: string\n  ): Promise<FinalizeMfaResponse> {\n    return finalizeSignInPhoneMfa(auth, {\n      mfaPendingCredential,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n}\n\n/**\n * Provider for generating a {@link PhoneMultiFactorAssertion}.\n *\n * @public\n */\nexport class PhoneMultiFactorGenerator {\n  private constructor() {}\n\n  /**\n   * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\n   *\n   * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\n   * @returns A {@link PhoneMultiFactorAssertion} which can be used with\n   * {@link MultiFactorResolver.resolveSignIn}\n   */\n  static assertion(credential: PhoneAuthCredential): PhoneMultiFactorAssertion {\n    return PhoneMultiFactorAssertionImpl._fromCredential(credential);\n  }\n\n  /**\n   * The identifier of the phone second factor: `phone`.\n   */\n  static FACTOR_ID = 'phone';\n}\n"]},"metadata":{},"sourceType":"script"}