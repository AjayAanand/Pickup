{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar ReactNative = require('react-native');\nvar app = require('@firebase/app');\nvar phone = require('./phone-e7bf48a1.js');\nvar tslib = require('tslib');\nrequire('@firebase/util');\nrequire('@firebase/component');\nrequire('@firebase/logger');\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function get() {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\nvar ReactNative__namespace = /*#__PURE__*/_interopNamespace(ReactNative);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a persistence object that wraps `AsyncStorage` imported from\r\n * `react-native` or `@react-native-community/async-storage`, and can\r\n * be used in the persistence dependency field in {@link initializeAuth}.\r\n *\r\n * @public\r\n */\nfunction getReactNativePersistence(storage) {\n  var _a;\n  // In the _getInstance() implementation (see src/core/persistence/index.ts),\n  // we expect each \"externs.Persistence\" object passed to us by the user to\n  // be able to be instantiated (as a class) using \"new\". That function also\n  // expects the constructor to be empty. Since ReactNativeStorage requires the\n  // underlying storage layer, we need to be able to create subclasses\n  // (closures, esentially) that have the storage layer but empty constructor.\n  return _a = /** @class */function () {\n    function class_1() {\n      this.type = \"LOCAL\" /* PersistenceType.LOCAL */;\n    }\n\n    class_1.prototype._isAvailable = function () {\n      return tslib.__awaiter(this, void 0, void 0, function () {\n        return tslib.__generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              _b.trys.push([0, 3,, 4]);\n              if (!storage) {\n                return [2 /*return*/, false];\n              }\n              return [4 /*yield*/, storage.setItem(phone.STORAGE_AVAILABLE_KEY, '1')];\n            case 1:\n              _b.sent();\n              return [4 /*yield*/, storage.removeItem(phone.STORAGE_AVAILABLE_KEY)];\n            case 2:\n              _b.sent();\n              return [2 /*return*/, true];\n            case 3:\n              _b.sent();\n              return [2 /*return*/, false];\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    class_1.prototype._set = function (key, value) {\n      return storage.setItem(key, JSON.stringify(value));\n    };\n    class_1.prototype._get = function (key) {\n      return tslib.__awaiter(this, void 0, void 0, function () {\n        var json;\n        return tslib.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, storage.getItem(key)];\n            case 1:\n              json = _a.sent();\n              return [2 /*return*/, json ? JSON.parse(json) : null];\n          }\n        });\n      });\n    };\n    class_1.prototype._remove = function (key) {\n      return storage.removeItem(key);\n    };\n    class_1.prototype._addListener = function (_key, _listener) {\n      // Listeners are not supported for React Native storage.\n      return;\n    };\n    class_1.prototype._removeListener = function (_key, _listener) {\n      // Listeners are not supported for React Native storage.\n      return;\n    };\n    return class_1;\n  }(), _a.type = 'LOCAL', _a;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An implementation of {@link Persistence} of type 'LOCAL' for use in React\r\n * Native environments.\r\n *\r\n * @public\r\n */\nvar reactNativeLocalPersistence = getReactNativePersistence({\n  getItem: function getItem() {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    // Called inline to avoid deprecation warnings on startup.\n    return (_a = ReactNative__namespace.AsyncStorage).getItem.apply(_a, args);\n  },\n  setItem: function setItem() {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    // Called inline to avoid deprecation warnings on startup.\n    return (_a = ReactNative__namespace.AsyncStorage).setItem.apply(_a, args);\n  },\n  removeItem: function removeItem() {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    // Called inline to avoid deprecation warnings on startup.\n    return (_a = ReactNative__namespace.AsyncStorage).removeItem.apply(_a, args);\n  }\n});\nfunction getAuth(app$1) {\n  if (app$1 === void 0) {\n    app$1 = app.getApp();\n  }\n  var provider = app._getProvider(app$1, 'auth');\n  if (provider.isInitialized()) {\n    return provider.getImmediate();\n  }\n  return phone.initializeAuth(app$1, {\n    persistence: reactNativeLocalPersistence\n  });\n}\nphone.registerAuth(\"ReactNative\" /* ClientPlatform.REACT_NATIVE */);\n\nexports.ActionCodeOperation = phone.ActionCodeOperation;\nexports.ActionCodeURL = phone.ActionCodeURL;\nexports.AuthCredential = phone.AuthCredential;\nexports.AuthErrorCodes = phone.AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY;\nexports.EmailAuthCredential = phone.EmailAuthCredential;\nexports.EmailAuthProvider = phone.EmailAuthProvider;\nexports.FacebookAuthProvider = phone.FacebookAuthProvider;\nexports.FactorId = phone.FactorId;\nexports.GithubAuthProvider = phone.GithubAuthProvider;\nexports.GoogleAuthProvider = phone.GoogleAuthProvider;\nexports.OAuthCredential = phone.OAuthCredential;\nexports.OAuthProvider = phone.OAuthProvider;\nexports.OperationType = phone.OperationType;\nexports.PhoneAuthCredential = phone.PhoneAuthCredential;\nexports.PhoneAuthProvider = phone.PhoneAuthProvider;\nexports.PhoneMultiFactorGenerator = phone.PhoneMultiFactorGenerator;\nexports.ProviderId = phone.ProviderId;\nexports.SAMLAuthProvider = phone.SAMLAuthProvider;\nexports.SignInMethod = phone.SignInMethod;\nexports.TwitterAuthProvider = phone.TwitterAuthProvider;\nexports.applyActionCode = phone.applyActionCode;\nexports.beforeAuthStateChanged = phone.beforeAuthStateChanged;\nexports.checkActionCode = phone.checkActionCode;\nexports.confirmPasswordReset = phone.confirmPasswordReset;\nexports.connectAuthEmulator = phone.connectAuthEmulator;\nexports.createUserWithEmailAndPassword = phone.createUserWithEmailAndPassword;\nexports.debugErrorMap = phone.debugErrorMap;\nexports.deleteUser = phone.deleteUser;\nexports.fetchSignInMethodsForEmail = phone.fetchSignInMethodsForEmail;\nexports.getAdditionalUserInfo = phone.getAdditionalUserInfo;\nexports.getIdToken = phone.getIdToken;\nexports.getIdTokenResult = phone.getIdTokenResult;\nexports.getMultiFactorResolver = phone.getMultiFactorResolver;\nexports.inMemoryPersistence = phone.inMemoryPersistence;\nexports.initializeAuth = phone.initializeAuth;\nexports.isSignInWithEmailLink = phone.isSignInWithEmailLink;\nexports.linkWithCredential = phone.linkWithCredential;\nexports.linkWithPhoneNumber = phone.linkWithPhoneNumber;\nexports.multiFactor = phone.multiFactor;\nexports.onAuthStateChanged = phone.onAuthStateChanged;\nexports.onIdTokenChanged = phone.onIdTokenChanged;\nexports.parseActionCodeURL = phone.parseActionCodeURL;\nexports.prodErrorMap = phone.prodErrorMap;\nexports.reauthenticateWithCredential = phone.reauthenticateWithCredential;\nexports.reauthenticateWithPhoneNumber = phone.reauthenticateWithPhoneNumber;\nexports.reload = phone.reload;\nexports.sendEmailVerification = phone.sendEmailVerification;\nexports.sendPasswordResetEmail = phone.sendPasswordResetEmail;\nexports.sendSignInLinkToEmail = phone.sendSignInLinkToEmail;\nexports.setPersistence = phone.setPersistence;\nexports.signInAnonymously = phone.signInAnonymously;\nexports.signInWithCredential = phone.signInWithCredential;\nexports.signInWithCustomToken = phone.signInWithCustomToken;\nexports.signInWithEmailAndPassword = phone.signInWithEmailAndPassword;\nexports.signInWithEmailLink = phone.signInWithEmailLink;\nexports.signInWithPhoneNumber = phone.signInWithPhoneNumber;\nexports.signOut = phone.signOut;\nexports.unlink = phone.unlink;\nexports.updateCurrentUser = phone.updateCurrentUser;\nexports.updateEmail = phone.updateEmail;\nexports.updatePassword = phone.updatePassword;\nexports.updatePhoneNumber = phone.updatePhoneNumber;\nexports.updateProfile = phone.updateProfile;\nexports.useDeviceLanguage = phone.useDeviceLanguage;\nexports.verifyBeforeUpdateEmail = phone.verifyBeforeUpdateEmail;\nexports.verifyPasswordResetCode = phone.verifyPasswordResetCode;\nexports.getAuth = getAuth;\nexports.getReactNativePersistence = getReactNativePersistence;\nexports.reactNativeLocalPersistence = reactNativeLocalPersistence;","map":{"version":3,"sources":["../../src/platform_react_native/persistence/react_native.ts","../../index.rn.ts"],"names":["STORAGE_AVAILABLE_KEY","_getProvider","app","initializeAuth","registerAuth"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence, ReactNativeAsyncStorage } from '../../model/public_types';\n\nimport {\n  PersistenceInternal,\n  PersistenceType,\n  PersistenceValue,\n  STORAGE_AVAILABLE_KEY,\n  StorageEventListener\n} from '../../core/persistence';\n\n/**\n * Returns a persistence object that wraps `AsyncStorage` imported from\n * `react-native` or `@react-native-community/async-storage`, and can\n * be used in the persistence dependency field in {@link initializeAuth}.\n *\n * @public\n */\nexport function getReactNativePersistence(\n  storage: ReactNativeAsyncStorage\n): Persistence {\n  // In the _getInstance() implementation (see src/core/persistence/index.ts),\n  // we expect each \"externs.Persistence\" object passed to us by the user to\n  // be able to be instantiated (as a class) using \"new\". That function also\n  // expects the constructor to be empty. Since ReactNativeStorage requires the\n  // underlying storage layer, we need to be able to create subclasses\n  // (closures, esentially) that have the storage layer but empty constructor.\n  return class implements PersistenceInternal {\n    static type: 'LOCAL' = 'LOCAL';\n    readonly type: PersistenceType = PersistenceType.LOCAL;\n\n    async _isAvailable(): Promise<boolean> {\n      try {\n        if (!storage) {\n          return false;\n        }\n        await storage.setItem(STORAGE_AVAILABLE_KEY, '1');\n        await storage.removeItem(STORAGE_AVAILABLE_KEY);\n        return true;\n      } catch {\n        return false;\n      }\n    }\n\n    _set(key: string, value: PersistenceValue): Promise<void> {\n      return storage.setItem(key, JSON.stringify(value));\n    }\n\n    async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n      const json = await storage.getItem(key);\n      return json ? JSON.parse(json) : null;\n    }\n\n    _remove(key: string): Promise<void> {\n      return storage.removeItem(key);\n    }\n\n    _addListener(_key: string, _listener: StorageEventListener): void {\n      // Listeners are not supported for React Native storage.\n      return;\n    }\n\n    _removeListener(_key: string, _listener: StorageEventListener): void {\n      // Listeners are not supported for React Native storage.\n      return;\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This is the file that people using React Native will actually import. You\n * should only include this file if you have something specific about your\n * implementation that mandates having a separate entrypoint. Otherwise you can\n * just use index.ts\n */\n\nimport * as ReactNative from 'react-native';\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { Auth, Persistence } from './src/model/public_types';\n\nimport { initializeAuth } from './src';\nimport { registerAuth } from './src/core/auth/register';\nimport { ClientPlatform } from './src/core/util/version';\nimport { getReactNativePersistence } from './src/platform_react_native/persistence/react_native';\n\n// Core functionality shared by all clients\nexport * from './index.shared';\n\n// Export some Phone symbols\n// providers\nexport { PhoneAuthProvider } from './src/platform_browser/providers/phone';\n\n// strategies\nexport {\n  signInWithPhoneNumber,\n  linkWithPhoneNumber,\n  reauthenticateWithPhoneNumber,\n  updatePhoneNumber\n} from './src/platform_browser/strategies/phone';\n\n// MFA\nexport { PhoneMultiFactorGenerator } from './src/platform_browser/mfa/assertions/phone';\n\n/**\n * An implementation of {@link Persistence} of type 'LOCAL' for use in React\n * Native environments.\n *\n * @public\n */\nexport const reactNativeLocalPersistence: Persistence =\n  getReactNativePersistence({\n    getItem(...args) {\n      // Called inline to avoid deprecation warnings on startup.\n      return ReactNative.AsyncStorage.getItem(...args);\n    },\n    setItem(...args) {\n      // Called inline to avoid deprecation warnings on startup.\n      return ReactNative.AsyncStorage.setItem(...args);\n    },\n    removeItem(...args) {\n      // Called inline to avoid deprecation warnings on startup.\n      return ReactNative.AsyncStorage.removeItem(...args);\n    }\n  });\n\nexport { getReactNativePersistence };\n\nexport function getAuth(app: FirebaseApp = getApp()): Auth {\n  const provider = _getProvider(app, 'auth');\n\n  if (provider.isInitialized()) {\n    return provider.getImmediate();\n  }\n\n  return initializeAuth(app, {\n    persistence: reactNativeLocalPersistence\n  });\n}\n\nregisterAuth(ClientPlatform.REACT_NATIVE);\n"]},"metadata":{},"sourceType":"script"}